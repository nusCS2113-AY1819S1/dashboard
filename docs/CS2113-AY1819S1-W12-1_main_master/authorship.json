[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d JitHub"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-W12-1/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-W12-1/main?branch\u003dmaster[image:https://img.shields.io/coveralls/CS2113-AY1819S1-W12-1/main.svg[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/dd0d555143b2466ea1a23a2a5e1dffa7[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/jitwei98/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2113-AY1819S1-W12-1/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* JitHub is an application that saves your contacts and helps you schedule meetings through cross-checking the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "timetable of your group mates."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* JitHub is a CLI (Command Line Interface) application with GUI output so that you can have best of the both worlds."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* JitHub is a Java application that you can run on any machine with Java Runtime Environment installed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* What makes JitHub special:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Meeting scheduling [coming in v1.4]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Add to-do tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Natural language processing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Auto complete for commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Export/Import contacts"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* This application is built on the sample application https://github.com/nusCS2113-AY1819S1/addressbook-level4[Address Book (Level 4)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://opencsv.sourceforge.net/[opencsv]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* The original contributors of the addressbook can be found https://github.com/CS2113-AY1819S1-W12-1/main/blob/master/docs/AboutUs.adoc[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 3,
      "jitwei98": 15,
      "-": 24
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"githubId\": \"linnnruoo\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\t\"displayName\": \"BAO...RUO\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\t\"authorNames\": [\"linnnruoo\", \"Lynn\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"githubId\": \"driedmelon\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"displayName\": \"CHU...WEI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"authorNames\": [\"driedmelon\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"githubId\": \"elstonayx\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"displayName\": \"ELS...UAN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"authorNames\": [\"elstonayx\", \"Elston Aw\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"githubId\": \"jitwei98\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"displayName\": \"LIM...WEI\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"authorNames\": [\"jitwei98\", \"jw98\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"githubId\": \"junweiljw\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"displayName\": \"LOW...WEI\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t\t\"authorNames\": [\"junweiljw\", \"Low Jun Wei\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\t]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jitwei98": 31
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    compile group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00274.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    archiveName \u003d \u0027jithub.jar\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        \u0027site-name\u0027: \u0027JitHub\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-W12-1/main\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 5,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "JitHub was developed by the CS2113T-W12-1 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Chun Hong Wei"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::driedmelon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "{empty}[https://github.com/driedmelon[github]]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[\u003c\u003cchunhongwei#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Responsibilities: Deliverables and deadlines +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Bao Linruo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::linnnruoo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "{empty}[https://github.com/linnnruoo[github]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "[\u003c\u003clinnnruoo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Responsibilities: Integration + Testing +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Elston Aw Yu Xuan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::elstonayx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "{empty}[https://github.com/elstonayx[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[\u003c\u003celston#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Responsibilities: Code quality +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Lim Jit Wei"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::jitwei98.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "{empty}[http://github.com/jitwei98[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[\u003c\u003climjitwei#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Responsibilities: Scheduling and tracking +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Low Jun Wei"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::junweiljw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "{empty}[https://github.com/junweiljw[github]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "[\u003c\u003cjunweiljw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Responsibilities: Documentation +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 1,
      "jitwei98": 26,
      "-": 32,
      "junweiljw": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d JitHub - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W12-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "By: `CS2113-AY1819S1-W12-1`      Since: `Aug 2018`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// TODO: modify architecture diagram to display current implementations"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ".  The userInput is processed by a Natural Language Processor and Suggestion component and the relevant data is parsed into its corresponding classes"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[Design-Export]]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Export component"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".Structure of the Export Component"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::ExportClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/export/Export.java[`Export.java`]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The `Export` component can save the filtered persons to the specified file in xml format."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[Design-Import]]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Import component"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".Structure of the Import Component"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::ImportClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/export/Import.java[`Import.java`]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The `Import` component can read the Address Book data from the specified file in xml format."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The import component (Import.java and ImportManager.java) is packaged under the export package."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::exportall[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[exportall]]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d ExportAll feature"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The exportall mechanism is facilitated by `CsvWriter`. Internally, a CSVWriter object from the http://opencsv.sourceforge.net/[OpenCSV]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "library is instantiated to write all persons to the default file path `/data/jithub.csv`. Currently, it implements"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " the following operation(s):"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `CsvWriter#write()` -- Writes the name, phone, address, and email of all persons in the current address book to"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "`/data/jithub.csv`, and overwrites the file if an older version is available."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#exportAddressBook()`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Given below is an example usage scenario and how the exportall mechanism behaves at each step."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 1. The user calls the exportall command with `exportall csv`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 2. The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 3. The AddressBookParser is called and it returns a ExportAllCommand object to LogicManager."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 4. The LogicManager calls execute() on the ExportAllCommand object"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 5. The Logic component then interacts with the Model component by calling `exportAddressBook()` of the Model"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "interface."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 6. The Model interface creates a new CsvWriter object and invokes the method `write()`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 7. The CsvWriter writes the data to the defined file path."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The file path is defined in `outputFilepath`, and is hardcoded as `/data/jithub.csv` for now."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Any existing file named as `jithub.csv` at the defined path will be overwritten."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The following sequence diagram shows how the ExportAll operation works:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::ExportAllSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// The following activity diagram summarizes what happens when `CsvWriter#write()` is called:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: show the if condition for file exists and not exists"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: implementation details of write()"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of CsvWriter#write()"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Given below is the algorithm behind the write() method used in the `ExportAll` Command:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 1. Instantiate an OpenCSV writer."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 2. Write the header to the csv file."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 3. Declare a `List\u003cString[]\u003e data`."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 4. Loop through an"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "https://docs.oracle.com/javase/8/javafx/api/javafx/collections/ObservableList.html[`ObservableList\u003cPerson\u003e`]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "containing all persons in the AddressBook and push `String[] personDetails` to `data`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // Generates a string array for each person and stores the details"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    String[] personDetails \u003d new String[header.length];"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_NAME] \u003d person.getName().toString();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_PHONE] \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_ADDRESS] \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_EMAIL] \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 5. Write `data` to the csv file."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 6. Close the OpenCSV writer."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How data in the AddressBook is passed into the CsvWriter object"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* **Alternative 1 (current choice):** `ObservableList\u003cPerson\u003e`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Pros: Easy to implement since `getFilteredPersonList()` is already implemented."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* **Alternative 2:** `versionedAddressBook`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Pros: Looks more direct since the whole AddressBook is passed into the `CsvWriter`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Cons: Hard to write tests and requires more methods to process the data."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* **Solution**: The data is passed into the `CsvWriter` object through its constructor as an `ObservableList\u003cPerson\u003e`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::exportall[]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::todo[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d Todo Feature"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "This feature allows users to add a to-do task."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The todo mechanism is facilitated by the `TodoComand` from the `Logic` component. A `Todo` object is instantiated to add a to-do task and each `Todo` object consists of  a `Title` and `Content` object."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Given below is an example usage scenario and how the todo mechanism behaves at each step."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 1. The user calls the todo command with its relevant parameters. e.g `todo tt/Buy tomato c/Buy tomato at NTUC otw back to school`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 2. The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 3. The AddressBookParser is called and it returns a TodoCommand object to the LogicManager."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 4. The LogicManager will call execute() on the TodoCommand object. If the to-do task of the same title and content is found, it would return a string of message `MESSAGE_DUPLICATE_TODO`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 5. The Logic component then interacts with the Model component which calls `addTodo(todo)` to add the to-do task"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 6. The command result would then return the message `MESSAGE_SUCCESS` in a string and the to-do task added will be displayed on the to-do list panel."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram illustrates the Todo class:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::TodoClassDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram illustrates how the Todo operation works:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::TodoSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Checking for duplications of to-do tasks"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* **Alternative 1 (current choice):** `isSameTodo`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Pros: Easy to implement and write the test as it checks for both the title and the content of a to-do task"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Cons: This implementation may store too many similiar to-do tasks."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::todo[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::finishTodo[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d FinishTodo Feature"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "This feature allows users to complete the to-do task he/she has created."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The finishTodo mechanism is facilitated by the `FinishTodoCommand` from the `Logic` component. Upon pressing executing the `finishTodo` command, the to-do task chosen by users will be removed from the `addressbook.xml` in the data folder."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Given below is an example usage scenario and how the finishTodo mechanism behaves at each step."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 1. The user calls the finishTodo command with the to-do task\u0027s displayed index. e.g `finishTodo 1`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 2. The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 3. The AddressBookParser is called and it returns a FinishTodoCommand object to the LogicManager."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 4. The LogicManager will call execute() on the FinishTodoCommand object. If no to-do of the corresponding index is found, it would return a string of message `MESSAGE_INVALID_TODO_DISPLAYED_INDEX`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 5. The Logic component then interacts with the AddressBook component to execute `removeTodo(target)` to remove the to-do task."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Step 6. The command result would then return the message `MESSAGE_FINISH_TODO_SUCCESS` in a string."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram illustrates how the FinishTodo operation works:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::FinishTodoSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How finishTodo feature handles the to-do task"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* **Alternative 1 (current choice):** `removeTodo`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Pros: Easy to implement and write the test as it simply removes the to-do entry from the storage."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Cons: Users cannot view the previously completed to-do tasks."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* **Alternative 2:** `markTodoAsCompleted`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Pros: Better user experience as users simply mark it as completed and the completed to-do tasks will thus be displayed on another panel."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Cons: More tedious to write the tests."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::finishTodo[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// tag::suggestion[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Suggestions Feature"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "The suggestions feature gives users helpful suggestions on what command to type, and corrections for commands when incorrect"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "commands are being entered."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "There are two instances when suggestions are given."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Firstly, when a user completes entering a command (after pressing `ENTER` key), if the command typed is invalid, such as"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "commands being misspelt, the system will suggest a similar command based on the edit distance (which will be explained later)."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "The second instance would be when the user presses tab while typing the command halfway. The system will suggest commands"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "based on the current prefix string. If only a single command is available, the command would be completed for the user,"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "and the system would show the parameters required for that command."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Wrong Command Suggestion"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Given below is an example usage of how the WrongCommandSuggestion behaves at each step."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 1: The user would type in a misspelt command string into the Command Box pane."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 2: The command would be parsed into the AddressBookParser class. Since no commands match the word exactly, it would"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "fall into the default case."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 3: The default case would extract out only the command portion of the user input, and input it into the"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "WrongCommandSuggestion class."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 4: WrongCommandSuggestion would then instantiate the StringSimilarity class to find the nearest match of a word."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 5: editDistance in StringSimliarity class would be called to find out the edit distance between two words. These two"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "words would be the wrong command the user has input, and the list of available commands in the whole application."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 6: WrongCommandSuggestion would then compare if the edit distance of the current command is shorter than the current"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "shortest edit distance command (which is initialised to 5 edits). If it is shorter, it would then suggest the current command."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 7: WrongCommandSuggestion would then return the suggestion in a string, which would then be inputted into the CommandException,"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "to be thrown to the LogicManager class."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "The following sequence diagram shows an example of how the WrongCommandSuggestion operation works with"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "misspelt command \"histary\" (closest command is `history`):"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "image::WrongCommandSuggestionSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//TODO: explain implementation of Levenshtein Distance"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Input Command Suggestion"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Given below is an example of how the InputCommandSuggestion behaves at each step."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 1: Upon instantiation of CommandBox during the program instantiation phase, CommandBox will create an instance of"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "InputCommandSuggestion, which will create a Trie containing all the commands available in the application."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 2: When the user presses `TAB` after entering a command, CommandBox will call method `handleTabPressed()` to fetch"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "the current input that the user has typed."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 3: `handleTabPressed()` method will then call the `getSuggestedCommands()` method in InputCommandSuggestion, while"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "inputting the user\u0027s input into the parameters."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 4: The InputCommandSuggestion would then find available commands using the Trie class and determine whether there"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "are any other possible combinations of commands with the current string of words."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 5: The Trie class would then return a list of commands available, which would then pass back to CommandBox."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 6a: If there is only one command available, CommandBox would auto-complete the current input with the valid command,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "then request for the Command Parameters through the InputCommandSuggestion class. It would then pass the string to be"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "posted on EventsCenter, so that the Command Parameters would be displayed on the results panel."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Step 6b: If there are multiple commands available, CommandBox will pass all the possible commands to EventsCenter, to"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "output all possible commands available with the current string."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "The following sequence diagram shows an example of how the InputCommandSuggestion class works:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "image::InputCommandSuggestionSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "For the WrongCommandSuggestion implementation, there were multiple design considerations while implementing the feature."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* **Alternative 1:** Compare the input command and the actual command character by character and see"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "which command has the most matches."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Cons: Not as accurate or reliable in terms of giving a correct match of command."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* **Alternative 2 (current choice):** Use a string matching algorithm to implement the matching and difference"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "calculation between the command and the user input."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Pros: Accurate prediction or suggestions from actual commands."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Cons: Difficult to implement, and might require more processing overhead."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "For the InputCommandSuggestion implementation, there were multiple design considerations while implementing the feature."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* **Alternative 1:** While the user types, command suggestions would be given continuously with regards"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "to the user\u0027s input."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Pros: Makes it more convenient for typing in commands as there is immediate response of the correctness of the command."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Cons: May have performance issues in terms of memory usage, complicated to implement, and requires a lot of work on"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "the UI for the application."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* **Alternative 2 (current choice):** When the user requires corrections to the command or requires feedback, press `TAB`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "key to receive suggestions given by the system."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Pros: Less overhead to the system as the system does not have to constantly run the algorithm to check for valid and"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "available commands."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Cons: Feedback is less responsive, and requires additional keys for users to press."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//end::suggestion[]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Schedule Feature"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "The schedule mechanism is facilitated by `Person`. It adds a schedule data set into a `Person` that was previously created"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "to keep track of events and allow for searching of common available time slots later on."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Given below is an example of a usage scenario and how the schedule mechanism behaves at each step."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 1. The user calls the schedule command with `schedule index date startTime endTime eventName`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 2. The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 3. The AddressBookParser is called and it returns a ScheduleCommand object to LogicManager."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 4. The LogicManager calls execute() on the ScheduleCommand object."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 5. The ScheduleCommand object creates a person object for model."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 6. The Logic component then interacts with the Model component by calling UpdatePerson(\"target, editedPersonWithSchedule\")"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 7. The Model component updates the address book."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ".Schedule sequence diagram"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "image::ScheduleSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d\u003d Match schedule"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Given below is the algorithm behind the matchSchedule command."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 1. The user calls the matchSchedule command with `matchSchedule date startTime endTime index...`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 2. The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 3. The AddressBookParser is called and it returns a MatchScheduleCommand object to LogicManager."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 4. The LogicManager calls execute on the MatchScheduleCommand object."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Step 5. The MatchScheduleCommand object finds common time slots in the date and time range given by startTime and endTime"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "by generating an array, and updates the UI part of address book."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    // Generates an int array (startEndTimeBlock) of size 1440 which stores whether each minute of the day is busy"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    for (int i \u003d 0; i \u003c this.startTimeList.size(); i++) {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                for (int j \u003d this.startTimeList.get(i).timeToMinutesInDay();"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                     j \u003c\u003d this.endTimeList.get(i).timeToMinutesInDay(); j++) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                    this.startEndTimeBlock[j] \u003d 1;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "           }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Aspect: How schedule is stored"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* Alternative 1 ( Current choice ): Schedule is stored with the Person"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Pros: Easy to implement, easy to display from UI"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Cons: /TO BE DONE/ Test case constraints"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* Alternative 2: Schedule is stored on it\u0027s own, with a reference tag from the Person to retrieve and display it."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Pros: Separate from the person to improve SOC."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Cons: Expensive and difficult to implement."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Aspect: How match schedule executes"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* Alternative 1 ( Current choice ): Matches schedule only for 1 day"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Pros: Easy to implement, less expensive in memory usage"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Cons: Unable to check across different dates"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* Alternative 2: Matches schedule across entire span"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Pros: Allows for a more friendly usage of matching schedules"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Cons: Very expensive in memory usage"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//end::schedule[]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d Calendar Feature"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "This feature allows users to complete the to-do task he/she has created."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The calendar feature resides in the `UI` component to render the view of a monthly calendar at the current locale time."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The calendar feature itself is at v0.1 since it only displays the dates of the month."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram illustrates how the Calendar view is rendered:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::CalendarSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the calendar"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* **Alternative 1 (current choice):** `JavaFx Scence`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Pros: Gives a responsible layout on the calendar panel and allows the user to view the calendar with different screen size."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Cons: Most of the code is hardcoded and thus less maintainable."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* **Alternative 2:** `CalendarFx`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Pros: Cleaner code since it will be imported from external libraries and better UI. It could potentially speed up the development process."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Cons: CalendarFx so far has version 8, 10 and 11. It does not support Travis which complies most of the packages using jdk9, which potentially hinder the debugging process done by Travis."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::displayScheduleOnCalendar[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Schedule Display Calendar Selected Person"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "This feature allows the calendar of a person to be displayed upon being selected."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "This makes use of the calendar feature, which activates the rendering of the calendar upon an event of a person being selected."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Upon the selection of a person, the calendar will overwrite the welcome message view, showing the calendar of the current month."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*It is unable to show the schedules added into the person.*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d [Proposed] Schedule Display Calendar Selected Person [V2.0]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "When a person is selected, the person\u0027s schedule should be displayed on the calendar panel."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "The string of common time slots printed on the resultCommandWindow should be displayed on the calendar panel, under the"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "correct date."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ".Calendar UI Component"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "image::FutureCalendarUI.png[width\u003d\"380\"]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::displayScheduleOnCalendar[]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d Reminder Feature"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Add a reminder to notify users of an upcoming meeting."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "The reminder mechanism is facilitated by the `ReminderCommand`, which extends `Command`, from the `Logic` component. A `Reminder` object is instantiated and each `Reminder` object consists of `Title`, `Date`, `Time` and `Agenda` objects."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "The following diagram illustrates the Reminder class:"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "image::ReminderClassDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Given below is an example usage scenario of how the reminder mechanism behaves at each step."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Step 1. A student launches the application for the first time and types in a valid reminder command into the CommandBox Pane."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Step 2. The command will be parsed into the `AddressBookParser` class."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Step 3. AddressBookParser recognises the command word `reminder` and parses the remaining arguments into `ReminderCommandParser`."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Step 4. `ReminderCommandParser` checks for the validity of the `title`, `date`, `time` and `agenda` parameters."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Step 5. If the parameters are valid, `addReminder()` in the `Model` component updates the `VersionedAddressBook` with the new `Reminder`."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Step 6. This exposes an unmodifiable `ObservableList\u003cReminder\u003e` that the `ReminderListPane` in the `UI` is bound to, automatically updating itself upon the addition of the new `Reminder`."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "The following diagram illustrates how the `ReminderCommand` operation interactions with the `Logic` and `Model` components:"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "image::ReminderSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Checking for duplications of reminders"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* **Alternative 1 (current choice):** `isSameReminder`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Pros: Easy to implement and write the test as it checks for all the parameters of a reminder."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Cons: This implementation may store too many similiar reminders."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Too many UI Windows"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* **Alternative 1 (current choice):** Implementing a `VBox` to split the `Todo` and `Reminder`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Pros: This makes the 2 panes take up only half the size of normal panes, reducing the clutter on the screen. Since there isn\u0027t a need for too many `Todo` and `Reminder` to be displayed concurrently, a small pane is useable. Furthermore, the individual panes are also scrollable and resizeable."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Cons: This results in a smaller pane for each component, which may cause them to be overlooked."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* **Alternative 2:** A command to switch between the `Todo` and `Reminder` panes"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Pros: More space is catered towards both panes, allowing for the display of more information."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Cons: Concurrent viewing of `Todo` and `Reminder` will not be possible."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "// end::reminder[]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Additional user stories:"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|Priority |As a/an ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |student who does not like to do unnecessary work |import the contact details my group members saved before"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|avoid unnecessary typing"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |student who likes to save the trouble of my group mates |export the contact details of my other group members"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "that I have saved |share it to my group members for them to import to their JitHub"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|`* * *` |student who wishes to schedule project meetings |see common available time slots between selected persons |schedule a project meeting"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |student with different group projects |group my contacts into different categories |I can send out messages to different project groups"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |team leader of a group project |save the timetable of my project group mates |find potential time slot for"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "meetings"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |user who is concerned about security |hide some/all of my contacts with a password |people cannot see them without my permission."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* *` |extensive CLI user|have autocomplete function |accomplish my command line input faster"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* *` |user who is always meeting new people |add a new person through QR code |do not have to key in new contact"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "details manually"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`*` |user who is new to CLI |have a natural language-like CLI |I can pick up how to use CLI faster"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "(For all use cases below, the *System* is the `JitHub` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Use case: Add and Match schedule"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "1.  User requests to add personal schedule."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "2.  User adds in non-available time slots for selected persons with event name."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "3.  User selects a group of persons."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "4.  Jithub shows the common available time slots among all selected persons."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "+"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* 2a. User requests to clear added schedule of a person."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** 2ai. Schedule of selected person is cleared."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "+"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* 2a. User does not add anything."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* 4a. No common time slots available."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "+"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "2.  Jithub shows a list of persons"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "4.  Jithub deletes the person"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::exportusecase[]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Use case: Export contacts"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". User finds the contacts he wants to export."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". JitHub shows a list of contacts matching the search criteria."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". User requests to export the contacts shown to a file with specific filename."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". JitHub exports the list of contacts to the specific file."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". User sends the file to his/her group members."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** 2a1. User requests to export the empty contacts to a file with specific filename."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** 2a2. JitHub indicates there is nothing to export."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* 3a. The given filename is invalid."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** 3a1. JitHub shows an error message."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::exportusecase[]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// tag::useCaseSuggestions[]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Use case: Get Suggestions"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "1.  User types a command and presses TAB to get suggestions."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "2.  Jithub shows a list of possible commands."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "3.  User continues typing the command to completion and presses TAB."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "4.  Jithub shows the parameters required for the command."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* 2a. There are no commands available to suggest."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* 2b. There is only one command available to suggest."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** 2b1. JitHub completes the command input and shows the parameters required."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//end::useCaseSuggestions[]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".  Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".  Should not exceed 100MB in size."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".  Should not use any words deemed offensive to English speakers."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::manualtesting[]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// _{ more test cases ... }_"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// tag::testCaseSuggestions[]"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Getting an Wrong Command Suggestion"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ". Getting a nearest command suggestion after entering the keyed input."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ".. Test case: `delet` followed by `ENTER` key +"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "   Expected: Result bar would show that the current input is an unknown command. It would then suggest"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    command `delete` in the next line. +"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    Expected: Result bar might show multiple commands to suggest if available."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ".. Other suggestions to try: `schedulee`, `expart`, etc +"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Getting an Input Command Suggestion"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ". Getting a command suggestion while typing the desired command."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ".. Test case: `a` followed by `TAB` key +"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "  Expected: Command bar would complete the only command starting with `a` available, which is `add`."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "   It would then show the parameters of `add` command. in the results bar. +"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "   Expected: Result bar might show multiple commands if available, and not complete the command when so."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ".. Other suggestions to try: `ex`, `s`, etc +"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "  Expected: Similar to previous."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//end::testCaseSuggestions[]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::testimportexport[]"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Exporting and importing data"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". Exporting an empty list"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Prerequisites: Clear all persons using the `clear` command."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Test case: `export somefile` +"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   Expected: Error message \"Invalid command format!\""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Test case: `export somefile.xml` +"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   Expected: Error message \"There is nothing to export!\""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". Importing a non-existent file"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Prerequisites: The file `somefile.xml` does not exist at `\u003cDIRECTORY OF YOUR JAR\u003e/data/`"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Test case: `import somefile` +"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   Expected: Error message \"Invalid command format!\""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Test case: `import somefile.xml` +"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   Expected: Error message \"File not found!\""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ". Exporting and importing the whole JitHub"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Prerequisites: List all persons using the `list` command."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".. Test case: `export somefile.xml` + `clear` + `import somefile.xml` +"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   Expected:"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   * The persons listed are cleared after the `clear` command."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "   * The persons cleared are restored after the `import` command."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::testimportexport[]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 141,
      "linnnruoo": 97,
      "driedmelon": 113,
      "jitwei98": 180,
      "-": 700,
      "junweiljw": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d JitHub - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W12-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "By: `CS2113-AY1819S1-W12-1`      Since: `Aug 2018`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "JitHub is for students who *prefer to use a desktop app for managing contacts, email, and calendar*. More importantly,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "JitHub is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "of a Graphical User Interface (GUI). If you can type fast, JitHub can get your daily tasks such as checking schedule done faster than traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ".  Download the latest `jithub.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your JitHub."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: Update Ui screenshot"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "e.g. typing *`help`* or *`h`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* *`h`* : access the help document"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` / `h`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add` / `a`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list` / `ls`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit` / `e`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find` / `f`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete` / `d`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select` / `s`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Upon selecting a person, the calendar of the current month will be displayed, instead of the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "welcome message."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "For additional calendar features, please view `calendar to view schedule`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history` / `hs`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` / `z`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` / `y`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` / `c`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Searching for person\u0027s photograph"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Searches for the person\u0027s photograph on Google."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* Person must have an online presence eg. Facebook/LinkedIn for the search to work."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* The selected person will be searched on google. Refer to `select` on how to select a person."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: update according to the latest features"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[export]]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Export contacts displayed: `export`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "You can save the hassle of your group mates typing in the exact same contact details of your group members if you"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " have already save them into your JitHub."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "To do so, simply *find* the person(s) and *export* the contact details in JitHub to a"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "file and share it with your group mates. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Format: `export FILENAME.xml`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `find Alex` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `export alex.xml`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//1) `find Alex`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//Find the person(s) you want to export. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//image::findAlex.png[width\u003d\"360\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//2) `export alex.xml`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//Export to a xml file with specific filename. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//image::exportAlex.png[width\u003d\"360\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "1.  The file will be located in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/FILENAME.xml`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "2.  This command overwrites any files with the same name at `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Your team members can import the contact details to their JitHub. Please refer to \u003c\u003cimport\u003e\u003e."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: screenshot of success message"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::exportall[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[exportall]]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Exporting all contacts : `exportall`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Export the name, phone, address and email of all persons in the addressbook under the specified filetype. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Format: `exportall FILETYPE`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `exportall csv`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `exportall vcf` [coming in v2.0]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "1.  The file will be located in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/jithub.csv`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "2.  This command overwrites the previous `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/jithub.csv`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: screenshot of success message"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::exportall[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[import]]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Import contacts: `import`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "You can save the hassle of typing in the exact same contact details of your group members if one of your group members"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " have already save them into his/her JitHub."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "To do so, politely ask them to *export* the contact details and place the file your teammate exported into the"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "`/data/` of your JitHub"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "and *import* it into your JitHub. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Format: `import FILENAME.xml`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `import alex.xml`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "1.  The file to import must be placed in `\u003cDIRECTORY OF YOUR JAR FILE\u003e/data/`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "2.  Persons that already exist in your JitHub won\u0027t be imported."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "To import an existing person in JitHub with different contact details, please `delete` them first."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "3.  The `undo` command works with the `import` command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "You can refer to \u003c\u003cexport\u003e\u003e for instructions on how to export contact details."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: screenshot of success message"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Add personal schedule : `schedule` / `sc`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "This function enables you to add the scheduled events of a person into the selected person\u0027s card."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Format: `schedule INDEX-OF-PERSON d/DATE(DDMMYYYY) st/START-TIME et/END_TIME en/EVENT-NAME`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* `schedule 1 d/09092018 st/1200 et/1400 en/CS1231 Exam`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* `schedule 2 d/08072018 st/1000 et/1900 en/CS2040C Practical Exam`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*Currently, the adding of scheduled events allows for events of the same name to be added, at the same time slot."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "This issue will be fixed in V2.0.*"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Clear personal weekly schedule : `clearSchedule` / `cs`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "`clearSchedule IndexOfPerson`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* `clearSchedule 1`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d List Common Schedule : `matchSchedule` / `ms`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Shows a list of common meeting time for a group of contacts and the user in that given that given period of time. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Format: `matchSchedule d/SELECTED-DATE st/START-TIME et/END-TIME i/INDEX-OF-PERSON...[INDEX]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* `matchSchedule d/01012018 st/0800 et/1800 i/1 i/2 i/3`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::todo[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d Add To-do task: `todo`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Adds a to-do task, the to-do list panel will display the task\u0027s title and its content. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Format: `todo tt/TITLE c/CONTENT`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* `todo tt/Write tests c/Need to write test for this command`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* `todo tt/Buy grocery c/Buy tomato and potato on the way back home`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram illustrates how the `todo` is being used on the JitHub CLI-GUI app:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::TodoUsage1.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::TodoUsage2.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::todo[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::finishTodo[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d Finish To-do task: `finishTodo`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Complete a to-do task, and the to-do list panel will re-render the remaining unfinished to-do tasks. +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Format: `finishTodo INDEX`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* `finishTodo 1`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "1.  The completed to-do task will be removed from your JitHub."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram illustrates how the `finishTodo` is being used on the JitHub CLI-GUI app:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::FinishTodoUsage.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::finishTodo[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d Add Reminder: `reminder`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Adds a reminder for your next meeting, containing details like the title, date, time and agenda of the meeting. +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Format: `reminder tt/TITLE d/DATE(DDMMYYYY) st/START_TIME ag/AGENDA`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Reminders with the same `TITLE` are allowed but not with the same `DATE` *and* `START_TIME`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "****"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* Only 1 of each field is allowed."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* `TITLE`, `DATE`, `START_TIME` `AGENDA` all cannot be blank fields."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* `TITLE` and `AGENDA` accepts any alphanumerical input of any length."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* `DATE` must be in DDMMYYYY format, and only numbers will be accepted."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* `START_TIME` must be in 24 hours format, cannot exceed 2359 and only numbers will be accepted."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "****"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* `reminder tt/CS2113T Meeting d/03112018 st/1900 ag/Milestone 1.4`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* The following sequence of images illustrate how the example `ReminderCommand` is executed in JitHub."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Step 1: User inputs command in Jithub\u0027s command box."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "image::ReminderExample.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Step 2: On successful addition, the results box will display this message."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "image::ReminderSuccess.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Step 3: The newly added `Reminder` will be displayed on the `Reminder` pane of the `UI` sidebar, below the `Todo` pane."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "image::ReminderPane.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "// end::reminder[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit` / `x`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "JitHub data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "There is no need to save manually. +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The storage file \u0027jithub.xml\u0027 is located in the project root folder."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// tag::suggestions[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Getting Smart Suggestions"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Receive smart suggestions while typing in your commands. Press the `TAB` key while typing a command halfway to get"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "suggestions on possible commands without having to navigate to the help window. If only one command is available,"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "pressing `TAB` will auto-complete the command for you without the need to type it in manually."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "This is particularly helpful when you are new to the commands and require time to get used to it. Pressing `TAB` would"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "show all helpful and useful information needed, and this would definitely benefit you as the learning curve to using our"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "application would not be steep."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* While typing `his` to get `history` command, press `TAB`. The `history` command will automatically be filled in for"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "you as it is the only suggestion available. The command parameters would then be shown as a prompt to help you with your"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "input."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* While typing `e`, press `TAB`. The system will suggest to you all possible commands that start with `e`, which would"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "be `exportall`, `export`, `exit`, and `edit`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Getting Wrong Command Suggestions"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Should you type in a wrong command, fear not, as our system will automatically suggest to you what you have typed wrongly,"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "by giving you a closest approximation of word through the message box after you press enter."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "The input is not case sensitive when looking for suggestions, hence it would increase the chance of getting a closer approximation of your"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "desired command!"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "This is particularly useful when you are typing very quickly, as sometimes you might make minor mistakes which can be"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "easily correctable from our application."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* If you wanted to type `select` but you typed `salect` instead, the system will tell you that it is an invalid command,"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "and would suggest to you the command `select` instead."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// end::suggestions[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d\u003d Monthly Calendar View"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Once you start running the application and select a person from the person list panel, the calendar of the current month will be displayed on the calendar panel."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "The following diagram shows how the calendar looks like for November 2018."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "image::CalendarView.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "// tag::calendarViewSchedule[]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Calendar to view schedule [Coming in V2.0]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "When selecting a person, the scheduled events are to be displayed on the calendar panel."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Command type: `select INDEX`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "When matching schedules, the common time slots found are to be displayed on the calendar panel."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Command type: `matchSchedule d/SELECTED-DATE st/START-TIME et/END-TIME i/INDEX-OF-PERSON...[INDEX]`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "// end::calendarViewSchedule[]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d\u003d Encryption [Coming in V2.0]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "When exporting contacts for the purpose of information transfer to another computer, encryption can be enabled before"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "the export command to prevent data misuse."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Command type: `encrypt for export`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "data of your previous JitHub folder."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*Q*: How do I export my contacts to my phone? +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*A*: Use the `exportall` command to generate a csv file and transfer that file to your phone. Use your phone contacts"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "app to import that file."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *Export* : `export FILENAME.xml`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *Import* : `import FILENAME.xml`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *ExportAll* : `exportall FILETYPE` +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "e.g. `exportall csv`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *Mail* : `mail [i/INDEX]` (to be added)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* *Todo* : `todo tt/TITLE c/CONTENT`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* *Reminder* : `reminder tt/TITLE d/DATE(DDMMYYYY) st/START_TIME ag/AGENDA`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* *FinishTodo* : `finishTodo INDEX`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Schedule* : `schedule INDEX-OF-PERSON d/DATE(DDMMYYYY) st/START-TIME et/END_TIME en/EVENT-NAME`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Clear Schedule* : `clearSchedule IndexOfPerson`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Match Schedule* : `matchSchedule d/SELECTED-DATE st/START-TIME et/END-TIME i/INDEX-OF-PERSON...[INDEX]`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Mail* : `mail [i/INDEX]`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "elstonayx": 49,
      "linnnruoo": 48,
      "driedmelon": 51,
      "jitwei98": 158,
      "-": 240,
      "junweiljw": 37
    }
  },
  {
    "path": "docs/team/driedmelon.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d Chun Hong Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "image::driedmelon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "{empty}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d PROJECT: \u0027JitHub\u0027 - A Student Meeting Planner:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "image::logo.png[width\u003d\"150\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Roles: Team Lead"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d\u003d Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "`JitHub` is a desktop meeting planning application targeted at tertiary students. Besides enabling you to view common"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "meeting time slots in teams, it includes various meeting tools such as the taking of minutes and a list of todo tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "This is done with a Command Line Interface(CLI), and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " `JitHub` is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "JitHub is developed in my team of five throughout the course of a semester as part of module requirements in the School"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "of Computing, National University of Singapore."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "Modules with JitHub as requirements:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* CS2101 - Effective Communication for Computing Professionals"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* CS2113T - Software Engineering \u0026 Object Oriented Programming"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Major enhancement*: Added *the ability to view common time slots of selected persons.*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** What it does: It allows you to view the available meeting time slots based on the scheduled events of all team members"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Justification: For tertiary students like us, we identified that it is difficult to plan for group project"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " meetings. Therefore, based on the needs of a tertiary student, it is great to simplify the tedious manual task of finding common"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " time slots with a feature. This feature is thus a core of the product as it enables you to arrange for group meetings without"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "manually checking each team member\u0027s calendar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Highlights: To ensure that the schedule feature to view common time slots is easy to use, it required an in depth analysis of"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " design alternatives. Furthermore, it implements a stringent check on date and time fields to prevent mishandling of entered information."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " To have a balance between capability and cost, a 1 day selection period is also implemented to prevent the program from taking too long to respond."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " This enhancement affects GUI to be added in future, should the common time slots be displayed in a non-text format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "such as by using a calendar display visual."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Credits: Mr Akshay Narayan, Team Members, Seniors"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//_{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Minor enhancement*: Added a Welcome Message on the calendar panel which allows people to search for photographs of an added person."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Justification: Users needed a prompt when we conducted user tests on week 11 of the semester."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Code contributed*: [https://github.com/driedmelon/main/commits?author\u003ddriedmelon[Code Dashboard]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "[https://github.com/driedmelo/main/commits?author\u003ddriedmelon[Test code]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*** Ensured that project meetings were carried out every Monday morning for the setting of direction and the purpose of updating each other."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*** Enhancements to existing features:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "**** Increased code coverage from 80% to 83% (Pull requests https://github.com/CS2113-AY1819S1-W12-1/main/pull/201[#201])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "*** Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "**** PRs reviewed (with non-trivial review comments): https://github.com[#45], https://github.com[#50], https://github.com[#62]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "**** Reported bugs and suggestions for other teams in the class (Issue https://github.com/CS2113-AY1819S1-T13-2/main/issues/127[#127]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "https://github.com/CS2113-AY1819S1-T13-2/main/issues/130[#130]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "https://github.com/CS2113-AY1819S1-T13-2/main/issues/144[#144]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "https://github.com/CS2113-AY1819S1-T13-2/main/issues/140[#140]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "https://github.com/CS2113-AY1819S1-T13-2/main/issues/139[#139]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "https://github.com/CS2113-AY1819S1-T13-2/main/issues/126[#126]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendarViewSchedule]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddisplayScheduleOnCalendar]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003d\u003d PROJECT: UTC2101-Time-and-Life-Chatbot"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "---"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "A chatbot is created for the purposes of demonstrating the different concepts of time in our daily lives as part of the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "module project of UTC2101."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "https://github.com/driedmelon/UTC2101-Time-and-Life-Chatbot[Time and Life Chatbot]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "driedmelon": 105
    }
  },
  {
    "path": "docs/team/elstonayx.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d Elston Aw - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d PROJECT: JitHub - Schedule Management System"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "This portfolio is written to document the software engineering process of CS2113T. +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "For this software engineering project, I am a developer and code quality control expert, and my responsibilities are to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "write improvements for the software, and to ensure that the codes are of an excellent standard before allowing major"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "releases of the software."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Our team, CS2113T-W12-1, consists of 5 students, Bao Lin Ruo, Chun Hong Wei, Elston Aw, Lim Jit Wei and Low Jun Wei."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "We are a team based in the School of Computing, National University of Singapore."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d Project Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "JitHub is an application that saves your contacts and helps you schedule meetings through cross-checking the timetable of your group mates."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "It is a CLI (Command Line Interface) application with GUI output so that you can have best of the both worlds."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "JitHub is a Java application that you can run on any machine with Java Runtime Environment installed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* *Major enhancement*: added *the ability to suggest smart suggestions and corrections while typing*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** What it does: It gives the users smart suggestions when the users press `TAB`, to suggest them of the full command name and its relevant syntax."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Justification:  a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "// saves time and helps making it convenient etc"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Highlights: write technical skills i acquired like new algorithm etc"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "*** [https://www.geeksforgeeks.org/trie-insert-and-search/[GeeksforGeeks]] for their explanation on Trie data structure which was heavily used to implement this feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* *Minor enhancement*: Added a wrong command suggestion when the user types in a wrong command and presses enter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** What it does: When a wrong command is being typed and the `ENTER` key is pressed, the system would find a most"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "similar command available in the AddressBook."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Justification: This helps the user understand what went wrong and what command could have been typed instead."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "** Credits:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "*** [https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/string/levenshtein-distance[trekhleb/javascript-algorithms]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    for their explanation on Levenshtein distance (edit distance)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "Through this project, I have learnt good Software Engineering practices, teamwork skills through programming, and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "proper documentation for projects."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003delstonayx[Code]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsuggestions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsuggestion]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duseCaseSuggestions]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestCaseSuggestions]"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 66
    }
  },
  {
    "path": "docs/team/jitwei98.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d Lim Jit Wei - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ":imagesDir: ../images/jitwei98.png"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//image::../jitwei98.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d PROJECT: https://github.com/CS2113-AY1819S1-W12-1/main[JitHub]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::../Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "This portfolio documents my contribution to this group project for the module https://nusmods.com/modules/CS2113T/software-engineering-object-oriented-programming[*CS2113T Software Engineering \u0026 Object-Oriented Programming*]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " taught in the National University of Singapore and showcases my ability to *contribute production quality software engineering work to a small/medium software project*, and the ability to *work in a team of 5*."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "We are required to enhance https://github.com/se-edu/addressbook-level4[a Java sample AddressBook application] with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "6kLoc(lines of code) while following software engineering principles taught in the module."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Product Overview"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Our end product, *JitHub*, is a https://en.wikipedia.org/wiki/Command-line_interface[CLI (Command Line Interface)] desktop application that *helps students manage group project meetings* through cross-checking the timetables of their group mates."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*JitHub* can:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Suggest available timeslot for group project meetings"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Import/Export contacts details between group members"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Keep track of your todos"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Suggest/Autocomplete your commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *Major enhancement*: added the ability to *import/export contacts details of different project groups*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** What it does: allows students to share contact details specific to different projects among his/her group members."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Justification: This feature improves the product significantly because only one member from the group is required to key in all the details, in contrast to requiring everyone in the team to type in the exact same details, which is tedious and inefficient."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis of design alternatives regarding reading and writing data. The implementation too was challenging as it required thorough understanding of all the components related to data storage in the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Credits: http://opencsv.sourceforge.net/[OpenCSV]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// Excluded for 2113T"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//* *Minor enhancement*: added an UI enhancement that *displays the total number of persons* in the application and the ability for the application to *backup the storage file* locally."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003djitwei98[Functional code]] -"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " about 2K LoC(Lines of Code) including tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Managed milestones `v1.1` - `v1.4` (4 milestones) on GitHub"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Updated the GUI to reflect persons and todos (Pull requests https://github.com[#117])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 77% to 80% (Pull requests https://github.com[#200])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-W12-1/main/pull/4[#4], https://github.com/CS2113-AY1819S1-W12-1/main/pull/27[#27], https://github.com/CS2113-AY1819S1-W12-1/main/pull/29[#29], https://github.com/CS2113-AY1819S1-W12-1/main/pull/73[#73]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2113-AY1819S1-W13-2/main[1], https://github.com/CS2113-AY1819S1-W12-4/main[2], https://github.com/CS2113-AY1819S1-T12-3/main[3])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Integrated a third party library (OpenCSV) to the project (https://github.com/CS2113-AY1819S1-W12-1/main/pull/62[#62])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*** Integrated Github plugins (TravisCI and Coveralls) to the team repo"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|Given below are sections I contributed to the User Guide."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " _They showcase my ability to **write documentation targeting end-users.**_"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexport]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexportall]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|Given below are sections I contributed to the Developer Guide."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "_They showcase my ability to **write technical documentation and the technical depth of my contributions to the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "project.**_"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::export[]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[Design-Export]]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Export component"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".Structure of the Export Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::../ExportClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/export/Export.java[`Export.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The `Export` component can save the filtered persons to the specified file in xml format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::export[]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[Design-Import]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d Import component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ".Structure of the Import Component"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::../ImportClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/export/Import.java[`Import.java`]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The `Import` component can read the Address Book data from the specified file in xml format."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The import component (Import.java and ImportManager.java) is packaged under the export package."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// tag::exportall[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[[exportall]]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d ExportAll feature"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The exportall mechanism is facilitated by `CsvWriter`. Internally, a CSVWriter object from the http://opencsv.sourceforge.net/[OpenCSV]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "library is instantiated to write all persons to the default file path `/data/jithub.csv`. Currently, it implements"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " the following operation(s):"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* `CsvWriter#write()` -- Writes the name, phone, address, and email of all persons in the current address book to"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "`/data/jithub.csv`, and overwrites the file if an older version is available."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "This operation is exposed in the `Model` interface as `Model#exportAddressBook()`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Given below is an example usage scenario and how the exportall mechanism behaves at each step."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 1. The user calls the exportall command with `exportall csv`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 2. The LogicManager calls parseCommand with the user input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 3. The AddressBookParser is called and it returns a ExportAllCommand object to LogicManager."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 4. The LogicManager calls execute() on the ExportAllCommand object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 5. The Logic component then interacts with the Model component by calling `exportAddressBook()` of the Model"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "interface."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 6. The Model interface creates a new CsvWriter object and invokes the method `write()`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 7. The CsvWriter writes the data to the defined file path."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The file path is defined in `outputFilepath`, and is hardcoded as `/data/jithub.csv` for now."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Any existing file named as `jithub.csv` at the defined path will be overwritten."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "The following sequence diagram shows how the ExportAll operation works:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "image::../ExportAllSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// The following activity diagram summarizes what happens when `CsvWriter#write()` is called:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: show the if condition for file exists and not exists"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: implementation details of write()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of CsvWriter#write()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Given below is the algorithm behind the write() method used in the `ExportAll` Command:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 1. Instantiate an OpenCSV writer."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 2. Write the header to the csv file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 3. Declare a `List\u003cString[]\u003e data`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 4. Loop through an"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "https://docs.oracle.com/javase/8/javafx/api/javafx/collections/ObservableList.html[`ObservableList\u003cPerson\u003e`]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "containing all persons in the AddressBook and push `String[] personDetails` to `data`."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // Generates a string array for each person and stores the details"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    String[] personDetails \u003d new String[header.length];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_NAME] \u003d person.getName().toString();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_PHONE] \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_ADDRESS] \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    personDetails[INDEX_PERSON_EMAIL] \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 5. Write `data` to the csv file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "Step 6. Close the OpenCSV writer."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How data in the AddressBook is passed into the CsvWriter object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* **Alternative 1 (current choice):** `ObservableList\u003cPerson\u003e`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Pros: Easy to implement since `getFilteredPersonList()` is already implemented."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* **Alternative 2:** `versionedAddressBook`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Pros: Looks more direct since the whole AddressBook is passed into the `CsvWriter`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "** Cons: Hard to write tests and requires more methods to process the data."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "* **Solution**: The data is passed into the `CsvWriter` object through its constructor as an `ObservableList\u003cPerson\u003e`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// end::exportall[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|Priority |As a/an ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |student who does not like to do unnecessary work |import the contact details my group members saved before"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|avoid unnecessary typing"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|`* * *` |student who likes to save the trouble of my group mates |export the contact details of my other group members"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "that I have saved |share it to my group members for them to import to their JitHub"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexportusecase]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualtesting]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtestimportexport]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//TODO: end edit"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: include links"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "\u003d\u003d PROJECT: AnimatedEpp"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "// TODO: include descriptions here"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "---"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jitwei98": 233
    }
  },
  {
    "path": "docs/team/junweiljw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d Low Jun Wei - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d About me"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "I am a team member of the JitHub developer team, in-charge of managing the documentations and implementing the Reminder feature (Major enhancement). I also attempted to work on natural language processing and Remark command (Minor enhancement)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d PROJECT: JitHub - Schedule Management Software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "image::Ui.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "JitHub is an addressbook application that allows you to quickly navigate the GUI with efficient CLI (Command Line Interface) commands. JitHub also allows you to input your timetables and compare them with yours peers on the Calendar GUI, for easier scheduling of meetings. Coded in Java, JitHub has excellent portability and can be run on any device installed with Java RunTime Environment."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* *Major enhancement*: Added a *Reminder Command*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** What it does: The *Reminder* feature automatically *stores and displays an upcoming meeting\u0027s details* on the GUI. Multiple reminders can be set for different meetings, and can be viewed in a scrolling panel at the side of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Justification: The Reminder feature complements the user experience of JitHub significantly. By displaying meeting details on the GUI, it reduces the risk of users forgetting about their meetings, especially if their schedules are packed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Highlights: This enhancement affects existing commands and taught me how to manage multiple classes that constitute a command, as well as how to enable my command to interact with the UI component. The greatest challenge"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003djunweiljw\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-02\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Reposense]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Project Management: I was in-charge of documentation and managed releases V1.1 to V1.4 on GitHub with the rest of my team"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** *Feature*: I attempted to add *natural language processing to the Command Line Interface* as my initial Major Enhancement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "*** *What it does*: The *Natural Language Processing* allows users to input their commands in any order and it will still be recognised by the parser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "*** *What went wrong*: I could not fix the many edge cases that caused my tests to fail, and also I realised that `ArgMultiMap` was already doing a large part of what I attempted and hence decided to change my feature at Milestone V1.3."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "*** *Highlights*: I\u0027ve learnt about how to account for multiple edge cases and work my code around them so as to make it more universal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "*** *Code contributed*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "**** V1.1 [https://github.com/CS2113-AY1819S1-W12-1/main/pull/121/files[Non-functional code]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "**** V1.2 [https://github.com/CS2113-AY1819S1-W12-1/main/pull/126/files[Non-functional code]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "*** Updated the GUI for Reminder and Meeting Minutes [https://github.com/CS2113-AY1819S1-W12-1/main/pull/193[#193]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "*** Wrote additional tests for existing features [https://github.com/CS2113-AY1819S1-W12-1/main/pull/193[#193]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreminder]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreminder]"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 57
    }
  },
  {
    "path": "docs/team/linnnruoo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d Bao Lin Ruo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Role: Developer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Code contribution and add extra features on existing addressbook level 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Responsibility: Integration and Testing"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "Overlook version control of the project and ensure that individual software modules are combined and tested as a group."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "---"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d PROJECT: JitHub"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "JitHub is a desktop personal assistant application that allows students to manage their contacts, schedule and to-do tasks. The user interacts with it using a CLI, and it has a GUI created with JavaFX. Hence it is catered to both the users who are wither comfortable with command line interface or graphical interface. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "JitHub is developed throughout the summer in a team of 5 members as our first step into software engineering in the School of Computing, National University of Singapore."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* *Major enhancement*: added *the ability to create a to-do task* and *the ability to complete a to-do task*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** What it does: allows the user to create to-do tasks and complete the to-do tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Justification: This feature improves the usability of the product significantly because a user can create a to-do task to remind them the to-dos of the day. As our target users, students, may be caught up with many meetings and forget the trivial tasks they have to accomplish by the end of the day."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Highlights: This enhancement does not affect the existing commands and commands to be added in future. These features aim to help students to better manage their daily schedules."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Credits: Ms Anita, Mr Akshay, all the team members, various seniors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* *Minor enhancement*: added a calendar view so that users can view their calendar at the current month, enhancing the overall user interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* *Sample Code contributed*: [https://github.com/CS2113-AY1819S1-W12-1/main/blob/master/src/main/java/seedu/address/logic/commands/TodoCommand.java[Functional code]] [https://github.com/CS2113-AY1819S1-W12-1/main/blob/master/src/test/java/seedu/address/logic/commands/TodoCommandTest.java[Test code]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Managed release `v1.3`, `1.3.4` (2 release) on GitHub"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Updated the GUI theme (Pull requests https://github.com/CS2113-AY1819S1-W12-1/main/pull/50/[#50], https://github.com/CS2113-AY1819S1-W12-1/main/pull/115/[#115])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Wrote both additional tests and new tests for existing features to increase coverage from 82.51% to 90.16% (Pull request https://github.com/CS2113-AY1819S1-W12-1/main/pull/119/[#119])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2113-AY1819S1-W12-1/main/pull/118/[#118]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/CS2113-AY1819S1-W12-1/main/pull/130/[#130]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2113-AY1819S1-W12-1/main/pull/121/[#121], https://github.com/CS2113-AY1819S1-W12-1/main/pull/120[#120], https://github.com/CS2113-AY1819S1-W12-1/main/pull/95/[#95]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2113-AY1819S1-W12-1/main/pull/92/[92], https://github.com/CS2113-AY1819S1-W12-1/main/issues/171/[#171])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "*** Integrate a calendar view to the project (https://github.com/CS2113-AY1819S1-W12-1/main/pull/189/[189])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Problems Encountered"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* For the calendar view, I wanted to implement it using CalendarFx package. However, JitHub is built upon packages mostly in Java 9 while CalendarFx has releases on Java 8, 10 and 11. I tried to build JitHub with these CalendarFx versions but to no avail. Its version 8 is not compatible with the project folder as there is no CSS loader. Its version 10 works perfectly and passes all the tests locally but the current Travis runs on Java 9 (open jdk 9) and thus CalendarFx has failed the test to start the tests on headless mode in Travis. For version 10, I upgraded Travis to run on Java 10 (oracle jdk 10), but again Travis failed to allocate JavaFx which runs on Java 9. The problems can be found on this issue https://github.com/CS2113-AY1819S1-W12-1/main/issues/77/[#77]. Eventually, the problem is solved by \u0027hardcoding\u0027 the calendar using JavaFx in this pr https://github.com/CS2113-AY1819S1-W12-1/main/pull/189/[189]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "* Some teammembers use Mac and the rest use Windows for coding. It had resulted in the failures in comparison tests on Windows because System.lineSeparator() detects CRLF instead LF on Windows, while the actual output gives LF. Thus it is solved by changing System.lineSeparator() to \"\\n\" for new line character in issue https://github.com/CS2113-AY1819S1-W12-1/main/issues/92/[92]."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtodo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfinishTodo]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtodo]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfinishTodo]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d PROJECT: EE2026 FPGA Design Project"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "A project done by my partner Adrian Tan and me on the Basys 3 FPGA board. We implemented a real-time audio system, paino instrumet, 7-segment display and a mini pong game with the board. Check out more at https://github.com/linnnruoo/EE2026-FPGA-Project[EE2026 FPGA Project]."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d PROJECT: MeowBook"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "This is a mini PWA project, done by my teammates Adrian Tan, Andrew Tan and me, which only allows users to upload photos of cats. Werid error messages will pop up if the user tries to submit a non-cat photo. Check out the app at https://hack-meowbook.firebaseapp.com/[MeowBook]. It is better on mobile."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003d\u003d PROJECT: Wripple"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "This is a PWA project done by my partner Kevin Chan and me. It is an online platform that allows students to post their project ideas and collaborate in the projects they would like to start on. Other students with the relevant skills can request to join too. Check out the webapp at https://wripple.herokuapp.com[wripple]."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        logger.info(\"Starting JitHub \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 1,
      "driedmelon": 1,
      "-": 206
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private String appTitle \u003d \"JitHub\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_INVALID_TODO_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \"The index of the to-do task entered is invalid! Please try again.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return \"number of persons \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                + data.getPersonList().size()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                + \", number of your todo tasks \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + data.getTodoList().size()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + \", number of your reminders \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + data.getReminderList().size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 3,
      "-": 18,
      "junweiljw": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String XML_FILE_EXTENSION \u003d \".xml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    //@@author jitwei98"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns true if {@code filename} is a valid filename for xml files,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param filename A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static boolean isValidXmlFilename(String filename) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (filename.length() \u003c\u003d XML_FILE_EXTENSION.length()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Compares the filename extension with the expected xml file extension"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        int indexOfExtension \u003d filename.length() - XML_FILE_EXTENSION.length();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String fileExtension \u003d filename.substring(indexOfExtension);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String lowercaseFileExtension \u003d fileExtension.toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return lowercaseFileExtension.equals(XML_FILE_EXTENSION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 69,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/export/CsvWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * The writer for CSV file of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class CsvWriter {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final int INDEX_PERSON_NAME \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final int INDEX_PERSON_PHONE \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final int INDEX_PERSON_ADDRESS \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final int INDEX_PERSON_EMAIL \u003d 3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final String[] header \u003d { \"Name\", \"Phone\", \"Address\", \"Email\" };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final ObservableList\u003cPerson\u003e listOfPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final Path outputFilepath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public CsvWriter(Person person, Path outputFilepath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireAllNonNull(person, outputFilepath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!FileUtil.isFileExists(outputFilepath)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                FileUtil.createFile(outputFilepath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                logger.severe(\"Error creating output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.fine(\"Initializing with output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.listOfPersons \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // TODO: Customize outputFilepath based on person name exported"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.outputFilepath \u003d outputFilepath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public CsvWriter(ObservableList\u003cPerson\u003e persons, Path outputFilepath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // TODO: Refactor this to a exportFileWriter interface"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!FileUtil.isFileExists(outputFilepath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                FileUtil.createFile(outputFilepath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                logger.severe(\"Error creating output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.fine(\"Initializing with output file: \" + outputFilepath.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.listOfPersons \u003d persons;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.person \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.outputFilepath \u003d outputFilepath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Writes to the .csv file as defined in {@code outputFilepath}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void write() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            File file \u003d new File(String.valueOf(outputFilepath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            FileWriter outputFile \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            CSVWriter writer \u003d new CSVWriter(outputFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            writer.writeNext(header);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            if (listOfPersons !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                writeMultiplePersons(writer);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            } else if (person !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                writeSinglePerson(writer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Writes the {@code listOfPersons} to the csv file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private void writeMultiplePersons(CSVWriter writer) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        List\u003cString[]\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        listOfPersons.forEach(person -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            String[] personDetails \u003d convertToStringArray(person);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            data.add(personDetails);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        writer.writeAll(data);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Writes the {@code person} to the csv file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private void writeSinglePerson(CSVWriter writer) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String[] personDetails \u003d convertToStringArray(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        writer.writeNext(personDetails);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // TODO: Implement a writeToCsv() with a specific filepath."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns a string array that contains the details of a {@code person}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param person {@code Person} to be saved to the string array."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @return A string array containing the name, phone, address, and email of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     *          the {@code person}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private String[] convertToStringArray(Person person) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String[] personDetails \u003d new String[header.length];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        personDetails[INDEX_PERSON_NAME] \u003d person.getName().toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        personDetails[INDEX_PERSON_PHONE] \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        personDetails[INDEX_PERSON_ADDRESS] \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        personDetails[INDEX_PERSON_EMAIL] \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return personDetails;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Path getOutputFilepath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return outputFilepath;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/export/Export.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * The API of the Export component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public interface Export {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Saves the filteredPersons to the storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws IllegalValueException if the current addressbook is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void saveFilteredPersons() throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @see #saveFilteredPersons()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void saveFilteredPersons(ObservableList\u003cPerson\u003e filteredPersons, Path filePath)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/export/ExportManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Manages exporting of AddressBook data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportManager implements Export {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_NOTHING_TO_EXPORT \u003d \"There is nothing to export!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(seedu.address.export.ExportManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ObservableList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path exportPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExportManager(ObservableList\u003cPerson\u003e filteredPersons, Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.filteredPersons \u003d filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.exportPath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Path getExportFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return exportPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // TODO: add header in the interface header, refer to XmlAddressBookStorage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Saves the {@code filteredPersons} to the {@code exportPath}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws IllegalValueException if the current addressbook is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void saveFilteredPersons() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        saveFilteredPersons(filteredPersons, exportPath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Similar to {@link #saveFilteredPersons()}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param filteredPersons cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param filePath file path of the data. Cannot be null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void saveFilteredPersons(ObservableList\u003cPerson\u003e filteredPersons, Path filePath)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filteredPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (filteredPersons.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.warning(\"There is nothing to export!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NOTHING_TO_EXPORT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (FileUtil.isFileExists(filePath)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.fine(\"File exists. Overwriting output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.fine(\"Initializing output file: \" + filePath.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(filteredPersons));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/export/Import.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * The API of the Import component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public interface Import {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns the addressBook from the xml file specified."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws FileNotFoundException if the file does not exist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, FileNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/export/ImportManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Manages importing of AddressBook data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ImportManager implements Import {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ImportManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path importPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ImportManager(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.importPath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Path getImportPath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return importPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return readAddressBook(importPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of todo tasks */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    ObservableList\u003cTodo\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of reminders */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 3,
      "-": 27,
      "junweiljw": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return model.getFilteredTodoList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return model.getFilteredReminderList(); }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 5,
      "-": 52,
      "junweiljw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_PARAMETERS + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 6,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Clears the schedule of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ClearScheduleCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearSchedule\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"cs\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer) \\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the schedule of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + \"by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_CLEAR_SCHEDULE_SUCCESS \u003d \"Schedule cleared\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @param index of the person in the filtered person list to clear schedule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ClearScheduleCommand(Index index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Person personToClearSchedule \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Person scheduledPerson \u003d clearedSchedule(personToClearSchedule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        model.updatePerson(personToClearSchedule, scheduledPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_SCHEDULE_SUCCESS, index.getOneBased()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static Person clearedSchedule(Person personToClearSchedule) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assert personToClearSchedule !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Name updatedName \u003d personToClearSchedule.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Phone updatedPhone \u003d personToClearSchedule.getPhone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Email updatedEmail \u003d personToClearSchedule.getEmail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Address updatedAddress \u003d personToClearSchedule.getAddress();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToClearSchedule.getTags();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cSchedule\u003e updatedSchedule \u003d new HashSet\u003c\u003e(); //clears schedule"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedSchedule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || (other instanceof ClearScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 index.equals(((ClearScheduleCommand) other).index)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 6,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cSchedule\u003e updatedSchedule \u003d personToEdit.getSchedules(); //does not allow edit of schedule"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedSchedule);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 12,
      "driedmelon": 3,
      "-": 221
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Exports all persons in the address book to a csv/vcf file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportAllCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exportall\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILETYPE (must be either \\\"csv\\\" or \\\"vcf\\\")\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports all the persons in the address book.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Filetype: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exported all contacts.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Export failed!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Filetype filetype;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExportAllCommand(Filetype filetype) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.filetype \u003d filetype;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            model.exportAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!(other instanceof ExportAllCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportAllCommand e \u003d (ExportAllCommand) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return filetype.equals(e.filetype);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Exports the listed persons in the address book to a xml file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILENAME (must end with .xml)\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" export.xml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export the persons listed \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + \"in the address book.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Exported persons listed to %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Export failed!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_FAILURE_EMPTY_AB \u003d \"There is nothing to export!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExportCommand(Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            model.exportFilteredAddressBook(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_EMPTY_AB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommand e \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommandOld.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Exports the selected person in the address book to a csv/vcf file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportCommandOld extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export the selected person in the address book\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + \"\\nParameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + \"\\nParameters: FILETYPE (must be either \\\"csv\\\" or \\\"vcf\\\") \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 1 csv \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_EXPORT_PERSON_SUCCESS \u003d \"Exported Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Export failed!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final Filetype filetype;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExportCommandOld(Index index, Filetype filetype) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.filetype \u003d filetype;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Person personToExport \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            model.exportPerson(personToExport);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_PERSON_SUCCESS, personToExport));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!(other instanceof ExportCommandOld)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommandOld e \u003d (ExportCommandOld) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return targetIndex.equals(e.targetIndex) \u0026\u0026 filetype.equals(e.filetype);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 6,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FinishTodoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Complete a todo task identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class FinishTodoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"finishTodo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ftd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        + \": Complete the to-do task identified by the index number used in the displayed to-do task list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_FINISH_TODO_SUCCESS \u003d \"The selected to-do task is completed: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public FinishTodoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        List\u003cTodo\u003e lastShownList \u003d model.getFilteredTodoList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo todoToFinish \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        model.finishTodo(todoToFinish);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FINISH_TODO_SUCCESS, todoToFinish));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                || (other instanceof FinishTodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((FinishTodoCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hs\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Import the persons and todos to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: FILENAME (must end with .xml)\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" import.xml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Import the persons in the file specified to the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            + \"address book.\\n\" + COMMAND_PARAMETERS + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"Imported %1$s persons.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"Import failed! Error: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_INVALID_LIST_SIZE \u003d \"Invalid list size.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ImportCommand(Path filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook readOnlyAddressBook \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ObservableList\u003cPerson\u003e personList \u003d readOnlyAddressBook.getPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        int initialNumberOfPersons \u003d personList.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!isFileExists(filePath)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // TODO: Write better Exception messages"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            model.importPersonsFromAddressBook(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, ioe));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, dce));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        int finalNumberOfPersons \u003d personList.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        int personsImported \u003d calculateImportedEntries(initialNumberOfPersons, finalNumberOfPersons);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_IMPORT_SUCCESS, personsImported));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns the number of entries imported to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static int calculateImportedEntries(int initialListSize, int finalListSize) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(initialListSize);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(finalListSize);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        int importedEntries \u003d finalListSize - initialListSize;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!isValidSize(importedEntries)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            // TODO: Write better Exception message"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, MESSAGE_INVALID_LIST_SIZE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return importedEntries;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static boolean isValidSize(int size) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return size \u003e\u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!(other instanceof ImportCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // checks state"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ImportCommand e \u003d (ImportCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return filePath.equals(e.filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ls\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MatchScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//@Author: driedmelon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Checks the unavailable timeslots of the selected persons and prints out the common available times."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class MatchScheduleCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"matchSchedule\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ms\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE(DDMMYYYY) ] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"TIME(24HRS) ] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"TIME(24HRS) ] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + \"[\" + PREFIX_INDEX + \"INDEX ] ...\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_DATE + \"08112018 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_START_TIME + \"0800 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_END_TIME + \"1700 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_INDEX + \"2 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_INDEX + \"3 \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds available slots for persons selected \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Common time slots found!\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No common time slots Found!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private List\u003cSchedule\u003e matchScheduleCompare;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private List\u003cTime\u003e startTimeList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private List\u003cTime\u003e endTimeList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private int[] startEndTimeBlock;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private List\u003cString\u003e availableSlots;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private String slots;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final List\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final TheDate date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public MatchScheduleCommand(TheDate date, Time startTime, Time endTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                                List\u003cIndex\u003e matchScheduleList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireAllNonNull(date, startTime, endTime, matchScheduleList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.index \u003d matchScheduleList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.matchScheduleCompare \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (Index indexIter : this.index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            if (indexIter.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.startTimeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.endTimeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.startEndTimeBlock \u003d new int[1440];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //to bring up schedules"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (Index indexIter : this.index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            Person personToMatchSchedule \u003d lastShownList.get(indexIter.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            Set\u003cSchedule\u003e temp \u003d personToMatchSchedule.getSchedules();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            matchScheduleCompare.addAll(temp);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //to store start and end time as Time type"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (Schedule matchScheduleIter : this.matchScheduleCompare) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            if (matchScheduleIter.getDate().equals(this.date)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                this.startTimeList.add(matchScheduleIter.getStartTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                this.endTimeList.add(matchScheduleIter.getEndTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //to store busy time slots in array and sets available slots"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (int i \u003d 0; i \u003c this.startTimeList.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            for (int j \u003d this.startTimeList.get(i).timeToMinutesInDay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                 j \u003c\u003d this.endTimeList.get(i).timeToMinutesInDay(); j++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                this.startEndTimeBlock[j] \u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int inValidRange \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int validRangePresent \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.availableSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (int i \u003d this.startTime.timeToMinutesInDay(); i \u003c\u003d this.endTime.timeToMinutesInDay(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            if (startEndTimeBlock[i] \u003d\u003d 0 \u0026\u0026 inValidRange \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                String paddedHrs \u003d String.format(\"%02d\", i / 60);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                String paddedMins \u003d String.format(\"%02d\", i % 60);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                String toHrsStart \u003d paddedHrs + paddedMins;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                this.availableSlots.add(toHrsStart);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                inValidRange \u003d 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                validRangePresent \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            if (((startEndTimeBlock[i] \u003d\u003d 1) || (this.endTime.timeToMinutesInDay() \u003d\u003d i))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                    \u0026\u0026 inValidRange \u003d\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                String paddedHrs \u003d String.format(\"%02d\", i / 60);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                String paddedMins \u003d String.format(\"%02d\", i % 60);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                String toHrsEnd \u003d paddedHrs + paddedMins;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                this.availableSlots.add(toHrsEnd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                inValidRange \u003d 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        slots \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //format string slots to print"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (int i \u003d 0; i \u003c this.availableSlots.size(); i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                slots \u003d slots + (\"Start:\" + this.availableSlots.get(i) + \" \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                slots \u003d slots + (\"End:\" + this.availableSlots.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (validRangePresent \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + slots);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || (other instanceof MatchScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 index.equals(((MatchScheduleCommand) other).index)); // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"y\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReminderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Adds reminder for next meeting"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_DATE + \"DATE(DDMMYYYY) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_START_TIME + \"TIME(24HRS) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_AGENDA + \"AGENDA \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_TITLE + \"CS2113T Meeting \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_DATE + \"08122018 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_START_TIME + \"1300 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + PREFIX_AGENDA + \"Discuss Product Demo \\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a meeting reminder on the sidebar. \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This reminder already exists!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_SAME_TIME \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \"A reminder has already been scheduled for a meeting at this timing!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Creates a ReminderCommand to add the specified {@code Reminder}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderCommand(Reminder reminderMeeting) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(reminderMeeting);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminder \u003d reminderMeeting;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (model.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        model.addReminder(reminder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reminder));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 reminder.equals(((ReminderCommand) other).reminder));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//@@Author: driedmelon"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Adds the schedule of a person to the address book"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sc\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_DATE + \"DATE(DDMMYYYY) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_START_TIME + \"TIME(24HRS) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_END_TIME + \"TIME(24HRS) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            + PREFIX_EVENT_NAME + \"EVENT NAME \\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_DATE + \"08112018 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_START_TIME + \"1000 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_END_TIME + \"1200 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            + PREFIX_EVENT_NAME + \"GER1000 Class \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a schedule to a person. \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Schedule Added!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"Event already exists in person\u0027s schedule\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Schedule toSchedule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleCommand(Schedule schedule, Index index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.toSchedule \u003d schedule;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Person personToAddSchedule \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Person scheduledPerson \u003d addScheduleToPerson(personToAddSchedule, this.toSchedule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        model.updatePerson(personToAddSchedule, scheduledPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, scheduledPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static Person addScheduleToPerson(Person personToAddSchedule, Schedule schedule) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assert personToAddSchedule !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Name updatedName \u003d personToAddSchedule.getName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Phone updatedPhone \u003d personToAddSchedule.getPhone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Email updatedEmail \u003d personToAddSchedule.getEmail();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Address updatedAddress \u003d personToAddSchedule.getAddress();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToAddSchedule.getTags();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cSchedule\u003e oldSchedule \u003d personToAddSchedule.getSchedules();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cSchedule\u003e updatedSchedule \u003d new HashSet\u003c\u003e(oldSchedule);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        updatedSchedule.add(schedule);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedSchedule);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || (other instanceof ScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 index.equals(((ScheduleCommand) other).index)); // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 9,
      "driedmelon": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: INDEX (must be a positive integer)\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TodoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Add todo tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"td\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_PARAMETERS \u003d \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            + PREFIX_TITLE + \"TITLE\" + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String COMMAND_EXAMPLE \u003d \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            + PREFIX_TITLE + \"Do Unit Tests\" + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            + PREFIX_CONTENT + \"write tests to test these shitty codes\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a todo task for JitHub users. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        + COMMAND_PARAMETERS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        + COMMAND_EXAMPLE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New todo task added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This task has already been created in your JitHub\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final Todo todo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Creates a TodoCommand to add the specified {@code Todo}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoCommand(Todo todoTask) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(todoTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todo \u003d todoTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (model.hasTodo(todo)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        model.addTodo(todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, todo));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                || (other instanceof TodoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 todo.equals(((TodoCommand) other).todo));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"z\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cSchedule\u003e schedule \u003d new HashSet\u003c\u003e(); //does not allow to set schedule directly"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, schedule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 4,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.ClearScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.FinishTodoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.MatchScheduleCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        //userInput \u003d new Processor().commandParser(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        case FinishTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        case FinishTodoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return new FinishTodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        case ScheduleCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        case ClearScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        case ClearScheduleCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return new ClearScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        case MatchScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        case MatchScheduleCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return new MatchScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        case ExportAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return new ExportAllCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        case TodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return new TodoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        case ReminderCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return new ReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            List\u003cString\u003e listOfCommands \u003d new WrongCommandSuggestion().getSuggestions(commandWord);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (listOfCommands \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \"\\n\" + WrongCommandSuggestion.NO_SUGGESTION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                String suggestionsToString \u003d StringUtils.join(listOfCommands, \", \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \u0027\\n\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                    + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, suggestionsToString));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 23,
      "linnnruoo": 9,
      "driedmelon": 13,
      "jitwei98": 11,
      "-": 91,
      "junweiljw": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.ClearScheduleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Parses input index to clear schedule"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ClearScheduleCommandParser implements Parser\u003cClearScheduleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ClearScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return new ClearScheduleCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final Prefix PREFIX_FILETYPE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"en/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final Prefix PREFIX_AGENDA \u003d new Prefix(\"ag/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 2,
      "driedmelon": 5,
      "jitwei98": 1,
      "-": 14,
      "junweiljw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (args.length() \u003c 10) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                throw new ParseException((MESSAGE_INVALID_PERSON_DISPLAYED_INDEX), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 5,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportAllCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Parses input arguments and creates a new {@code ExportAllCommand} object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportAllCommandParser implements Parser\u003cExportAllCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ExportAllCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * and returns a {@code ExportAllCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExportAllCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Filetype filetype;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            filetype \u003d ParserUtil.parseFiletype(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (Exception pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                    ExportAllCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new ExportAllCommand(filetype);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Parses input arguments and creates a new {@code ExportCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the {@code ImportCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * and returns a {@code ImportCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            Path filePath \u003d ParserUtil.parseFilename(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return new ExportCommand(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FinishTodoCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.FinishTodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Parses input arguments and creates a new FinishTodo object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class FinishTodoCommandParser implements Parser\u003cFinishTodoCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FinishTodoCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * and returns an FinishTodoCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public FinishTodoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return new FinishTodoCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FinishTodoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the {@code ImportCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * and returns a {@code ImportCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            Path filePath \u003d ParserUtil.parseFilename(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return new ImportCommand(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MatchScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.MatchScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Parses input arguments and allows MatchScheduleCommand to find common time slots"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class MatchScheduleCommandParser implements Parser\u003cMatchScheduleCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MatchScheduleCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * and returns an MatchScheduleCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_MATCH_SCHEDULE_TIME_CONSTRAINTS \u003d \"Selected end time must be after start time.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MatchScheduleCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * and returns the common schedules as a string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public MatchScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_INDEX)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        TheDate date \u003d ParserUtil.parseTheDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cIndex\u003e matchScheduleList \u003d ParserUtil.parseMatchScheduleIndex(argMultimap.getAllValues(PREFIX_INDEX));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //checks if startTime is before endTime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int startT \u003d Integer.parseInt(startTime.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int endT \u003d Integer.parseInt(endTime.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (startT \u003e\u003d endT) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(MESSAGE_MATCH_SCHEDULE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new MatchScheduleCommand(date, startTime, endTime, matchScheduleList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidPath;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidXmlFilename;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.model.Filetype.isValidFiletype;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.EventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Agenda;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Content;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_INVALID_FILENAME \u003d \"Filename is invalid.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_INVALID_EXTENSION \u003d \"Filename must end with \\\".xml\\\".\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    //@@author jitwei98"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Parses a {@code String filename} into a {@code Path}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws ParseException if the given {@code filename} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static Path parseFilename(String filename) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String trimmedFilename \u003d filename.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!isValidPath(trimmedFilename)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_FILENAME);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!isValidXmlFilename(trimmedFilename)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_EXTENSION);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return Paths.get(\"data\", trimmedFilename);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    //@@author jitwei98"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Parses a {@code String filetype} into a {@code Filetype}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws ParseException if the given {@code String filetype} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static Filetype parseFiletype(String filetype) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String trimmedFiletype \u003d filetype.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (!isValidFiletype(trimmedFiletype)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new ParseException(Filetype.MESSAGE_FILETYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return new Filetype(trimmedFiletype);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    //@@author linnnruo"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new ParseException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Parses a {@code String content} into a {@code Content}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@author: driedmelon"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static TheDate parseTheDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!TheDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(TheDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new TheDate(trimmedDate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses a {@code String time} into a {@code Time}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static Time parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!Time.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Time(trimmedTime);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Leading and trailing whitespaes will be trimmed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Parses a {@code String agenda} into a {@code Agenda}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @throws ParseException if the given {@code agenda} is invalid."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static Agenda parseAgenda(String agenda) throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(agenda);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String trimmedAgenda \u003d agenda.trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!Agenda.isValidAgenda(trimmedAgenda)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new ParseException(Agenda.MESSAGE_AGENDA_CONSTRAINTS);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new Agenda(trimmedAgenda);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses a {@code String eventName} into a {@code EventName}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static EventName parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String trimmedEventName \u003d eventName.trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!EventName.isValidEventName(trimmedEventName)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new EventName(trimmedEventName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e matchSchedule} into a {@code List\u003cIndex\u003e}."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static List\u003cIndex\u003e parseMatchScheduleIndex(Collection\u003cString\u003e matchScheduleIndex) throws ParseException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(matchScheduleIndex);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final List\u003cIndex\u003e matchScheduleIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (String matchSchedulePerson : matchScheduleIndex) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            matchScheduleIndexList.add(parseIndex(matchSchedulePerson));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return matchScheduleIndexList;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 31,
      "driedmelon": 64,
      "jitwei98": 47,
      "-": 124,
      "junweiljw": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Processor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Parser class to extract keywords from user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Searches the args[] string for keywords and copies them in different strings"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class Processor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Processor(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "   }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Adds the string tokens in sortedArray into a single string, ignoring null entries in the array"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param s the sorted string array to be concatenated"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param glue the space to be added in between each array index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @return a concatenated string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /* Leftovers from Processor v1.0 and v2.0, might be used"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private String combine(String[] s, String glue) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        int k \u003d s.length;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (k \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        StringBuilder out \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        out.append(s[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        for (int i \u003d 1; i \u003c k; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            if (s[i] !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                out.append(glue).append(s[i]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return out.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Boolean function that checks if a given String is an integer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param s the string to be checked"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @return true if String is integer, false if otherwise"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // only got here if we didn\u0027t return false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Sorts the tokens in args[] into the correct sequence and concatenates them into a string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param userInput the line input by user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @return the sorted string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public String commandParser(String userInput) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // splits userInput by whitespaces and saves the tokens in args[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String[] args \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String newInput;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        for (int i \u003d 0; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            switch (args[i]) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            // \"COMMAND_WORD + PREFIX + DATA\" argument pattern"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            // \"COMMAND_WORD + KEYWORD\" argument pattern"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            // fallthrough, similar \"COMMAND_WORD\" argument pattern"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                userInput \u003d userInput.replace(args[i], \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                newInput \u003d args[i] + userInput;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                return newInput;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            // \"COMMAND_WORD + INDEX + PREFIX + DATA\" argument pattern"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                //fallthrough, similar \"COMMAND_WORD + INDEX\" argument pattern"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                userInput \u003d userInput.replace(args[i], \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                if (isInteger(args[i + 1])) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                    userInput \u003d userInput.replace(args[i + 1], \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                newInput \u003d args[i] + args[i + 1] + userInput;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                return newInput;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // if this statement is reached, there is no COMMAND_WORD within the userInput string"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ReminderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Agenda;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Parses input arguments and creates a new ReminderCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCommandParser implements Parser\u003cReminderCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReminderCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * and returns an ReminderCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DATE, PREFIX_START_TIME, PREFIX_AGENDA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_DATE, PREFIX_START_TIME, PREFIX_AGENDA)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Agenda agenda \u003d ParserUtil.parseAgenda(argMultimap.getValue(PREFIX_AGENDA).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder reminder \u003d new Reminder(title, date, time, agenda);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new ReminderCommand(reminder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.EventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * and returns an ScheduleCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_EVENT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_EVENT_NAME)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        TheDate date \u003d ParserUtil.parseTheDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Schedule schedule \u003d new Schedule(date, startTime, endTime, eventName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //checks if startTime is before endTime"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int startT \u003d Integer.parseInt(startTime.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int endT \u003d Integer.parseInt(endTime.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (startT \u003e\u003d endT) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new ParseException(schedule.MESSAGE_START_END_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new ScheduleCommand(schedule, index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TodoCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Parses input arguments and creates a new TodoCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCommandParser implements Parser\u003cTodoCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TodoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * and returns an TodoCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo todo \u003d new Todo(title, content);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new TodoCommand(todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/InputCommandSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ClearScheduleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.FinishTodoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.MatchScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//@@author elstonayx"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " * Checks whether input is valid in the commands after each key press"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class InputCommandSuggestion implements Suggestion {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String NO_REQUIRED_PARAMETERS \u003d \"This command does not require any parameters.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String INVALID_COMMAND_PARAMETERS \u003d \"There are no available parameters!\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static Trie commandList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static int wrongCharOverflow \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList \u003d new Trie();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ClearScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ExportAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ImportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(FinishTodoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(MatchScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(TodoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.insert(ReminderCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Gets a list of suggested commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param userInput the current string to check for suggested commands"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return ArrayList of possible commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public ArrayList\u003cString\u003e getSuggestions(String userInput) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        String command \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return commandList.getListOfWords(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Checks whether current character input is valid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param key current key input in"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return true if current word is valid and there are no overflows of wrong characters"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     *         false if current word typed is invalid"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public boolean checkValidCharacter(char key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        boolean isValid \u003d commandList.search(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (Character.isLetter(key) \u0026\u0026 !isValid) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            wrongCharOverflow++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return isValid \u0026\u0026 (wrongCharOverflow \u003d\u003d 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Checks whether string input is valid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param key string to check input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return true if the key is in the Trie"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public boolean checkValidString(String key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return commandList.search(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Moves search crawler to its parent if word is valid"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * else, it removes the overflow character count."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return true when current substring is valid, false if current substring is invalid"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public boolean removeSearchCharacter() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (wrongCharOverflow \u003e 1) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            wrongCharOverflow--;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        } else if (wrongCharOverflow \u003d\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            wrongCharOverflow--;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            commandList.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Resets the search crawler to the root node"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void resetSearchCrawler() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandList.resetSearchCrawlerToRoot();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Gets the respective command parameters from input command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param command the command to get parameters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return command parameters"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public String getCommandParameters(String command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return AddCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ClearScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return ClearScheduleCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return DeleteCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return EditCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ExportAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return ExportAllCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return ExportCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return ImportCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return FindCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case FinishTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return FindCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case MatchScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return MatchScheduleCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return ScheduleCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return SelectCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case TodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return TodoCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return ReminderCommand.COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return NO_REQUIRED_PARAMETERS;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return INVALID_COMMAND_PARAMETERS;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 181,
      "linnnruoo": 1,
      "jitwei98": 1,
      "junweiljw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/StringSimilarity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//@@author elstonayx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " * Finds how similar two given strings are."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class StringSimilarity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static final int ARRAY_PADDING \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static final int DELETION_COST \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static final int ADDITION_COST \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static final int SUBSTITUTION_COST \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Finds the edit distance between two strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param userCommand the command the user has entered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param commandToCheck the reference command to check the edit difference in string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return {@code int} the edit distance of the two strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public int editDistance(String userCommand, String commandToCheck) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        int[][] distanceArray \u003d new int[userCommand.length() + ARRAY_PADDING][commandToCheck.length() + ARRAY_PADDING];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommand.length() + ARRAY_PADDING; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            distanceArray[i][0] \u003d i;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int j \u003d 0; j \u003c commandToCheck.length() + ARRAY_PADDING; j++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            distanceArray[0][j] \u003d j;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int i \u003d 0; i \u003c userCommand.length(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            for (int j \u003d 0; j \u003c commandToCheck.length(); j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                if (userCommand.charAt(i) \u003d\u003d commandToCheck.charAt(j)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                    distanceArray[i + ARRAY_PADDING][j + ARRAY_PADDING] \u003d distanceArray[i][j];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                    distanceArray[i + ARRAY_PADDING][j + ARRAY_PADDING] \u003d minimum("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                            distanceArray[i + ARRAY_PADDING][j] + DELETION_COST,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                            distanceArray[i][j + ARRAY_PADDING] + ADDITION_COST,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                            distanceArray[i][j] + SUBSTITUTION_COST"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return distanceArray[userCommand.length()][commandToCheck.length()];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private int minimum(int a, int b, int c) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return Math.min(Math.min(a, b), c);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/Suggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " * API of the suggestion component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public interface Suggestion {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Executes getSuggestion"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param input any user input that requires suggestions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return a list of possible suggestions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    List\u003cString\u003e getSuggestions(String input);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/Trie.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//@@author elstonayx"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " * Trie data structure for quick searching of valid strings"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class Trie {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Node data structure. Component of a Trie data structure."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static class Node {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private HashMap\u003cCharacter, Node\u003e children;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private Node parent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private boolean isEndOfWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private Node() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            children \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            isEndOfWord \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            parent \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private Node getChild(char key) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return children.get(key);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private Set\u003cCharacter\u003e getChildren() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return children.keySet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private void putChild(char key, Node childNode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            children.put(key, childNode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            childNode.parent \u003d this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private void setEndOfWord() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            this.isEndOfWord \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        private boolean getIsEndOfWord() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return isEndOfWord;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private Node rootNode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private Node searchCrawler;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public Trie() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        rootNode \u003d new Node();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        resetSearchCrawlerToRoot();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Allows insertion of a new String into the data structure"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param key Word to be stored into the data structure"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void insert(String key) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        Node crawler \u003d rootNode;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        char curChar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int level \u003d 0; level \u003c key.length(); level++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            curChar \u003d key.charAt(level);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (crawler.getChild(curChar) \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                crawler.putChild(curChar, new Node());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            crawler \u003d crawler.getChild(curChar);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        crawler.setEndOfWord();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Searches whether a key character exists in the data structure at that position of the key"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param key character to check if word exists at that character order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return true if it exists, false if it doesn\u0027t exist"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public boolean search(char key) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (searchCrawler.getChild(key) \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            searchCrawler \u003d searchCrawler.getChild(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Overloaded operator, allows for searching a string whether it exists in the data structure"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param key string to be searched"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return whether the string exists"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public boolean search(String key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        Node crawler \u003d rootNode;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        char curChar;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int level \u003d 0; level \u003c key.length(); level++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            curChar \u003d key.charAt(level);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (crawler.getChild(curChar) \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            crawler \u003d crawler.getChild(curChar);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Moves the search crawler back to its parent."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void moveSearchCrawlerToParent() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (searchCrawler.parent !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            searchCrawler \u003d searchCrawler.parent;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Resets search crawler to root"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void resetSearchCrawlerToRoot() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        searchCrawler \u003d rootNode;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Checks if current node points to the end of the word"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return true if it is at the end of the word"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public boolean getIsEndOfWord() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return searchCrawler.getIsEndOfWord();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Uses DFS to find all the possible words given the current prefix string"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param key prefix string to find words"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return ArrayList of possible words"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public ArrayList\u003cString\u003e getListOfWords(String key) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        Node subStringNode \u003d getToSubStringNode(key);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        findChildName(key, subStringNode, result);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * DFS to find child. Adds substring into the result when is at the end of word."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Else, it continues traversing down the tree to find the end of the word, and appends"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * the current substring with the child key."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param curSubString current substring formed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param parent current parent node"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param result result of a list of words from current substring and node."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private void findChildName(String curSubString, Node parent, List\u003cString\u003e result) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (parent \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (parent.getIsEndOfWord()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            result.add(curSubString);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (char child: parent.getChildren()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            findChildName(curSubString + child, parent.getChild(child), result);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private Node getToSubStringNode(String key) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        Node crawler \u003d rootNode;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (char child: key.toCharArray()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            crawler \u003d crawler.getChild(child);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (crawler \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return crawler;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/suggestions/WrongCommandSuggestion.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ClearScheduleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.FinishTodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.MatchScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "//@@author elstonayx"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " * Suggests a command with the closest match to the inputted string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class WrongCommandSuggestion implements Suggestion {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String SUGGESTION_HEADER \u003d \"Did you mean: %1$s?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String NO_SUGGESTION \u003d \"No suggestions available.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static final int WORD_DISTANCE_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static final String[] CommandList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    // Initialising the CommandList Array"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        CommandList \u003d new String[] {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            AddCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ClearScheduleCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            DeleteCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            EditCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ExitCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ExportCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ExportAllCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            FinishTodoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            HelpCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            HistoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ListCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            MatchScheduleCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ScheduleCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            SelectCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            TodoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            UndoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            ReminderCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Parses the command input and passes it to the getNearestCommand for comparison of commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Returns formatted string of the suggestion header and closest matched command, else returns nothing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param userCommand A {@code String} object of the user\u0027s command input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @return A {@code String} object containing the suggestion header and suggested similar command."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public List\u003cString\u003e getSuggestions(String userCommand) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        String userCommandInLowerCase \u003d userCommand.toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        List\u003cString\u003e suggestedCommand \u003d getNearestCommands(userCommandInLowerCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return suggestedCommand;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private String getNearestCommand(String userCommand) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        int shortestEditDistance \u003d WORD_DISTANCE_LIMIT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        String shortestEditCommand \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int i \u003d 0; i \u003c CommandList.length; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            int distance \u003d new StringSimilarity().editDistance(userCommand, CommandList[i]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (distance \u003c\u003d shortestEditDistance) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                shortestEditDistance \u003d distance;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                shortestEditCommand \u003d CommandList[i];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return shortestEditCommand;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private List\u003cString\u003e getNearestCommands(String userCommand) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ArrayList\u003cString\u003e[] commandEditDistances \u003d new ArrayList[WORD_DISTANCE_LIMIT];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (int i \u003d 0; i \u003c WORD_DISTANCE_LIMIT; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            commandEditDistances[i] \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (String commands: CommandList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            int distance \u003d new StringSimilarity().editDistance(userCommand, commands);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (distance \u003c WORD_DISTANCE_LIMIT) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                commandEditDistances[1].add(commands);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        for (ArrayList\u003cString\u003e suggestedCommands: commandEditDistances) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (!suggestedCommands.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                return suggestedCommands;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 110,
      "linnnruoo": 2,
      "junweiljw": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.UniqueReminderList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.UniqueTodoList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final UniqueTodoList todos;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final UniqueReminderList reminders;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todos \u003d new UniqueTodoList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminders \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        setTodos(newData.getTodoList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        setReminders(newData.getReminderList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Removes {@code tag} from this {@code person}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code person} must exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void removeTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                                          person.getEmail(), person.getAddress(), newTags, person.getSchedules());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        updatePerson(person, updatedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Removes {@code tag} from all {@code person}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code person} must exist in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        persons.forEach(person -\u003e removeTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Todo tasks \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //@@author linnnruoo"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Replaces the contents of the todo tasks list with {@code todos}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code todos} must not contain duplicate todos."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void setTodos(List\u003cTodo\u003e todos) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.todos.setTodos(todos);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //// todo-level operations"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if a todo with the same identity as {@code todo} exists in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return todos.contains(todo);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Adds a todo task to the address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * The todo task must not already exist in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void addTodo(Todo td) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todos.add(td);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void removeTodo(Todo key) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todos.remove(key);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public ObservableList\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return todos.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminders \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //@@author junweiljw"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Replaces the contents of the reminder list with {@code reminders}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in the address book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Adds a reminder to the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The reminder must not already exist in the address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void addReminder(Reminder rm) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminders.add(rm);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 77,
      "driedmelon": 1,
      "-": 119,
      "junweiljw": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Filetype.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Represents filetype available for import/export."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFiletype(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class Filetype {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String MESSAGE_FILETYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"Filetype can take either \\\"csv\\\" or \\\"vcf\\\", and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * The first character of the filetype must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String FILETYPE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Filetypes that can be used to export contacts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public enum Extension {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        csv, vcf"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Constructs a {@code Filetype} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param filetype a string representing the filetype."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Filetype(String filetype) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(filetype);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        checkArgument(isValidFiletype(filetype), MESSAGE_FILETYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        value \u003d filetype;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns true if a given string is a valid filetype."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static boolean isValidFiletype(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return test.matches(FILETYPE_VALIDATION_REGEX) \u0026\u0026 isValidExtension(test);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns true if a given string matches any of the valid Extension."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static boolean isValidExtension(String extension) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return contains(Extension.class, extension);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // Reused from"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // http://www.java2s.com/Tutorials/Java/Data_Type_How_to/String/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    // Check_if_enum_contains_a_given_string.html with minor modifications"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns true if an {@code enumClass} contains a specific {@code value}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static \u003cE extends Enum\u003cE\u003e\u003e boolean contains(Class\u003cE\u003e enumClass,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                                                       String value) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return EnumSet.allOf(enumClass)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                    .contains(Enum.valueOf(enumClass, value));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                || (other instanceof Filetype // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                \u0026\u0026 value.equals(((Filetype) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    Predicate\u003cTodo\u003e PREDICATE_SHOW_ALL_TODOS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    Predicate\u003cReminder\u003e PREDICATE_SHOW_ALL_REMINDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Deletes the given tag {@code tag} from all persons {@code person}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code tag} may or may not exist in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Import/ Export \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Imports the persons from a xml at {@code importFilePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void importPersonsFromAddressBook(Path importFilePath) throws IOException, DataConversionException;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Adds all the persons in {@code addressBookImported} to the current address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @return hasChanged is true if the addressBook is modified, returns false otherwise."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    boolean addPersonsToAddressBook(ReadOnlyAddressBook addressBookToImported);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Exports the current filtered person list to a xml file at {@code exportFilePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void exportFilteredAddressBook(Path exportFilePath) throws IOException, IllegalValueException;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Exports the current address book state to a .csv file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void exportAddressBook() throws IOException;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Exports the given person to a .csv file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void exportPerson(Person person) throws IOException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered todo task list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    ObservableList\u003cTodo\u003e getFilteredTodoList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if a todo task with the same fields as {@code todo} exists in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    boolean hasTodo(Todo todo);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Adds the given todo task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code todo} must not already exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    void addTodo(Todo todo);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Complete the given todo task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code todo} must already exist in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    void finishTodo(Todo todo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Updates the filter of the filtered todo task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if a reminder with the same fields as {@code reminder} exists in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered reminder list */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Adds the reminder."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code reminder} must not already exist in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Updates the filter of the filtered reminder list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 34,
      "driedmelon": 1,
      "jitwei98": 32,
      "-": 78,
      "junweiljw": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.export.CsvWriter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.export.Export;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.export.ExportManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.export.Import;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.export.ImportManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final FilteredList\u003cTodo\u003e filteredTodos;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminders;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        filteredTodos \u003d new FilteredList\u003c\u003e(versionedAddressBook.getTodoList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        filteredReminders \u003d new FilteredList\u003c\u003e(versionedAddressBook.getReminderList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Todo tasks List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Todo} backed by the internal list of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTodos);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        filteredTodos.setPredicate(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredReminders);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        filteredReminders.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Remove a particular tag from all persons \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        versionedAddressBook.removeTag(tag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Import/ Export \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void importPersonsFromAddressBook(Path importFilePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Import importManager \u003d new ImportManager(importFilePath);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBookImported \u003d importManager.readAddressBook().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        boolean hasChanged \u003d addPersonsToAddressBook(addressBookImported);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        if (hasChanged) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            indicateAddressBookChanged();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean addPersonsToAddressBook(ReadOnlyAddressBook addressBookImported) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ObservableList\u003cPerson\u003e persons \u003d addressBookImported.getPersonList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        AtomicBoolean hasChanged \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        persons.forEach((person) -\u003e {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            // TODO: explain why this instead of addPerson() above in developer guide (indicate ab changed at the end)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            if (!hasPerson(person)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                hasChanged.set(true);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return hasChanged.get();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportFilteredAddressBook(Path exportFilePath) throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Export export \u003d new ExportManager(getFilteredPersonList(), exportFilePath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        export.saveFilteredPersons();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportAddressBook() throws IOException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        CsvWriter csvWriter \u003d new CsvWriter(versionedAddressBook.getPersonList(), userPrefs.getExportCsvFilePath());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        csvWriter.write();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportPerson(Person person) throws IOException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        CsvWriter csvWriter \u003d new CsvWriter(person, userPrefs.getExportCsvFilePath());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        csvWriter.write();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Todo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(todo);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return versionedAddressBook.hasTodo(todo);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        versionedAddressBook.addTodo(todo);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        updateFilteredTodoList(PREDICATE_SHOW_ALL_TODOS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void finishTodo(Todo target) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        versionedAddressBook.removeTodo(target);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return versionedAddressBook.hasReminder(reminder);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        versionedAddressBook.addReminder(reminder);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 45,
      "driedmelon": 1,
      "jitwei98": 59,
      "-": 150,
      "junweiljw": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns an unmodifiable view of the todo tasks list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * This list will not contain any duplicate todo tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    ObservableList\u003cTodo\u003e getTodoList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns an unmodifiable view of the reminders list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * This list will not contain any duplicate reminders."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 5,
      "-": 17,
      "junweiljw": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"jithub.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path exportCsvFilePath \u003d Paths.get(\"data\", \"jithub.csv\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Path getExportCsvFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return exportCsvFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 6,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEventName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_EVENT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            \"Event Names should only contain alphanumeric characters, spaces and periods, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * otherwise \" \" (a blank string) becomes an input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String EVENT_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} .]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public EventName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        checkArgument(isValidEventName(name), MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static boolean isValidEventName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return test.matches(EVENT_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Set\u003cSchedule\u003e schedules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Set\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.schedules.addAll(schedules);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns an immutable schedule set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Set\u003cSchedule\u003e getSchedules() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return Collections.unmodifiableSet(schedules);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 otherPerson.getSchedules().equals(getSchedules());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 13,
      "-": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + \"and at most 20 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,20}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Schedule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_START_END_CONSTRAINTS \u003d \"Event end time must be after start time.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public final String schedulePrint;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    // Date fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final TheDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    // Time fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Time startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Time endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    // Event Name field"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Schedule(TheDate date, Time startTime, Time endTime, EventName eventName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireAllNonNull(date, startTime, endTime, eventName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.schedulePrint \u003d this.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns true if startTime is before endTime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static boolean isValidStartEnd (String startTime, String endTime) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int startT \u003d Integer.parseInt(startTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int endT \u003d Integer.parseInt(endTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return (startT \u003c endT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public TheDate getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Time getStartTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Time getEndTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return Objects.hash(date, startTime, endTime, eventName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        builder.append(\"Date:\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(\" Start:\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(getStartTime())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(\" End:\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(getEndTime())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(\" EventName:\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .append(getEventName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TheDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Represents the date of the event in JitHub."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class TheDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            \"Dates should only contain numbers in DDMMYYYY format, and it should not be blank\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                    + \"Only calendar dates are accepted.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @param theDate A valid date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public TheDate(String theDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(theDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        checkArgument(isValidDate(theDate), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        value \u003d theDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        SimpleDateFormat jitHubDateFormat \u003d new SimpleDateFormat(\"ddMMyyyy\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        jitHubDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            jitHubDateFormat.parse(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || (other instanceof TheDate // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 value.equals(((TheDate) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Represents a time of the event in JitHub."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //TODO: CHANGE TIME TO ONLY ACCEPT 4 DIGITS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time should be 4 digits in 24HRS format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @param theTime A valid time format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Time(String theTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        requireNonNull(theTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        checkArgument(isValidTime(theTime), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        value \u003d theTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns a value of time in minutes passed in the day, with a range of 0 to 1440."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public int timeToMinutesInDay() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int convTime \u003d Integer.parseInt(this.value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int hrsToMins \u003d (convTime / 100) * 60;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int minsToMins \u003d convTime % 100;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        int timeMinsInDay \u003d hrsToMins + minsToMins;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return (timeMinsInDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Agenda.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Represents a Reminder\u0027s meeting agenda in JitHub."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAgenda(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class Agenda {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_AGENDA_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \"Agenda can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The first character of the content must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String AGENDA_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Constructs an {@code Agenda}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param agenda A valid agenda."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Agenda(String agenda) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(agenda);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        checkArgument(isValidAgenda(agenda), MESSAGE_AGENDA_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        value \u003d agenda;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if a given string is a valid content."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static boolean isValidAgenda(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return test.matches(AGENDA_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || (other instanceof Agenda // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 value.equals(((Agenda) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Represents the date of the event in JitHub."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \"Dates should only contain numbers in DDMMYYYY format, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The first character of the date must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"(0[1-9]|[1-2][0-9]|3[0-1])(0[0-9]|1[0-2])(\\\\d{4})\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param theDate A valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Date(String theDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(theDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        checkArgument(isValidDate(theDate), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        value \u003d theDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return test.matches(DATE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Represents a Reminder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    // Reminder description fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final Time time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final Agenda agenda;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Reminder(Title title, Date date, Time time, Agenda agenda) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireAllNonNull(title, date, time, agenda);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.agenda \u003d agenda;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Time getTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Agenda getAgenda() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return agenda;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if both reminders of the same title have time that is the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * This prevents creating a reminder for meetings occurring at the same time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean isSameReminder(Reminder otherTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (otherTime \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return otherTime !\u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 otherTime.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 (otherTime.getDate().equals(getDate()))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 (otherTime.getTime().equals(getTime()))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 (otherTime.getAgenda().equals(getAgenda()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if two reminders have the same fields"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Represents a strong notion of equality"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Reminder other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 otherReminder.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 (otherReminder.getDate().equals(getDate()))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 (otherReminder.getTime().equals(getTime()))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 (otherReminder.getAgenda().equals(getAgenda()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return Objects.hash(title, date, time, agenda);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(\" Agenda: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                .append(getAgenda());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Represents a time of the event in JitHub."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time should be 4 digits in 24HRS format\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Constructs a {@code Time}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param theTime A valid time format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Time(String theTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(theTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        checkArgument(isValidTime(theTime), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        value \u003d theTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return test.matches(TIME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || (other instanceof Time // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 value.equals(((Time) other).value)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Represents a Reminder\u0027s Title."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \"Title can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Constructs an {@code Title}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return test.matches(TITLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/UniqueReminderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * A list of reminders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * A reminder is considered unique by comparing using {@code Reminder#isSameReminder(Reminder)}. As such, adding and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * updating of reminders uses Reminder#isSameReminder(Reminder) for equality so as to ensure that the reminder being"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueReminderList. However, the removal of a reminder uses"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Reminder#equals(Object) so as to ensure that the reminder with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * @see Reminder#isSameReminder(Reminder)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class UniqueReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if the list contains an equivalent reminder as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Adds a reminder to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The reminder must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Replaces the reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The reminder content of {@code editedReminder} must not be the same as another existing reminder in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!target.isSameReminder(editedReminder) \u0026\u0026 contains(editedReminder)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        internalList.set(index, editedReminder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Removes the equivalent reminder from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * The reminder must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void setReminders(UniqueReminderList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Replaces the contents of this list with {@code reminders}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code reminders} must not contain duplicate reminders."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                || (other instanceof UniqueReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReminderList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns true if {@code reminder} contains only unique reminders."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                if (reminders.get(i).isSameReminder(reminders.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Signals that the operation will result in duplicate Reminder(Reminders are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        super(\"Operation would result in duplicate reminders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todo/Content.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Represents a Todo task\u0027s content in JitHub."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_CONTENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \"Content can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * The first character of the content must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String CONTENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Constructs an {@code Content}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param content A valid content."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        value \u003d content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if a given string is a valid content."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return test.matches(CONTENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 value.equals(((Content) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todo/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Represents a Todo task\u0027s title in JitHub."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \"Title can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Constructs an {@code Title}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return test.matches(TITLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todo/Todo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Represents a Todo task in the JitHub."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class Todo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    // Todo task description fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final Content content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Todo(Title title, Content content) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireAllNonNull(title, content);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if both todo tasks of the same title have content field that is the same."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean isSameTodo(Todo otherTodo) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (otherTodo \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return otherTodo !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 otherTodo.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 (otherTodo.getContent().equals(getContent()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if both todo tasks have the same title and content."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Represents a strong notion of equality"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Todo other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!(other instanceof Todo)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo otherTodo \u003d (Todo) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return otherTodo !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 otherTodo.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 (otherTodo.getContent().equals(getContent()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return Objects.hash(title, content);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        builder.append(\" Title: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                .append(getTitle())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                .append(\" Content: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                .append(getContent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todo/UniqueTodoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.exceptions.DuplicateTodoException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.exceptions.TodoNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * A list of todo tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * A todo task is considered unique by comparing using {@code Todo#isSameTodo(Todo)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * todo tasks uses Todo#isSameTodo(Todo) for equality so as to ensure that the todo task being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * unique in terms of identity in the UniqueTodoList. However, the removal of a todo task uses Todo#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * as to ensure that the todo task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * @see Todo#isSameTodo(Todo)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class UniqueTodoList implements Iterable\u003cTodo\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final ObservableList\u003cTodo\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if the list contains an equivalent todo task as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean contains(Todo toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTodo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Adds a todo task to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * The todo task must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void add(Todo toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new DuplicateTodoException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Replaces the todo task {@code target} in the list with {@code editedTodo}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * The todo task content of {@code editedTodo} must not be the same as another existing todo task in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void setTodo(Todo target, Todo editedTodo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireAllNonNull(target, editedTodo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new TodoNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!target.isSameTodo(editedTodo) \u0026\u0026 contains(editedTodo)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new DuplicateTodoException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        internalList.set(index, editedTodo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Removes the equivalent todo task from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * The todo task must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void remove(Todo toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new TodoNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void setTodos(UniqueTodoList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Replaces the contents of this list with {@code todos}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code todos} must not contain duplicate todos."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void setTodos(List\u003cTodo\u003e todos) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        requireAllNonNull(todos);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!todosAreUnique(todos)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new DuplicateTodoException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        internalList.setAll(todos);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public ObservableList\u003cTodo\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Iterator\u003cTodo\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                || (other instanceof UniqueTodoList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTodoList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns true if {@code todos} contains only unique todo tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private boolean todosAreUnique(List\u003cTodo\u003e todos) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        for (int i \u003d 0; i \u003c todos.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c todos.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                if (todos.get(i).isSameTodo(todos.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todo/exceptions/DuplicateTodoException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Signals that the operation will result in duplicate Todo (Todos are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class DuplicateTodoException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public DuplicateTodoException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        super(\"Operation would result in duplicate todo tasks\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/todo/exceptions/TodoNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.EventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Schedule SAMPLE_SCHEDULE \u003d new Schedule(new TheDate(\"09092018\"), new Time(\"1230\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            new Time (\"1400\") , new EventName(\"CS1231 Exam\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final Set\u003cSchedule\u003e schedules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        schedules.add(SAMPLE_SCHEDULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                getTagSet(\"friends\"), schedules),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), schedules),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                getTagSet(\"neighbours\"), schedules),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                getTagSet(\"family\"), schedules),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                getTagSet(\"classmates\"), schedules),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                getTagSet(\"colleagues\"), schedules)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Returns a schedule set containing the schedule given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static Set\u003cSchedule\u003e getScheduleSet(Schedule... schedules) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Set\u003cSchedule\u003e schedule \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        schedule.add(SAMPLE_SCHEDULE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 28,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns the file path of the backup file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    Path getAddressBookBackupPath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Backup the given {@link ReadOnlyAddressBook} to a temporary local backup file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 12,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Path getAddressBookBackupPath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return addressBookStorage.getAddressBookBackupPath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        addressBookStorage.backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 10,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private List\u003cXmlAdaptedSchedule\u003e schedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                            List\u003cXmlAdaptedSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (schedules !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            this.schedules \u003d new ArrayList\u003c\u003e(schedules);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        schedules \u003d source.getSchedules().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .map(XmlAdaptedSchedule::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final List\u003cSchedule\u003e personSchedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        for (XmlAdaptedSchedule schedule : schedules) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            personSchedules.add(schedule.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final Set\u003cSchedule\u003e modelSchedules \u003d new HashSet\u003c\u003e(personSchedules);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelSchedules);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //\u0026\u0026 schedules.equals(otherPerson.schedules);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 22,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedReminder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Agenda;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author: junweiljw"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * JAXB-friendly version of the Reminder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class XmlAdaptedReminder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private String agenda;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Constructs an XmlAdaptedReminder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public XmlAdaptedReminder() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Constructs an {@code XmlAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public XmlAdaptedReminder(String title, String date, String time, String agenda) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.agenda \u003d agenda;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Converts a given reminder"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * into this class for JAXB use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedReminder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public XmlAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        time \u003d source.getTime().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        agenda \u003d source.getAgenda().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Converts this jaxb-friendly adapted reminder object into the model\u0027s Reminder object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!Time.isValidTime(time)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        final Time modelTime \u003d new Time(time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (agenda \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Agenda.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!Agenda.isValidAgenda(agenda)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new IllegalValueException(Agenda.MESSAGE_AGENDA_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        final Agenda modelAgenda \u003d new Agenda(agenda);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new Reminder(modelTitle, modelDate, modelTime, modelAgenda);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!(other instanceof XmlAdaptedReminder)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        XmlAdaptedReminder otherReminder \u003d (XmlAdaptedReminder) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return Objects.equals(title, otherReminder.title)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherReminder.date)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 Objects.equals(time, otherReminder.time)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 Objects.equals(agenda, otherReminder.agenda);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedSchedule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.EventName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//@@author: driedmelon"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * JAXB-friendly version of the Schedule."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class XmlAdaptedSchedule {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private String schedulePrint;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Constructs an XmlAdaptedSchedule."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public XmlAdaptedSchedule() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Constructs an {@code XmlAdaptedSchedule} with the given schedule details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public XmlAdaptedSchedule(String date, String startTime, String endTime, String eventName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.schedulePrint \u003d this.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Converts a given Schedule into this class for JAXB use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public XmlAdaptedSchedule(Schedule source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        startTime \u003d source.getStartTime().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        endTime \u003d source.getEndTime().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        eventName \u003d source.getEventName().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        schedulePrint \u003d source.schedulePrint;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, TheDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!TheDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(TheDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final TheDate modelDate \u003d new TheDate(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!Time.isValidTime(startTime)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final Time modelStartTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!Time.isValidTime(endTime)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!Schedule.isValidStartEnd(startTime, endTime)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(Schedule.MESSAGE_START_END_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final Time modelEndTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!EventName.isValidEventName(eventName)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_EVENT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        final EventName modelEventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Schedule(modelDate, modelStartTime, modelEndTime, modelEventName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        if (!(other instanceof XmlAdaptedSchedule)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        XmlAdaptedSchedule otherSchedule \u003d (XmlAdaptedSchedule) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return Objects.equals(date, otherSchedule.date)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 Objects.equals(startTime, otherSchedule.startTime)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 Objects.equals(endTime, otherSchedule.endTime)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                \u0026\u0026 Objects.equals(eventName, otherSchedule.eventName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTodo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author: linnnruoo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * JAXB-friendly version of the Todo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class XmlAdaptedTodo {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Todo\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Constructs an XmlAdaptedTodo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public XmlAdaptedTodo() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Constructs an {@code XmlAdaptedTodo} with the given todo task details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public XmlAdaptedTodo(String title, String content) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Converts a given todo task into this class for JAXB use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedTodo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public XmlAdaptedTodo(Todo source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        content \u003d source.getContent().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Converts this jaxb-friendly adapted todo object into the model\u0027s Todo object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted todo"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Todo toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new Todo(modelTitle, modelContent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!(other instanceof XmlAdaptedTodo)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        XmlAdaptedTodo otherTodo \u003d (XmlAdaptedTodo) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return Objects.equals(title, otherTodo.title)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 Objects.equals(content, otherTodo.content);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path backupPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this.backupPath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public Path getAddressBookBackupPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return backupPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Similar to {@link #backupAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        saveAddressBook(addressBook, backupPath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 15,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TODO \u003d \"Todo tasks list contains duplicate todo task(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Reminders list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private List\u003cXmlAdaptedTodo\u003e todoTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private List\u003cXmlAdaptedReminder\u003e reminders;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoTasks.addAll(src.getTodoList().stream().map(XmlAdaptedTodo::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminders.addAll(src.getReminderList().stream().map(XmlAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Conversion with filtered Persons instead of the whole address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public XmlSerializableAddressBook(ObservableList\u003cPerson\u003e filteredPersons) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        persons.addAll(filteredPersons.stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        for (XmlAdaptedTodo td : todoTasks) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            Todo todoTask \u003d td.toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            if (addressBook.hasTodo(todoTask)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            addressBook.addTodo(todoTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        for (XmlAdaptedReminder rm : reminders) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            Reminder reminder \u003d rm.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            if (addressBook.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 todoTasks.equals(((XmlSerializableAddressBook) other).todoTasks)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 reminders.equals(((XmlSerializableAddressBook) other).reminders);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 17,
      "jitwei98": 7,
      "-": 72,
      "junweiljw": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            \"http://lmgtfy.com/?t\u003di\u0026q\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarLayout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//Inspired by the original @@author guekling"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Display the layout of calendar view"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class CalendarLayout extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final String FXML \u003d \"CalendarLayout.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final int SUNDAY \u003d 7;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final int MAX_COLUMN \u003d 6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final int MAX_ROW \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private int dateCount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private YearMonth viewYearMonth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private String[] datesToBePrinted;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private GridPane gridCalendar;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public CalendarLayout() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        currentYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        viewYearMonth \u003d currentYearMonth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Displays the month view."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param yearMonth Year and month in the YearMonth format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void getCalendarLayout(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        viewYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        YearMonth y \u003d YearMonth.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        int year \u003d y.getYear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        setCalendarTitle(year, yearMonth.getMonth().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        setCalendarDates(year, yearMonth.getMonthValue());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Sets the title of the calendar according to a specific month and year."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void setCalendarTitle(int year, String month) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        calendarTitle.setText(month + \" \" + year);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Sets the dates  of the calendar according to the specific month and year."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param year Year represented as a 4-digit integer."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param month Month represented by numbers from 1 to 12."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void setCalendarDates(int year, int month) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        int lengthOfMonth \u003d startDate.lengthOfMonth();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        int startDay \u003d getMonthStartDay(startDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        datesToBePrinted \u003d new String[36];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        storeMonthDatesToBePrinted(lengthOfMonth);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        setFiveWeeksCalendar(startDay);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // If month has more than 5 weeks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (dateCount !\u003d lengthOfMonth) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            setSixWeeksCalendar(lengthOfMonth);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Sets the dates of a five-weeks month-view calendar into the {@code gridCalendar}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param startDay Integer value of the day of week of the start day  of the month. Values ranges from 1 - 7,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *                 representing the different days of the week."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void setFiveWeeksCalendar(int startDay) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        dateCount \u003d 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        for (int row \u003d 0; row \u003c\u003d MAX_ROW; row++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            if (row \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                for (int column \u003d startDay; column \u003c\u003d MAX_COLUMN; column++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    Text dateToPrint \u003d new Text(datesToBePrinted[dateCount]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    addMonthDate(dateToPrint, column, row);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    dateCount++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                for (int column \u003d 0; column \u003c\u003d MAX_COLUMN; column++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    Text dateToPrint \u003d new Text(datesToBePrinted[dateCount]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    addMonthDate(dateToPrint, column, row);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                    dateCount++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Sets the dates of the sixth week in a six-weeks month-view calendar into the {@code gridCalendar}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param lengthOfMonth Integer value of the number of days in a month."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void setSixWeeksCalendar(int lengthOfMonth) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        int remainingDays \u003d lengthOfMonth - dateCount;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        for (int column \u003d 0; column \u003c\u003d remainingDays; column++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            Text dateToPrint \u003d new Text(datesToBePrinted[dateCount]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            addMonthDate(dateToPrint, column, 0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            dateCount++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Gets the day of week of the start date of a particular month and year."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param startDate A LocalDate variable that represents the date, viewed as year-month-day. The day will always"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *                  be set as 1."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @return Integer value of the day of week of the start day  of the month. Values ranges from 1 - 7,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *         representing the different days of the week."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private int getMonthStartDay(LocalDate startDate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        int startDay \u003d startDate.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // Sunday is the first column in the calendar"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (startDay \u003d\u003d SUNDAY) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            startDay \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return startDay;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Adds a particular date to the correct {@code column} and {@code row} in the {@code gridCalendar}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param dateToPrint The formatted date text to be printed on the {@code gridCalendar}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param column The column number in {@code gridCalendar}. Column number should range from 0 to 6."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param row The row number in {@code gridCalendar}. Row number should range from 0 to 4."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void addMonthDate(Text dateToPrint, int column, int row) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // To update the JavaFX component from a non-JavaFX thread"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Platform.runLater(new Runnable() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                gridCalendar.add(dateToPrint, column, row);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        gridCalendar.setHalignment(dateToPrint, HPos.LEFT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        gridCalendar.setValignment(dateToPrint, VPos.TOP);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        dateToPrint.setId(\"date\" + String.valueOf(dateCount));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        dateToPrint.setFill(Color.WHITE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Stores the formatted date String to be printed on the {@code gridCalendar}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @param lengthOfMonth Integer value of the number of days in a month."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void storeMonthDatesToBePrinted(int lengthOfMonth) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        for (int date \u003d 1; date \u003c\u003d 35; date++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            if (date \u003c\u003d lengthOfMonth) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                datesToBePrinted[date] \u003d \"  \" + String.valueOf(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "content": "//@@author linnnruo"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * The Calendar Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String BLANK_COLOR_PAGE \u003d \"CalendarBackground.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private CalendarLayout calendarLayout;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private StackPane calendar;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public CalendarPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        calendarLayout \u003d new CalendarLayout();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        currentYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Creates the view of the calendar"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void createMainView() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        calendarLayout.getCalendarLayout(currentYearMonth);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        calendar.getChildren().add(calendarLayout.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        loadUpdatedPage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private void loadUpdatedPage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + BLANK_COLOR_PAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        createMainView();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public CalendarLayout getCalendarLayout() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return calendarLayout;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "linnnruoo": 34,
      "driedmelon": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.apache.commons.lang3.StringUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.InputCommandSuggestion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private static InputCommandSuggestion ics \u003d new InputCommandSuggestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            handleTabPressed();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    //@@author elstonayx"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Handles when the tab button is pressed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private void handleTabPressed() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        String textFieldInput \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ArrayList\u003cString\u003e listOfCommands \u003d ics.getSuggestions(textFieldInput);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (listOfCommands.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            raise(new NewResultAvailableEvent(\"Invalid command! No suggestions available.\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        } else if (listOfCommands.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            String commandSuggested \u003d listOfCommands.get(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            String substringInput \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            if (textFieldInput.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                substringInput \u003d textFieldInput.substring(textFieldInput.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            textFieldInput \u003d commandSuggested + substringInput;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            raise(new NewResultAvailableEvent(ics.getCommandParameters(commandSuggested)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            String suggestions \u003d StringUtils.join(listOfCommands, \", \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            logger.info(\"Tab Pressed. Suggestions: \" + suggestions);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            raise(new NewResultAvailableEvent(\"Suggested Commands: \" + suggestions));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandTextField.setText(textFieldInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandTextField.positionCaret(textFieldInput.length());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 75,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private TodoListPanel todoListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private StackPane calendarPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private StackPane todoListPanelPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        calendarPanel \u003d new CalendarPanel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoListPanel \u003d new TodoListPanel(logic.getFilteredTodoList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoListPanelPlaceholder.getChildren().add(todoListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getFilteredReminderList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoListPanel getTodoListPanel() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return todoListPanel;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return reminderListPanel; }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 13,
      "jitwei98": 2,
      "-": 196,
      "junweiljw": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Label scheduleHeader;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private FlowPane schedules;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        scheduleHeader.setText(\"\\nSchedule of \" + person.getName().fullName + \": \\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        person.getSchedules().forEach(schedule -\u003e schedules.getChildren().add(new Label(schedule.schedulePrint)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 6,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * An UI component that displays information of a {@code Reminder}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public final Reminder reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Label agenda;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderCard(Reminder reminder, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        title.setText(reminder.getTitle().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        date.setText(reminder.getDate().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        time.setText(reminder.getTime().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        agenda.setText(reminder.getAgenda().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u0026\u0026 reminder.equals(card.reminder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Panel containing the list of reminders entered by JitHub users."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        setConnections(reminderList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void setConnections(ObservableList\u003cReminder\u003e reminderList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminderListView.setItems(reminderList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Scrolls to the {@code ReminderCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            reminderListView.scrollTo(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            //reminderListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminder} using a {@code reminderCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        protected void updateItem(Reminder reminder, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            super.updateItem(reminder, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            if (empty || reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                setGraphic(new ReminderCard(reminder, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"Welcome to JitHub!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public static final String TOTAL_PERSONS_STATUS \u003d \"%d person(s) total\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private StatusBar totalPersonsStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public StatusBarFooter(Path saveLocation, int totalPersons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        setTotalPersons(totalPersons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private void setTotalPersons(int totalPersons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Platform.runLater(() -\u003e totalPersonsStatus.setText(String.format(TOTAL_PERSONS_STATUS, totalPersons)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        setTotalPersons(abce.data.getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 10,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TodoCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * An UI component that displays information of a {@code Todo}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final String FXML \u003d \"TodoListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public final Todo todoTask;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoCard(Todo todo, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.todoTask \u003d todo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        title.setText(todo.getTitle().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        content.setText(todo.getContent().value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        if (!(other instanceof TodoCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        TodoCard card \u003d (TodoCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u0026\u0026 todoTask.equals(card.todoTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TodoListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Panel containing the list of todo tasks entered by JitHub users."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final String FXML \u003d \"TodoListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TodoListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private ListView\u003cTodo\u003e todoListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoListPanel(ObservableList\u003cTodo\u003e todoList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        setConnections(todoList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void setConnections(ObservableList\u003cTodo\u003e todoList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoListView.setItems(todoList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoListView.setCellFactory(listView -\u003e new TodoListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Scrolls to the {@code TodoCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            todoListView.scrollTo(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            //todoListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Todo} using a {@code todoCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    class TodoListViewCell extends ListCell\u003cTodo\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        protected void updateItem(Todo todo, boolean empty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            super.updateItem(todo, empty);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            if (empty || todo \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                setGraphic(new TodoCard(todo, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/logo.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 1,
      "-": 118
    }
  },
  {
    "path": "src/main/resources/view/CalendarBackground.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003cbody class\u003d\"calendarBackground\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003c/body\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarLayout.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "content": "\u003c!--@@author guekling--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003cHBox alignment\u003d\"BASELINE_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fx:id\u003d\"calendarTitle\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Test\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Sun\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Mon\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Tues\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003cGridPane fx:id\u003d\"gridCalendar\" gridLinesVisible\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"800.0\" styleClass\u003d\"calendarPaneStyle\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "linnnruoo": 70
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 6,
      "driedmelon": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/*@@author: linnnruoo*/"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #e4e2e5;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    background-color: #e4e2e5;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".calendarBackground {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #B6A6CA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    background-color: #B6A6CA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #1b1d16;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #cecece;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #8b8c89;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-base: #3f4045;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-control-inner-background: #3f4045;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #3f4045;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #b6a6ca;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #e4e2e5;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #B6A6CA;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #e4e2e5;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #e4e2e5;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #fff4fb;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #fff2f2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #e3f2fd;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: #a09abc;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #a2a2a2;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     -fx-background-color: #e4e2e5;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     -fx-background-color: #e4e2e5;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     -fx-border-color: #e4e2e5;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(#3f4045, 20%);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #535353;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(#3f4045, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: derive(#3f4045, 25%);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(#3f4045, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: derive(#3f4045, 30%);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(#3f4045, 20%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(#3f4045, 50%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #b6a6ca;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #3f4045;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "  -fx-background-color: #ffffff;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "  -fx-text-fill: #3f4045;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: #ffffff, #ffffff;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #3f4045;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #3f4045;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #3f4045;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: derive(#3f4045, 25%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-fill: #ffffff;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #d5d4d5;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #AF3EB0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-insets: 4;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #fafafa;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-color: #b6a6ca #b6a6ca #ffffff #b6a6ca;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-family: \"Lucida Console\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #535353;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-prompt-text-fill: #b8b8b9;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#filterField, #tagListPanel, #personWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #fafafa;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-color: #b6a6ca;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-padding: 2 4 2 4;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "#calendarTitle {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    -fx-font-size: 25pt;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 361
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"750\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "              \u003cInsets top\u003d\"3\" right\u003d\"3\" bottom\u003d\"3\" left\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "          \u003c!--\u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"0\" \u003e--\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "              \u003c!--\u003cInsets top\u003d\"3\" right\u003d\"3\" bottom\u003d\"3\" left\u003d\"3\" /\u003e--\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "          \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "          \u003cStackPane fx:id\u003d\"calendarPlaceholder\" minWidth\u003d\"340\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "          \u003cVBox fx:id\u003d\"todoreminderPane\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cStackPane fx:id\u003d\"todoList\" minWidth\u003d\"230\" prefWidth\u003d\"230\" SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                \u003cInsets top\u003d\"3\" right\u003d\"3\" bottom\u003d\"3\" left\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "              \u003cStackPane fx:id\u003d\"todoListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cStackPane fx:id\u003d\"reminderList\" minWidth\u003d\"230\" prefWidth\u003d\"230\" SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u003cInsets top\u003d\"3\" right\u003d\"3\" bottom\u003d\"3\" left\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "              \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 11,
      "driedmelon": 6,
      "-": 62,
      "junweiljw": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\\n\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cLabel fx:id\u003d\"scheduleHeader\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"schedules\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 3,
      "driedmelon": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            \u003cLabel fx:id\u003d\"agenda\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$agenda\\n\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 34
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 8
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"totalPersonsStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "             nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/TodoListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "      \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" fx:id\u003d\"content\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 32
    }
  },
  {
    "path": "src/main/resources/view/TodoListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        \u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003cListView fx:id\u003d\"todoListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 8
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003cimg src\u003d\"../images/welcome.png\" alt\u003d\"Welcome to JitHub\" height\u003d\"500\" width\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003cschedules\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cdate\u003e09092018\u003c/date\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cstartTime\u003e1230\u003c/startTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cendTime\u003e1430\u003c/endTime\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003ceventName\u003eCS1231 Exam\u003c/eventName\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cschedulePrint\u003eDate: 09092018 StartTime: 1230 EndTime: 1430 EventName: CS1231 Exam\u003c/schedulePrint\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003c/schedules\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 7,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003cschedules\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cdate\u003e09092018\u003c/date\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cstartTime\u003e1230\u003c/startTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cendTime\u003e1430\u003c/endTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003ceventName\u003eCS1231 Exam\u003c/eventName\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cschedulePrint\u003eDate: 09092018 StartTime: 1230 EndTime: 1430 EventName: CS1231 Exam\u003c/schedulePrint\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003c/schedules\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 7,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003cschedules\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cdate\u003e09092018\u003c/date\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cstartTime\u003e1230\u003c/startTime\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cendTime\u003e1430\u003c/endTime\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003ceventName\u003eCS1231 Exam\u003c/eventName\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        \u003cschedulePrint\u003eDate: 09092018 StartTime: 1230 EndTime: 1430 EventName: CS1231 Exam\u003c/schedulePrint\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    \u003c/schedules\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 7,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Presses tab to get suggestions for given input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * @param input input to type"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void pressTab(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(input));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        guiRobot.type(KeyCode.TAB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 12,
      "-": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String TOTAL_PERSONS_STATUS_ID \u003d \"#totalPersonsStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private final StatusBar totalPersonsStatusNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private String lastRememberedTotalPersonsStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        totalPersonsStatusNode \u003d getChildNode(TOTAL_PERSONS_STATUS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns the text of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public String getTotalPersonsStatus() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return totalPersonsStatusNode.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Remembers the content of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void rememberTotalPersonsStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        lastRememberedTotalPersonsStatus \u003d getTotalPersonsStatus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * recent {@code rememberTotalPersonsStatus()} call."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public boolean isTotalPersonsStatusChanged() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        return !lastRememberedTotalPersonsStatus.equals(getTotalPersonsStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 26,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : JitHub\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void isValidXmlFilename() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // valid xml filename"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(FileUtil.isValidXmlFilename(\"someXmlFile.xml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(FileUtil.isValidXmlFilename(\"anotherXmlFile.xml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(FileUtil.isValidXmlFilename(\"someXmlFile.XML\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // invalid filename, not .xml"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(FileUtil.isValidXmlFilename(\"someXmlFile.pdf\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // invalid filename, empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(FileUtil.isValidXmlFilename(\"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // invalid filename, no extension"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(FileUtil.isValidXmlFilename(\"someXmlFile\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // null filename -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidXmlFilename(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 21,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.storage.XmlAdaptedSchedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final List\u003cXmlAdaptedSchedule\u003e VALID_SCHEDULES \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            Collections.singletonList(new XmlAdaptedSchedule(\"09092018\", \"1230\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                    \"1400\", \"CS1231 Exam\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SCHEDULES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SCHEDULES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_SCHEDULES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 7,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/export/CsvWriterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class CsvWriterTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path outputFilepath \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"addressbook.csv\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private CsvWriter csvWriter \u003d new CsvWriter(model.getFilteredPersonList(), outputFilepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path expectedPath \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"addressbook.csv\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void getOutputFilepath_notNull() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertNotNull(csvWriter.getOutputFilepath());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void getOutputFilepath_equalsDefault() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(csvWriter.getOutputFilepath(), expectedPath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void checkOutputFileExists() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        csvWriter.write();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(isFileExists(outputFilepath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/export/ExportManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path EXPORT_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"testImportCommand.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ObservableList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ExportManager exportManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        filteredPersons \u003d modelManager.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager \u003d new ExportManager(filteredPersons, EXPORT_FILE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void saveFilteredPersons() throws AssertionError {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            exportManager.saveFilteredPersons();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"The persons list passed in should not be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void saveFilteredPersons_nullFilteredPersons_throwsNullPointerException()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager.saveFilteredPersons(null, EXPORT_FILE_PATH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void saveFilteredPersons_emptyFilteredPersons_throwsIllegalValueException()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.resetData(new AddressBook());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager.saveFilteredPersons(filteredPersons, EXPORT_FILE_PATH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void getExportFilePath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertNotNull(exportManager.getExportFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/export/ImportManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.export;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ImportManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"sampleData.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"importTypicalAddressbook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_TWO_PERSONS_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"importTwoPersons.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"importEmptyAddressbook.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ImportManager importManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(IMPORT_FILE_PATH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportTypicalPersonsXmlFile() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportManager exportManager \u003d new ExportManager(addressBook.getPersonList(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager.saveFilteredPersons();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportTwoPersonsXmlFile() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportManager exportManager \u003d new ExportManager(addressBook.getPersonList(), IMPORT_TWO_PERSONS_FILE_PATH);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager.saveFilteredPersons();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportEmptyXmlFile() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ObservableList\u003cPerson\u003e filteredPersons \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Cannot export using ExportManager since the filteredPersons is empty"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        FileUtil.createIfMissing(IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        XmlFileStorage.saveDataToFile(IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                new XmlSerializableAddressBook(filteredPersons));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_withTwoPersons_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(IMPORT_TWO_PERSONS_FILE_PATH);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d importManager.readAddressBook().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(addressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_withNoPerson_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d importManager.readAddressBook().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook expectedAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(addressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_withTypicalPersons_success()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d importManager.readAddressBook().orElseThrow(IOException::new);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook expectedAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(addressBook, expectedAddressBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager.readAddressBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(Paths.get(\"NonExistentFile.xml\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(importManager.readAddressBook().isPresent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                \"sandbox\", \"addressbook.csv\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager.readAddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Borrow the test data from XmlAddressBookStorageTest"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                \"XmlAddressBookStorageTest\", \"invalidPersonAddressBook.xml\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager.readAddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Borrow the test data from XmlAddressBookStorageTest"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager \u003d new ImportManager(Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                \"XmlAddressBookStorageTest\", \"invalidAndValidPersonAddressBook.xml\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importManager.readAddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void getImportPath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertNotNull(importManager.getImportPath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + System.lineSeparator() + WrongCommandSuggestion.NO_SUGGESTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 3,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        public void importPersonsFromAddressBook(Path importFilePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        public boolean addPersonsToAddressBook(ReadOnlyAddressBook addressBookToImported) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        public void exportFilteredAddressBook(Path exportFilePath) throws IOException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        public void exportAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        public void exportPerson(Person person) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void finishTodo(Todo todo) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 32,
      "jitwei98": 28,
      "-": 204,
      "junweiljw": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//public class ClearScheduleCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //@@author linnnruoo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String VALID_CONTENT_TASK1 \u003d \"Eat my own dog food.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String VALID_CONTENT_TASK2 \u003d \"Do my own unit tests.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String VALID_TITLE_TASK1 \u003d \"To eat or not to eat\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String VALID_TITLE_TASK2 \u003d \"To do or not to do\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //@@author junweiljw"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER1_TITLE \u003d \"CS2113T Milestone 1 Meeting\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER1_DATE \u003d \"08022018\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER1_TIME \u003d \"2359\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER1_AGENDA \u003d \"To decide on what features to assign to members\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER2_TITLE \u003d \"CS2101 OP2 Meeting\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER2_DATE \u003d \"05122018\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER2_TIME \u003d \"2300\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String VALID_REMINDER2_AGENDA \u003d \"To decide on what features to assign to members\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@@author driedmelon"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_DATE_EVENT1 \u003d \"09092018\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_DATE_EVENT2 \u003d \"01012018\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_START_TIME_EVENT1 \u003d \"1230\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_START_TIME_EVENT2 \u003d \"0900\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_END_TIME_EVENT1 \u003d \"1400\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_END_TIME_EVENT2 \u003d \"1100\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_EVENT_NAME_EVENT1 \u003d \"CS1231 Exam\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_EVENT_NAME_EVENT2 \u003d \"Meeting for work\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@@author driedmelon"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DATE_DESC_EVENT1 \u003d \" \" + PREFIX_DATE + VALID_DATE_EVENT1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DATE_DESC_EVENT2 \u003d \" \" + PREFIX_DATE + VALID_DATE_EVENT2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String START_TIME_DESC_EVENT1 \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_EVENT1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String START_TIME_DESC_EVENT2 \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_EVENT2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String END_TIME_DESC_EVENT1 \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_EVENT1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String END_TIME_DESC_EVENT2 \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_EVENT2;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String EVENT_NAME_DESC_EVENT1 \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_EVENT1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String EVENT_NAME_DESC_EVENT2 \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_EVENT2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@@author driedmelon"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_DATE_MATCH1 \u003d \"09092018\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_START_TIME_MATCH1 \u003d \"1000\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_END_TIME_MATCH1 \u003d \"1600\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_MATCH_INDEX1 \u003d \"1\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String VALID_MATCH_INDEX2 \u003d \"2\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@@author driedmelon"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DATE_DESC_MATCH1 \u003d \" \" + PREFIX_DATE + VALID_DATE_MATCH1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String START_TIME_DESC_MATCH1 \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_MATCH1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String END_TIME_DESC_MATCH1 \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_MATCH1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INDEX_DESC_MATCH1 \u003d \" \" + PREFIX_INDEX + VALID_MATCH_INDEX1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INDEX_DESC_MATCH2 \u003d \" \" + PREFIX_INDEX + VALID_MATCH_INDEX2;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@@author driedmelon"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"50502018\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"1280\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INVALID_LATE_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"1200\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"2520\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INVALID_EARLY_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"0100\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME + \"BOB@!#@\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //@@author linnnruoo"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String CONTENT_DESC_TASK1 \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_TASK1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String CONTENT_DESC_TASK2 \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_TASK2;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String TITLE_DESC_TASK1 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_TASK1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String TITLE_DESC_TASK2 \u003d \" \" + PREFIX_TITLE + VALID_TITLE_TASK2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //@@author junweiljw"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String TITLE_DESC_REMINDER1 \u003d \" \" + PREFIX_TITLE + VALID_REMINDER1_TITLE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DATE_DESC_REMINDER1 \u003d \" \" + PREFIX_DATE + VALID_REMINDER1_DATE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String TIME_DESC_REMINDER1 \u003d \" \" + PREFIX_START_TIME + VALID_REMINDER1_TIME;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String AGENDA_DESC_REMINDER1 \u003d \" \" + PREFIX_AGENDA + VALID_REMINDER1_AGENDA;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String TITLE_DESC_REMINDER2 \u003d \" \" + PREFIX_TITLE + VALID_REMINDER2_TITLE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DATE_DESC_REMINDER2 \u003d \" \" + PREFIX_DATE + VALID_REMINDER2_DATE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String TIME_DESC_REMINDER2 \u003d \" \" + PREFIX_START_TIME + VALID_REMINDER2_TIME;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String AGENDA_DESC_REMINDER2 \u003d \" \" + PREFIX_AGENDA + VALID_REMINDER2_AGENDA;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //@@author linnnruoo"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String INVALID_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT; // empty string not allowed for content"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE; // empty string not allowed for titles"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //@@author junweiljw"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"2359a\"; // \u0027a\u0027 not allowed in times"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String INVALID_AGENDA_DESC \u003d \" \" + PREFIX_AGENDA; // empty string not allowed for agenda"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 18,
      "driedmelon": 48,
      "-": 140,
      "junweiljw": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportAllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ExportAllCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportAllCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Filetype FILETYPE_CSV \u003d new Filetype(\"csv\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Filetype FILETYPE_VCF \u003d new Filetype(\"vcf\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertCommandSuccess(new ExportAllCommand(FILETYPE_CSV), model, new CommandHistory(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                ExportAllCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final ExportAllCommand standardCommand \u003d new ExportAllCommand(FILETYPE_CSV);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportAllCommand commandWithSameArgument \u003d new ExportAllCommand(FILETYPE_CSV);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameArgument));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // null value -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(new ListCommand()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // different filetype -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(new ExportAllCommand(FILETYPE_VCF)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ExportCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path exportFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"testExportCommand.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_SUCCESS, exportFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommand expectedCommand \u003d new ExportCommand(exportFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertCommandSuccess(expectedCommand, model, new CommandHistory(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void execute_emptyAddressbook_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(exportFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expectMessage(ExportCommand.MESSAGE_FAILURE_EMPTY_AB);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportCommand.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommand standardCommand \u003d new ExportCommand(exportFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final Filetype filetypeCsv \u003d new Filetype(\"csv\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final Path differentFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"testExportCommandDifferent.xml\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommand commandWithSameArgument \u003d new ExportCommand(exportFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameArgument));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // null value -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(new ExportAllCommand(filetypeCsv)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // different filename -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(new ExportCommand(differentFilePath)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ImportCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final int PERSONS_ADDED \u003d 2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private Path importFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void setUp() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        model \u003d new ModelManager(new AddressBookBuilder().build(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel \u003d new ModelManager(new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        importFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\", \"testImportCommand.xml\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel.exportFilteredAddressBook(importFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void constructor_nullImportFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        new ImportCommand(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void execute() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        CommandResult commandResult \u003d new ImportCommand(importFilePath).execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_IMPORT_SUCCESS, PERSONS_ADDED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook expectedAddressBook \u003d expectedModel.getAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Cannot compare model since todos are not imported"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(expectedAddressBook.getPersonList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ImportCommand standardCommand \u003d new ImportCommand(importFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final Path differentFilePath \u003d Paths.get(\"src\", \"test\", \"data\", \"testImportCommandDifferent.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ImportCommand commandWithSameArgument \u003d new ImportCommand(importFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameArgument));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // null value -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(new ListCommand()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // different filename -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(standardCommand.equals(new ImportCommand(differentFilePath)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReminderCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ReminderCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void execute_newReminder_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        expectedModel.addReminder(validReminder);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(new ReminderCommand(validReminder), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                String.format(ReminderCommand.MESSAGE_SUCCESS, validReminder), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReminderCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        new ReminderCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void execute_reminderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        CommandResult commandResult \u003d new ReminderCommand(validReminder).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertEquals(String.format(ReminderCommand.MESSAGE_SUCCESS, validReminder), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertEquals(Arrays.asList(validReminder), modelStub.remindersAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void execute_duplicateReminder_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder validReminder \u003d new ReminderBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand(validReminder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithReminder(validReminder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        thrown.expectMessage(reminderCommand.MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        reminderCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder reminder1 \u003d new ReminderBuilder().withTitle(\"Reminder1\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder reminder2 \u003d new ReminderBuilder().withTitle(\"Reminder2\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ReminderCommand addReminder1Command \u003d new ReminderCommand(reminder1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ReminderCommand addReminder2Command \u003d new ReminderCommand(reminder2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(addReminder1Command.equals(addReminder1Command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ReminderCommand addReminder1CommandCopy \u003d new ReminderCommand(reminder1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(addReminder1Command.equals(addReminder1CommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(addReminder1Command.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(addReminder1Command.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(addReminder1Command.equals(addReminder2Command));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void importPersonsFromAddressBook(Path importFilePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean addPersonsToAddressBook(ReadOnlyAddressBook addressBookToImported) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void exportFilteredAddressBook(Path exportFilePath) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void exportAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void exportPerson(Person person) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void finishTodo(Todo todo) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * A Model stub that contains a single reminder."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private class ModelStubWithReminder extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        private final Reminder reminder;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        ModelStubWithReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return this.reminder.isSameReminder(reminder);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * A Model stub that always accept the reminder being added."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        final ArrayList\u003cReminder\u003e remindersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return remindersAdded.stream().anyMatch(reminder::isSameReminder);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            requireNonNull(reminder);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            remindersAdded.add(reminder);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            // called by {@code ReminderCommand#execute()}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 286
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.CS1231;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "//@@Author: driedmelon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ScheduleCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ScheduleCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ScheduleCommand scheduleFirstCommand \u003d new ScheduleCommand(CS1231, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertTrue(scheduleFirstCommand.equals(scheduleFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertFalse(scheduleFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Executes a {@code ScheduleCommand} with the given {@code schedule and index},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * and checks that {@code JumpToListRequestEvent} is raised with the correct index."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private void assertExecutionSuccess(Schedule schedule, Index index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(schedule, index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String expectedMessage \u003d String.format(ScheduleCommand.MESSAGE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertCommandSuccess(scheduleCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Executes a {@code ScheduleCommand} with the given @param schedule @param index @param expectedMessage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * and checks that a {@code CommandException} is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private void assertExecutionFailure(Schedule schedule, Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(schedule, index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertCommandFailure(scheduleCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TodoCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code TodoCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void execute_newTodo_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        expectedModel.addTodo(validTodo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(new TodoCommand(validTodo), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                String.format(TodoCommand.MESSAGE_SUCCESS, validTodo), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TodoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void constructor_nullTodo_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        new TodoCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void execute_todoAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        ModelStubAcceptingTodoAdded modelStub \u003d new ModelStubAcceptingTodoAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        CommandResult commandResult \u003d new TodoCommand(validTodo).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertEquals(String.format(TodoCommand.MESSAGE_SUCCESS, validTodo), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertEquals(Arrays.asList(validTodo), modelStub.todosAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void execute_duplicateTodo_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo validTodo \u003d new TodoBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand(validTodo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTodo(validTodo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        thrown.expectMessage(todoCommand.MESSAGE_DUPLICATE_TODO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        todoCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo task1 \u003d new TodoBuilder().withTitle(\"Task1\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo task2 \u003d new TodoBuilder().withTitle(\"Task2\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        TodoCommand addTask1Command \u003d new TodoCommand(task1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        TodoCommand addTask2Command \u003d new TodoCommand(task2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(addTask1Command.equals(addTask1Command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        TodoCommand addTask1CommandCopy \u003d new TodoCommand(task1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(addTask1Command.equals(addTask1CommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(addTask1Command.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(addTask1Command.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // different todo -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(addTask1Command.equals(addTask2Command));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void importPersonsFromAddressBook(Path importFilePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean addPersonsToAddressBook(ReadOnlyAddressBook addressBookToImported) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void exportFilteredAddressBook(Path exportFilePath) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void exportAddressBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void exportPerson(Person person) throws IOException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ObservableList\u003cTodo\u003e getFilteredTodoList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void finishTodo(Todo todo) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void updateFilteredTodoList(Predicate\u003cTodo\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * A Model stub that contains a single todo task."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private class ModelStubWithTodo extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        private final Todo todo;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        ModelStubWithTodo(Todo todo) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            this.todo \u003d todo;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return this.todo.isSameTodo(todo);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * A Model stub that always accept the todo being added."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private class ModelStubAcceptingTodoAdded extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        final ArrayList\u003cTodo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public boolean hasTodo(Todo todo) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return todosAdded.stream().anyMatch(todo::isSameTodo);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void addTodo(Todo todo) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            requireNonNull(todo);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            todosAdded.add(todo);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            // called by {@code TodoCommand#execute()}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 282,
      "jitwei98": 3,
      "junweiljw": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddAlias(person));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parseCommand_exportall() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(parser.parseCommand(ExportAllCommand.COMMAND_WORD + \" csv\") instanceof ExportAllCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parseCommand_export() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(parser.parseCommand(ExportCommand.COMMAND_WORD + \" some_filename.xml\") instanceof ExportCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND + \"\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                    + WrongCommandSuggestion.NO_SUGGESTION,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                pe.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parseCommand_schedule() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(\"y 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(parser.parseCommand(\"z 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND + System.lineSeparator()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + WrongCommandSuggestion.NO_SUGGESTION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 34,
      "driedmelon": 10,
      "jitwei98": 11,
      "-": 145
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ClearScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.ClearScheduleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ClearScheduleCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private ClearScheduleCommandParser parser \u003d new ClearScheduleCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_validArgs_returnsClearScheduleCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ClearScheduleCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                ClearScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "junweiljw": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertParseFailure(parser, \"1234567890123\", MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportAllCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportAllCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ExportAllCommandParser parser \u003d new ExportAllCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_filetype_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final String userInput \u003d \"csv\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final Filetype filetype \u003d new Filetype(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseSuccess(parser, userInput, new ExportAllCommand(filetype));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_missingNotNullField_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final String userInput \u003d ExportAllCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportAllCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_missingNotNullField_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Path filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportCommand expectedCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        filePath \u003d Paths.get(\"data\", \"testExportFile.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedCommand \u003d new ExportCommand(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // parse user input without whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseSuccess(parser, \" testExportFile.xml\", expectedCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // parse user input with whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseSuccess(parser, \"  testExportFile.xml    \", expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_invalidFilename_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // wrong filetype"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, \"testExportFile.pdf\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // no extension"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, \"testExportFile\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FinishTodoCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.FinishTodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * outside of the FinishTodoCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * same path through the FinishTodoCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class FinishTodoCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private FinishTodoCommandParser parser \u003d new FinishTodoCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void parse_validArgs_returnsFinishTodoCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FinishTodoCommand(INDEX_FIRST_TODO));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FinishTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_missingNotNullField_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Path filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ImportCommand expectedCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        filePath \u003d Paths.get(\"data\", \"testImportFile.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedCommand \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // parse user input without whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseSuccess(parser, \" testImportFile.xml\", expectedCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // parse user input with whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseSuccess(parser, \"  testImportFile.xml    \", expectedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parse_invalidFilename_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // wrong filetype"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, \"testImportFile.pdf\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // no extension"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertParseFailure(parser, \"testImportFile\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MatchScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_MATCH1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_MATCH1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INDEX_DESC_MATCH1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_MATCH1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_MATCH1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MATCH1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MATCH1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.MatchScheduleCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class MatchScheduleCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private MatchScheduleCommandParser parser \u003d new MatchScheduleCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, INDEX_DESC_MATCH1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidIndexes_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"-5\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"0\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // invalid arguments being parsed as index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"abc\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // invalid prefix being parsed as index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"-5 k/bob\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"1\", TheDate.MESSAGE_DATE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + INVALID_START_TIME_DESC + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"1\", Time.MESSAGE_TIME_CONSTRAINTS); // invalid start time"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + INVALID_END_TIME_DESC + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"1\", Time.MESSAGE_TIME_CONSTRAINTS); // invalid end time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // valid date followed by invalid date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_MATCH1 + INVALID_DATE_DESC + START_TIME_DESC_MATCH1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_MATCH1 + \" \" + PREFIX_INDEX + \"1\", TheDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC + INVALID_START_TIME_DESC + INVALID_END_TIME_DESC + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + \"1\", TheDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String userInput \u003d DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + targetIndex.getOneBased();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cIndex\u003e listIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        listIndex.add(targetIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        MatchScheduleCommand expectedCommand \u003d new MatchScheduleCommand(new TheDate(VALID_DATE_MATCH1),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new Time(VALID_START_TIME_MATCH1), new Time (VALID_END_TIME_MATCH1), listIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_multipleIndexSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex1 \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex2 \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String userInput \u003d DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + targetIndex1.getOneBased() + \" \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + targetIndex2.getOneBased();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cIndex\u003e listIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        listIndex.add(targetIndex1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        listIndex.add(targetIndex2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        MatchScheduleCommand expectedCommand \u003d new MatchScheduleCommand(new TheDate(VALID_DATE_MATCH1),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new Time(VALID_START_TIME_MATCH1), new Time (VALID_END_TIME_MATCH1), listIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String userInput \u003d INVALID_DATE_DESC + DATE_DESC_MATCH1 + START_TIME_DESC_MATCH1 + END_TIME_DESC_MATCH1 + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + PREFIX_INDEX + targetIndex.getOneBased();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        List\u003cIndex\u003e listIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        listIndex.add(targetIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        MatchScheduleCommand expectedCommand \u003d new MatchScheduleCommand(new TheDate(VALID_DATE_MATCH1),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new Time(VALID_START_TIME_MATCH1), new Time (VALID_END_TIME_MATCH1), listIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.Filetype;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Filetype VALID_FILETYPE \u003d new Filetype(\"csv\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parseFiletype_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ParserUtil.parseFiletype(\"abc\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parseFiletype_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFiletype(null));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void parseFiletype_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(VALID_FILETYPE, ParserUtil.parseFiletype(\"csv\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(VALID_FILETYPE, ParserUtil.parseFiletype(\"  csv  \"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 23,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ReminderCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGENDA_DESC_REMINDER1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_REMINDER1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_REMINDER2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGENDA_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_REMINDER1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_REMINDER2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_REMINDER1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_REMINDER2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_AGENDA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_TIME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_TITLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.REMINDER1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Agenda;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private ReminderCommandParser parser \u003d new ReminderCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder expectedReminder \u003d new ReminderBuilder(REMINDER1).withTitle(VALID_REMINDER1_TITLE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + TIME_DESC_REMINDER1 + AGENDA_DESC_REMINDER1, new ReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_REMINDER2 + TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + TIME_DESC_REMINDER1 + AGENDA_DESC_REMINDER1, new ReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER2 + DATE_DESC_REMINDER1"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + TIME_DESC_REMINDER1 + AGENDA_DESC_REMINDER1, new ReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // multiple times - last time accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER2"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + TIME_DESC_REMINDER1 + AGENDA_DESC_REMINDER1, new ReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // multiple agendas - last agenda accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER2 + AGENDA_DESC_REMINDER1, new ReminderCommand(expectedReminder));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, VALID_REMINDER1_TITLE + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_REMINDER1 + VALID_REMINDER1_DATE + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // missing time prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1 + VALID_REMINDER1_TIME"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // missing agenda prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + VALID_REMINDER1_AGENDA, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, VALID_REMINDER1_TITLE + VALID_REMINDER1_DATE + VALID_REMINDER1_TIME"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + VALID_REMINDER1_AGENDA, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1, Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_REMINDER1 + INVALID_DATE_DESC + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1 + INVALID_TIME_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1, Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid agenda"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_REMINDER1 + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + INVALID_AGENDA_DESC, Agenda.MESSAGE_AGENDA_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EVENT1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_EVENT2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_EVENT1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_EVENT2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_EVENT1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_EVENT2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EARLY_END_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LATE_START_TIME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_EVENT1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_EVENT2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EVENT1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EVENT2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_EVENT1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_EVENT2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_EVENT1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_EVENT2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_EVENT1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_EVENT2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.EventName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.testutil.ScheduleBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ScheduleCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private ScheduleCommandParser parser \u003d new ScheduleCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no date specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + START_TIME_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no start time specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no end time specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no event name specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"0\" + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + START_TIME_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, TheDate.MESSAGE_DATE_CONSTRAINTS); // invalid date followed by valid fields"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + INVALID_START_TIME_DESC + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, Time.MESSAGE_TIME_CONSTRAINTS); // invalid start time with other valid fields"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1 + INVALID_END_TIME_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, Time.MESSAGE_TIME_CONSTRAINTS); // invalid end time with other valid fields"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1 + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + INVALID_EVENT_NAME_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                EventName.MESSAGE_EVENT_NAME_CONSTRAINTS); // invalid event name with other valid fields"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // valid date followed by invalid date. The test case for invalid date followed by valid date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_DATE_EVENT1 + INVALID_DATE_DESC + START_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT1 + EVENT_NAME_DESC_EVENT1, TheDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC + INVALID_START_TIME_DESC + END_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + EVENT_NAME_DESC_EVENT1, TheDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //start time is later than end time"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DATE_DESC_EVENT1 + INVALID_LATE_START_TIME_DESC"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + INVALID_EARLY_END_TIME_DESC + EVENT_NAME_DESC_EVENT1, Schedule.MESSAGE_START_END_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() { //accepts last"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT1 + EVENT_NAME_DESC_EVENT1 + DATE_DESC_EVENT2 + START_TIME_DESC_EVENT2"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT2 + EVENT_NAME_DESC_EVENT2;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Schedule schedule \u003d new ScheduleBuilder().withTheDate(VALID_DATE_EVENT2)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withStartTime(VALID_START_TIME_EVENT2)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withEndTime(VALID_END_TIME_EVENT2)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_EVENT2).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(schedule, targetIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() { //invalid date followed by valid"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        // invalid date followed by valid date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATE_DESC + START_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT1 + EVENT_NAME_DESC_EVENT1 + DATE_DESC_EVENT2 + START_TIME_DESC_EVENT2"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT2 + EVENT_NAME_DESC_EVENT2;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Schedule schedule \u003d new ScheduleBuilder().withTheDate(VALID_DATE_EVENT1)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withStartTime(VALID_START_TIME_EVENT1)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withEndTime(VALID_END_TIME_EVENT1)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_EVENT1).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ScheduleCommand expectedCommand \u003d new ScheduleCommand(schedule, targetIndex);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public void parse_allFieldsSpecified_success() { //all valid"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_EVENT1 + START_TIME_DESC_EVENT1"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                + END_TIME_DESC_EVENT1 + EVENT_NAME_DESC_EVENT1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        Schedule schedule \u003d new ScheduleBuilder().withTheDate(VALID_DATE_EVENT1)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withStartTime(VALID_START_TIME_EVENT1)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withEndTime(VALID_END_TIME_EVENT1)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                .withEventName(VALID_EVENT_NAME_EVENT1).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        ScheduleCommand command \u003d new ScheduleCommand(schedule, targetIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertParseSuccess(parser, userInput, command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TodoCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_TASK1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_TASK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_TASK2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TASK1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.TASK1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private TodoCommandParser parser \u003d new TodoCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo expectedTodo \u003d new TodoBuilder(TASK1).withTitle(VALID_TITLE_TASK1).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_TASK1 + CONTENT_DESC_TASK1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                new TodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // multiple titles - last title accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TASK2 + CONTENT_DESC_TASK1 + TITLE_DESC_TASK1,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                new TodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // multiple content - last content accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseSuccess(parser, TITLE_DESC_TASK1 + CONTENT_DESC_TASK2 + CONTENT_DESC_TASK1,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                new TodoCommand(expectedTodo));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // missing title prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_TASK1 + CONTENT_DESC_TASK1, expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // missing content prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseFailure(parser, TITLE_DESC_TASK2 + VALID_CONTENT_TASK2, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseFailure(parser, VALID_TITLE_TASK1 + VALID_CONTENT_TASK1, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertParseFailure(parser, INVALID_TITLE_DESC + CONTENT_DESC_TASK1, Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/suggestions/InputCommandSuggestionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class InputCommandSuggestionTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private InputCommandSuggestion ics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private ArrayList\u003cString\u003e suggestedCommands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ics \u003d new InputCommandSuggestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void checkValidCharacter() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.checkValidCharacter(\u0027a\u0027));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.checkValidCharacter(\u0027d\u0027));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.checkValidCharacter(\u0027d\u0027));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(ics.checkValidCharacter(\u0027s\u0027));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(ics.checkValidCharacter(\u0027\\r\u0027));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void checkValidString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.checkValidString(\"add\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.checkValidString(\"todo\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.checkValidString(\"schedule\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(ics.checkValidString(\"adds\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(ics.checkValidString(\"z\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void removeSearchCharacter() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.removeSearchCharacter());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ics.checkValidCharacter(\u0027a\u0027);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.removeSearchCharacter());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ics.checkValidCharacter(\u0027a\u0027);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        ics.checkValidCharacter(\u0027a\u0027);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.removeSearchCharacter());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(ics.removeSearchCharacter());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void getSuggestedCommands() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands.add(\"add\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getSuggestions(\"a\"), suggestedCommands);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getSuggestions(\"a n/JOHN DOE\"), suggestedCommands);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertNotEquals(ics.getSuggestions(\"az n/JOHN DOE\"), suggestedCommands);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands.add(ExportCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands.add(ExportAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        suggestedCommands.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getSuggestions(\"e\"), suggestedCommands);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertNotEquals(ics.getSuggestions(\"ex\"), suggestedCommands);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void getCommandParameters() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"add\"), AddCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"delete\"), DeleteCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"edit\"), EditCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"exportall\"), ExportAllCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"export\"), ExportCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"find\"), FindCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"schedule\"), ScheduleCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"select\"), SelectCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"todo\"), TodoCommand.COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"clear\"), InputCommandSuggestion.NO_REQUIRED_PARAMETERS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(ics.getCommandParameters(\"xx\"), InputCommandSuggestion.INVALID_COMMAND_PARAMETERS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/suggestions/StringSimilarityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class StringSimilarityTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private StringSimilarity stringsimilarity \u003d new StringSimilarity();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void editDistance() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"add\" -\u003e \"add\", has edit distance of 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"add\", \"add\"), 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"\" -\u003e \"add\", has edit distance of 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"\", \"add\"), 3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"ADD\" -\u003e \"add\", has edit distance of 3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"ADD\", \"add\"), 3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"sched\" -\u003e \"schedule\", has edit distance of 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"sched\", \"schedule\"), 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"lister\" -\u003e \"list\", has edit distance of 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"lister\", \"list\"), 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"schadule\" -\u003e \"schedule\" has edit distance of 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"schadule\", \"schedule\"), 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"asdf\" -\u003e \"add\" has edit distance of 2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(stringsimilarity.editDistance(\"asdf\", \"add\"), 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/suggestions/TrieTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ClearScheduleCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ExportAllCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class TrieTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private Trie dictionary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary \u003d new Trie();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void insert() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void searchChar() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // check if \u0027add\u0027 exists"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027a\u0027));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027d\u0027));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027d\u0027));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // check if \u0027s\u0027 exists after \u0027add\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(dictionary.search(\u0027s\u0027));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void searchString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // check if \u0027add\u0027 exists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\"add\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void moveUpCrawler() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        //check if first character \u0027a\u0027 is valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027a\u0027));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        //check if first character \u0027a\u0027 is still valid after using moveSearchCrawlerToParent"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027a\u0027));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        //check if moving back to parent once after it is already at the root causes issues"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027a\u0027));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void searchStringMultipleValuesInTrie() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\"add\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\"history\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\"help\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void searchCharMultipleValuesInTrie() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027a\u0027));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027d\u0027));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(dictionary.search(\u0027h\u0027));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027h\u0027));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027i\u0027));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(dictionary.search(\u0027e\u0027)); //\u0027hie\u0027 does not exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027s\u0027)); //\u0027his\u0027 exists"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent(); //\u0027hi\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.moveSearchCrawlerToParent(); //\u0027h\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(dictionary.search(\u0027e\u0027)); //\u0027he\u0027 exists"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void getListOfWords() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ExportAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(TodoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        List\u003cString\u003e eWordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        eWordList.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        eWordList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        eWordList.add(ExportAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(eWordList.containsAll(dictionary.getListOfWords(\"e\")));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(eWordList.containsAll(dictionary.getListOfWords(\"a\")));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        List\u003cString\u003e exWordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        exWordList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        exWordList.add(ExportAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(exWordList.containsAll(dictionary.getListOfWords(\"ex\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertFalse(exWordList.containsAll(dictionary.getListOfWords(\"e\")));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void withSameStartingNames_getListOfWords() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        dictionary.insert(ClearScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        List\u003cString\u003e cWordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        cWordList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        cWordList.add(ClearScheduleCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertTrue(cWordList.containsAll(dictionary.getListOfWords(\"c\")));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/suggestions/WrongCommandSuggestionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "package seedu.address.logic.suggestions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "public class WrongCommandSuggestionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private Suggestion wrongCommandSuggestion \u003d new WrongCommandSuggestion();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    private ArrayList\u003cString\u003e outputCommandList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        outputCommandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void getSuggestion_noSuggestions() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"abcDEFGH\" input is not similar to any command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertNull(wrongCommandSuggestion.getSuggestions(\"abcDEFGH\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void getSuggestion_oneSuggestion() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // \"histary\" input is similar to history command and has only one suggestion available"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        outputCommandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"histary\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void getSuggestion_multipleSuggestions() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        outputCommandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        outputCommandList.add(TodoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        outputCommandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(outputCommandList, wrongCommandSuggestion.getSuggestions(\"wido\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // TODO: implement proper test for todo feature"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        public ObservableList\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            return null; }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 6,
      "-": 110,
      "junweiljw": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FiletypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "//@@author jitwei98"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "public class FiletypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Filetype(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void constructor_invalidFiletype_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String invalidFiletype \u003d \"ccc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Filetype(invalidFiletype));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void isValidFiletype() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // null filetype"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Filetype.isValidFiletype(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // invalid filetype"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(Filetype.isValidFiletype(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(Filetype.isValidFiletype(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(Filetype.isValidFiletype(\"coconut\")); // not \"csv\" or \"vcf\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // valid filetype"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(Filetype.isValidFiletype(\"csv\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(Filetype.isValidFiletype(\"vcf\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.export.ExportManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"importTypicalAddressbook.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_TWO_PERSONS_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"importTwoPersons.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final Path IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            \"sandbox\", \"importEmptyAddressbook.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportTypicalPersonsXmlFile() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportManager exportManager \u003d new ExportManager(addressBook.getPersonList(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager.saveFilteredPersons();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportTwoPersonsXmlFile() throws IOException, IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ExportManager exportManager \u003d new ExportManager(addressBook.getPersonList(), IMPORT_TWO_PERSONS_FILE_PATH);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        exportManager.saveFilteredPersons();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportEmptyXmlFile() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ReadOnlyAddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ObservableList\u003cPerson\u003e filteredPersons \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Cannot export using ExportManager since the filteredPersons is empty"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        FileUtil.createIfMissing(IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        XmlFileStorage.saveDataToFile(IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                new XmlSerializableAddressBook(filteredPersons));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void importPersonsFromAddressBook_addTwoPersons_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel.addPerson(AMY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel.addPerson(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.importPersonsFromAddressBook(IMPORT_TWO_PERSONS_FILE_PATH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void importPersonsFromAddressBook_noPersonAdded_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.importPersonsFromAddressBook(IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void importPersonsFromAddressBook_addTypicalPersons_success()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.importPersonsFromAddressBook(IMPORT_TYPICAL_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        // Cannot compare the whole modelManager since todos are not transferred"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(modelManager.getFilteredPersonList(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void importPersonsFromAddressBook_addEmptyAddressBook_success() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ModelManager expectedModel \u003d modelManager;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.importPersonsFromAddressBook(IMPORT_EMPTY_ADDRESSBOOK_FILE_PATH);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(modelManager, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void importPersonsFromAddressBook_nullImportFilePath_throwsNullPointerException()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.importPersonsFromAddressBook(null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void addPersonsToAddressBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        AddressBook addressBookwithMorePerson \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel.addPerson(ALICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        expectedModel.addPerson(BENSON);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.addPersonsToAddressBook(addressBookwithMorePerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertTrue(modelManager.equals(expectedModel));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportFilteredAddressBook_nullExportFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.exportFilteredAddressBook(null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void exportFilteredAddressBook_emptyAddressBook_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.resetData(new AddressBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        modelManager.exportFilteredAddressBook(Paths.get(\"notGonnaExport.xml\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 135,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\"abc\")); // alphabets in time field"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\"1159pm\")); // 12-hour format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // valid content"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Time.isValidTime(\"2359\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/AgendaTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class AgendaTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Agenda(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_invalidAgenda_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String invalidAgenda \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Agenda(invalidAgenda));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void isValidAgenda() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null agenda"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Agenda.isValidAgenda(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid agenda"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Agenda.isValidAgenda(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Agenda.isValidAgenda(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Agenda.isValidAgenda(\"To discuss milestone 1.4\")); // correct"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Agenda.isValidAgenda(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Agenda.isValidAgenda(\"To discuss the importance of \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + \"having the meeting minutes feature\")); // long input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Date.isValidDate(\"abc\")); // contains alphabets"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Date.isValidDate(\"#$@!#@!\")); // contains characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Date.isValidDate(\"08021996\")); // DDMMYYYYformat"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/ReminderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.REMINDER1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.REMINDER2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void isSameReminder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(REMINDER1.isSameReminder(REMINDER1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.isSameReminder(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder reminder1Copy \u003d new ReminderBuilder(REMINDER1).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(REMINDER1.equals(reminder1Copy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(REMINDER1.equals(REMINDER1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.equals(REMINDER2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder editedReminder1 \u003d new ReminderBuilder(REMINDER1).withTitle(VALID_REMINDER2_TITLE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.equals(editedReminder1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        editedReminder1 \u003d new ReminderBuilder(REMINDER1).withDate(VALID_REMINDER2_DATE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.equals(editedReminder1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        editedReminder1 \u003d new ReminderBuilder(REMINDER1).withTime(VALID_REMINDER2_TIME).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(REMINDER1.equals(editedReminder1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // different agenda -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        //editedReminder1 \u003d new ReminderBuilder(REMINDER1).withAgenda(VALID_REMINDER2_AGENDA).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        //assertFalse(REMINDER1.equals(editedReminder1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/TimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(invalidTime));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Time.isValidTime(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\"abc\")); // alphabets in time field"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Time.isValidTime(\"1159pm\")); // 12-hour format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // valid content"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Time.isValidTime(\"2359\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/reminder/TitleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        // valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS1231 Meeting\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Title.isValidTitle(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertTrue(Title.isValidTitle(\"CS1231 Meeting to discuss group work in a solo module\")); // long content"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todo/ContentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class ContentTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Content(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void constructor_invalidContent_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String invalidContent \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidContent));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void isValidContent() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // null content"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // invalid content"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(Content.isValidContent(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(Content.isValidContent(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // valid content"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(Content.isValidContent(\"Buy tomato at NTUC otw back to Tembusu\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(Content.isValidContent(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(Content.isValidContent(\"Buy tomato, cucumber, potato, sweets, chocolate at NTUC.\")); // long content"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todo/TitleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // invalid titles"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // valid titles"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Buy tomato\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(Title.isValidTitle(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Buy tomato, cucumber, potato, sweets, chocolate, vegie\")); // long title"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/todo/TodoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.model.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.TASK1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void isSameTodo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(TASK1.isSameTodo(TASK1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(TASK1.isSameTodo(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo task1Copy \u003d new TodoBuilder(TASK1).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(TASK1.equals(task1Copy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertTrue(TASK1.equals(TASK1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(TASK1.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(TASK1.equals(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // different todo -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(TASK1.equals(TASK2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo editedTask1 \u003d new TodoBuilder(TASK1).withTitle(VALID_TITLE_TASK2).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        // different content -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        editedTask1 \u003d new TodoBuilder(TASK1).withContent(VALID_CONTENT_TASK2).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertFalse(TASK1.equals(editedTask1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void getAddressBookBackupPath() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertNotNull(storageManager.getAddressBookBackupPath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void compareAddressBookBackupAndFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String filePath \u003d storageManager.getAddressBookFilePath().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String backupPath \u003d storageManager.getAddressBookBackupPath().toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(filePath + \".backup\", backupPath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 12,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private static final List\u003cXmlAdaptedSchedule\u003e VALID_SCHEDULES \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                        VALID_SCHEDULES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                VALID_SCHEDULES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                        VALID_SCHEDULES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                VALID_SCHEDULES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                        VALID_SCHEDULES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                VALID_SCHEDULES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                        VALID_SCHEDULES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                VALID_SCHEDULES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_SCHEDULES);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 18,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        backupAddressBook(null, \"SomeBackupFile.xml\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Backups {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                    .backupAddressBook(addressBook);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 17,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DEFAULT_SCHEDULE \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /*\"Date: 09092018 StartTime \u003d 1230 EndTime \u003d 1400 EventName \u003d CS1231 Exam\";*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Set\u003cSchedule\u003e schedules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        schedules \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        schedules \u003d new HashSet\u003c\u003e(personToCopy.getSchedules());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Person(name, phone, email, address, tags, schedules);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 7,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     * Returns an add command alias string for adding the {@code person}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public static String getAddAlias(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 7,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReminderBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Agenda;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * A utility class to help with building Reminder objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Typical mundane meetings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"08022018\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"2359\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String DEFAULT_AGENDA \u003d \"To discuss the next EASY presentation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Time time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private Agenda agenda;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        time \u003d new Time(DEFAULT_TIME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        agenda \u003d new Agenda(DEFAULT_AGENDA);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        title \u003d reminderToCopy.getTitle();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        date \u003d reminderToCopy.getDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        time \u003d reminderToCopy.getTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        agenda \u003d reminderToCopy.getAgenda();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Sets the {@code Title} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Sets the {@code Date} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderBuilder withDate(String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Sets the {@code Time} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderBuilder withTime(String time) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.time \u003d new Time(time);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Sets the {@code Agenda} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public ReminderBuilder withAgenda(String agenda) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        this.agenda \u003d new Agenda(agenda);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new Reminder(title, date, time, agenda);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReminderUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AGENDA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * A utility class for Reminder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns a reminder command string for adding the {@code reminder}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static String getReminderCommand(Reminder reminder) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return ReminderCommand.COMMAND_WORD + \" \" + getReminderDetails(reminder);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns a reminder command alias string for adding the {@code reminder}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static String getReminderAlias(Reminder reminder) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return ReminderCommand.COMMAND_ALIAS + \" \" + getReminderDetails(reminder);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns the part of command string for the given {@code reminder}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static String getReminderDetails(Reminder reminder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        sb.append(PREFIX_TITLE + reminder.getTitle().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        sb.append(PREFIX_DATE + reminder.getDate().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        sb.append(PREFIX_START_TIME + reminder.getTime().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        sb.append(PREFIX_AGENDA + reminder.getAgenda().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.EventName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.TheDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * A utility class to help with building Schedule objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class ScheduleBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"09092018\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"1230\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"1400\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"CS1231 Exam\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private TheDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Time startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private Time endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        date \u003d new TheDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        startTime \u003d new Time(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        endTime \u003d new Time(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_EVENT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Sets the {@code TheDate} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleBuilder withTheDate(String date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.date \u003d new TheDate(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Sets the {@code start Time} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.startTime \u003d new Time(startTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Sets the {@code end Time} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.endTime \u003d new Time(endTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     * Sets the {@code EventName} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public ScheduleBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        this.eventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public Schedule build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new Schedule(date, startTime, endTime, eventName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    //@@author linnnruoo"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns the todo task in the {@code model}\u0027s todo list at {@code index}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static Todo getTodo(Model model, Index index) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return model.getFilteredTodoList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns the reminder in the {@code model}\u0027s reminder list at {@code index}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static Reminder getReminder(Model model, Index index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return model.getFilteredReminderList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 16,
      "-": 54,
      "junweiljw": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TodoBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Content;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * A utility class to help with building Todo objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Eat my own dog food which is not very nice. I hate it so much.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"The arts of debugging\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        content \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Initializes the TodoBuilder with the data of {@code todoToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoBuilder(Todo todoToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        content \u003d todoToCopy.getContent();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        title \u003d todoToCopy.getTitle();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Sets the {@code Content} of the {@code Todo} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoBuilder withContent(String content) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.content \u003d new Content(content);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Sets the {@code Title} of the {@code Todo} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public TodoBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public Todo build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new Todo(title, content);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TodoUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * A utility class for Todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns a todo command string for adding the {@code todo}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static String getTodoCommand(Todo todo) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return TodoCommand.COMMAND_WORD + \" \" + getTodoDetails(todo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns an add command alias string for adding the {@code todo}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static String getAddAlias(Todo todo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return TodoCommand.COMMAND_ALIAS + \" \" + getTodoDetails(todo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns the part of command string for the given {@code todo}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static String getTodoDetails(Todo todo) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        sb.append(PREFIX_TITLE + todo.getTitle().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        sb.append(PREFIX_CONTENT + todo.getContent().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Index INDEX_FIRST_TODO \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Index INDEX_SECOND_TODO \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Index INDEX_THIRD_TODO \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalReminders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_AGENDA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_AGENDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " * A utility class containing a list of {@code Reminder} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final Reminder REMINDER_A \u003d new ReminderBuilder().withTitle(\"Typical mundane meeting\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withDate(\"08022018\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withTime(\"2359\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withAgenda(\"Just to fulfill mandatory project requirements\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final Reminder REMINDER_B \u003d new ReminderBuilder().withTitle(\"Final mundane meeting\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withDate(\"05122018\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withTime(\"2300\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withAgenda(\"To say goodbye and thank you to members\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    // Manually added - reminder\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final Reminder REMINDER1 \u003d new ReminderBuilder().withTitle(VALID_REMINDER1_TITLE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withDate(VALID_REMINDER1_DATE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withTime(VALID_REMINDER1_TIME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withAgenda(VALID_REMINDER1_AGENDA).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final Reminder REMINDER2 \u003d new ReminderBuilder().withTitle(VALID_REMINDER2_TITLE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withDate(VALID_REMINDER2_DATE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withTime(VALID_REMINDER2_TIME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            .withAgenda(VALID_REMINDER2_AGENDA).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static final String KEYWORD_MATCHING_REMINDER \u003d \"mundane\"; // A keyword that matches REMINDER_A"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private TypicalReminders() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical reminders."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        for (Reminder reminder : getTypicalReminders()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(REMINDER_A, REMINDER_B));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSchedules.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "import seedu.address.model.person.Schedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " * A utility class containing a list of {@code Schedule} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "driedmelon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "public class TypicalSchedules {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Schedule CS1231 \u003d new ScheduleBuilder().withTheDate(\"09092018\").withStartTime(\"1230\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            .withEndTime(\"1400\").withEventName(\"CS1231 Exam\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Schedule GERQUIZ \u003d new ScheduleBuilder().withTheDate(\"09092018\").withStartTime(\"0900\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            .withEndTime(\"1000\").withEventName(\"GER QUIZ\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //         .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    //            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    private TypicalSchedules() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "driedmelon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    public static List\u003cSchedule\u003e getTypicalSchedules() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS1231));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTodos.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_TASK1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_TASK2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " * A utility class containing a list of {@code Todo} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TypicalTodos {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Todo TASKA \u003d new TodoBuilder().withTitle(\"Buy dog food\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            .withContent(\"EAT you own dog food please\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Todo TASKB \u003d new TodoBuilder().withTitle(\"Buy kitty food\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            .withContent(\"I will buy it otw back to school\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    // Manually added - todo task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Todo TASK1 \u003d new TodoBuilder().withTitle(VALID_TITLE_TASK1)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            .withContent(VALID_CONTENT_TASK1).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final Todo TASK2 \u003d new TodoBuilder().withTitle(VALID_TITLE_TASK2)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            .withContent(VALID_CONTENT_TASK2).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static final String KEYWORD_MATCHING_TASKC \u003d \"TASKC\"; // A keyword that matches TASK2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private TypicalTodos() {} // prevents instantiation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical todo tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        for (Todo todoTask : getTypicalTodos()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "            ab.addTodo(todoTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public static List\u003cTodo\u003e getTypicalTodos() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TASKA, TASKB));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void commandBox_handleTabPressed_forSingleSuggestion() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandBoxHandle.pressTab(\"a\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(\"add\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void commandBox_handleTabPressed_forSuggestionWithParameters() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandBoxHandle.pressTab(\"a n/JOHN DOE\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(\"add n/JOHN DOE\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void commandBox_handleTabPressed_forMultipleSuggestion() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandBoxHandle.pressTab(\"e\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(\"e\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    public void commandBox_handleTabPressed_forInvalidCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        commandBoxHandle.pressTab(\"z\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertEquals(\"z\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elstonayx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 25,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertEquals(\"Welcome to JitHub!\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "            new AddressBookChangedEvent(new AddressBookBuilder().withPerson(ALICE).build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private static final int INITIAL_TOTAL_PERSONS \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_TOTAL_PERSONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                String.format(TOTAL_PERSONS_STATUS, INITIAL_TOTAL_PERSONS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                String.format(TOTAL_PERSONS_STATUS, EVENT_STUB.data.getPersonList().size()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * total persons matches that of {@code expectedTotalPersonsStatus}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                                        String expectedTotalPersonStatus) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(expectedTotalPersonStatus, statusBarFooterHandle.getTotalPersonsStatus());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jitwei98": 16,
      "-": 70
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, AddCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 3,
      "jitwei98": 1,
      "-": 246
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        statusBarFooterHandle.rememberTotalPersonsStatus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //TODO CHANGE TO CALENDAR PANEL"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location and total person list"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * remains the same."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(handle.isTotalPersonsStatusChanged());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jitwei98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * Asserts that the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     * number of persons in the address book, while the save location remains the same."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "    protected void assertStatusBarChangedExceptSaveLocation() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_STATUS, totalPersons), handle.getTotalPersonsStatus());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "driedmelon"
        },
        "content": "        assertEquals(\"Welcome to JitHub!\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_STATUS, getModel().getAddressBook().getPersonList().size()),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "                 getStatusBarFooter().getTotalPersonsStatus());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "driedmelon": 3,
      "jitwei98": 23,
      "-": 289
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, ClearCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 3,
      "jitwei98": 1,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, DeleteCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jitwei98"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 3,
      "jitwei98": 1,
      "-": 191
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "            + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, FindCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 3,
      "-": 194
    }
  },
  {
    "path": "src/test/java/systemtests/ReminderCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGENDA_DESC_REMINDER1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_REMINDER1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_REMINDER2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGENDA_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_REMINDER1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIME_DESC_REMINDER2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_REMINDER1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_REMINDER2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER1_TIME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_TIME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER2_TITLE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.KEYWORD_MATCHING_REMINDER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.REMINDER1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.REMINDER2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import static seedu.address.testutil.TypicalReminders.REMINDER_A;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.person.Time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Agenda;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "import seedu.address.testutil.ReminderUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "//@@author junweiljw"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "public class ReminderCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* ---------------------- Perform reminder operations on the shown unfiltered list ------------------------- */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a reminder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Reminder toAdd \u003d REMINDER1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String command \u003d \"   \" + ReminderCommand.COMMAND_WORD + \"  \" + TITLE_DESC_REMINDER1 + \"  \" + DATE_DESC_REMINDER1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + \" \" + TIME_DESC_REMINDER1 + AGENDA_DESC_REMINDER1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a reminder with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        toAdd \u003d REMINDER2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + DATE_DESC_REMINDER2 + AGENDA_DESC_REMINDER2 + TITLE_DESC_REMINDER2"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + TIME_DESC_REMINDER2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a reminder with all fields same as another reminder in the address book except title -\u003e added */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        toAdd \u003d new ReminderBuilder(REMINDER1).withTitle(VALID_REMINDER2_TITLE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + DATE_DESC_REMINDER1 + TIME_DESC_REMINDER1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a reminder with content the same as another reminder in the address book except date and time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        toAdd \u003d new ReminderBuilder(REMINDER1).withDate(VALID_REMINDER2_DATE).withTime(VALID_REMINDER2_TIME).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderUtil.getReminderCommand(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a reminder with content the same as another reminder in the address book except time -\u003e added */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        toAdd \u003d new ReminderBuilder(REMINDER1).withTime(VALID_REMINDER2_TIME).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderUtil.getReminderCommand(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* ------------------------ Perform reminder operation on the shown filtered list -------------------------- */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: filters the reminder list before adding -\u003e added */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_REMINDER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(REMINDER_A);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* --------------------------------- Perform invalid reminder operations ----------------------------------- */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a duplicate reminder -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderUtil.getReminderCommand(REMINDER_A);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, ReminderCommand.MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: add a different reminder with same date and time -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        toAdd \u003d new ReminderBuilder(REMINDER2).withDate(VALID_REMINDER1_DATE).withTime(VALID_REMINDER1_TIME).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderUtil.getReminderCommand(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, ReminderCommand.MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: missing title -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + DATE_DESC_REMINDER2 + TIME_DESC_REMINDER2 + AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: missing date -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + TIME_DESC_REMINDER2 + AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: missing time -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + DATE_DESC_REMINDER2 + AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: missing agenda -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + DATE_DESC_REMINDER2 + TIME_DESC_REMINDER2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d \"reminders \" + ReminderUtil.getReminderDetails(toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, ReminderCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: invalid title -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + INVALID_TITLE_DESC + DATE_DESC_REMINDER2 + TIME_DESC_REMINDER2"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + INVALID_DATE_DESC + TIME_DESC_REMINDER2"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: invalid time -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + DATE_DESC_REMINDER2 + INVALID_TIME_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + AGENDA_DESC_REMINDER2;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, Time.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        /* Case: invalid agenda  -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        command \u003d ReminderCommand.COMMAND_WORD + TITLE_DESC_REMINDER2 + DATE_DESC_REMINDER2 + TIME_DESC_REMINDER2"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "                + INVALID_AGENDA_DESC;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandFailure(command, Agenda.MESSAGE_AGENDA_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Executes the {@code ReminderCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code ReminderCommand} with the details of"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 4. {@code Storage} and {@code ReminderListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void assertCommandSuccess(Reminder toAdd) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(ReminderUtil.getReminderCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Reminder)}. Executes {@code command}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @see ReminderCommandSystemTest#assertCommandSuccess(Reminder)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void assertCommandSuccess(String command, Reminder toAdd) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        expectedModel.addReminder(toAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        String expectedResultMessage \u003d String.format(ReminderCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Reminder)} except asserts that"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 2. {@code Storage} and {@code ReminderListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @see ReminderCommandSystemTest#assertCommandSuccess(String, Reminder)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 4. {@code Storage} and {@code ReminderListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junweiljw"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junweiljw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junweiljw": 205
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        // assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "                + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, SelectCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elstonayx": 4,
      "-": 152
    }
  },
  {
    "path": "src/test/java/systemtests/TodoCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_TASK1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC_TASK2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT_TASK2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_TASK2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.KEYWORD_MATCHING_TASKC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.TASK1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.TASK2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import static seedu.address.testutil.TypicalTodos.TASKB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.logic.commands.TodoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elstonayx"
        },
        "content": "import seedu.address.logic.suggestions.WrongCommandSuggestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.model.todo.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.TodoBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "import seedu.address.testutil.TodoUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "//@@author linnnruoo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "public class TodoCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* ------------------------ Perform todo operations on the shown unfiltered list --------------------------- */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: add a todo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Todo toAdd \u003d TASK1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String command \u003d \"   \" + TodoCommand.COMMAND_WORD + \"  \" + TITLE_DESC_TASK1 + \"  \" + CONTENT_DESC_TASK1 + \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: add a todo task with parameters in reverse order -\u003e added */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        toAdd \u003d TASK2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + CONTENT_DESC_TASK2 + TITLE_DESC_TASK2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: add a todo  with title the same as another todo in the address book except content -\u003e added */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        toAdd \u003d new TodoBuilder(TASK1).withTitle(VALID_TITLE_TASK2).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + TITLE_DESC_TASK2 + CONTENT_DESC_TASK1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: add a todo  with content the same as another todo in the address book except title -\u003e added */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        toAdd \u003d new TodoBuilder(TASK1).withContent(VALID_CONTENT_TASK2).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + TITLE_DESC_TASK1 + CONTENT_DESC_TASK2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* -------------------------- Perform todo operation on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_TASKC);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(TASKB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* ----------------------------------- Perform invalid todo operations ------------------------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: missing title -\u003e rejected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + TITLE_DESC_TASK2;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: missing title -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + CONTENT_DESC_TASK2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, TodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d \"todos \" + TodoUtil.getTodoDetails(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "                + \"\\n\" + String.format(WrongCommandSuggestion.SUGGESTION_HEADER, TodoCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: invalid content -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + TITLE_DESC_TASK1 + INVALID_CONTENT_DESC;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandFailure(command, Content.MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        /* Case: invalid title -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        command \u003d TodoCommand.COMMAND_WORD + INVALID_TITLE_DESC + CONTENT_DESC_TASK1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandFailure(command, Title.MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Executes the {@code TodoCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code TodoCommand} with the details of"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 4. {@code Storage} and {@code TodoListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void assertCommandSuccess(Todo toAdd) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(TodoUtil.getTodoCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Todo)}. Executes {@code command}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @see TodoCommandSystemTest#assertCommandSuccess(Todo)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void assertCommandSuccess(String command, Todo toAdd) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        expectedModel.addTodo(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        String expectedResultMessage \u003d String.format(TodoCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Todo)} except asserts that"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 2. {@code Storage} and {@code TodoListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @see TodoCommandSystemTest#assertCommandSuccess(String, Todo)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 4. {@code Storage} and {@code TodoListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "linnnruoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "linnnruoo": 155,
      "elstonayx": 1
    }
  }
]
