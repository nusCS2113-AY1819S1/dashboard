[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003d Workout Tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-T13-5/main[image:https://travis-ci.org/CS2113-AY1819S1-T13-5/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "image::docs/images/temp_UI.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Hoping to get started on that workout regime you always kept on the back burner? But wait, what\u0027s that other attractive workout you just read about?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have too many workouts to choose from or wish to keep, then this *Workout Tracker* is for you!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a CLI (Command Line Interface) application, so you can save time using your keyboard instead of your mouse to nagivate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Features of Workout Tracker:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** A convenient GUI to easily manage your workouts"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Keep track of future, present and past workouts in a user-friendly way!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** A detailed Progress Tracker of each workout"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** Notifications to keep you reminded consistently!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Workout Tracker was built on AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shouteck": 3,
      "-": 43
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"githubId\": \"sijieg\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"displayName\": \"GOH...JIE\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"authorNames\": [\"SiJieg\",\"sijieg\",\"SJ\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"githubId\": \"garyheng\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"displayName\": \"GAR...HEN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"authorNames\": [\"garyheng\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"githubId\": \"DarylTew\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"displayName\": \"TEW...RYL\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"authorNames\": [\"DarylTew\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"githubId\": \"shouteck\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"displayName\": \"TIN...ECK\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"authorNames\": [\"shouteck\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"githubId\": \"yicheng12\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"displayName\": \"YAN...ENG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \"authorNames\": [\"yicheng12\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    compile \u0027org.jsoup:jsoup:1.10.3\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    compile \"commons-io:commons-io:+\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "sijieg": 5,
      "-": 247
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Workout Tracker was developed by the team below. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d John Doe"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003d\u003d\u003d Ting Shou Teck"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "image::shouteck.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "{empty}[https://github.com/shouteck[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Role: Fake Team Leader +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Goh Si Jie"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "image::sijieg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "{empty}[http://github.com/sijieg[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Tew You Wen, Daryl"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "image::daryltew.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/DarylTew[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003d\u003d\u003d Gary Heng Hui Shen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "image::garyheng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "{empty}[http://github.com/garyheng[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "\u003d\u003d\u003d Yan Yi Cheng"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "image::yicheng12.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "{empty}[http://github.com/yicheng12[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Responsibilities: Data"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 4,
      "shouteck": 4,
      "-": 45,
      "yicheng12": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d Workout Book - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sijieg"
        },
        "content": "// tag::recommend[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003d\u003d\u003d Recommending a workout"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "shouteck"
        },
        "content": "The user input is parsed into invoking a constructor based on the prefixes in the user input in `_RecommendCommandParser_`.There are only three acceptable prefixes. (i.e. `difficulty`, `calories`, `duration`) The instance created is then passed to `_RecommendCommand_` which uses `getFilteredWorkoutList()` and `getFilteredInternalList()` methods of `Model` to generate a random workout to recommend to the user."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sijieg"
        },
        "content": "The sequence diagram of this entire process can be seen below:"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "shouteck"
        },
        "content": "[[fig-RecommendCommandSD]]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "shouteck"
        },
        "content": ".Interactions inside `Logic` component for the *`recommend difficulty/beginner`* command."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "shouteck"
        },
        "content": "image::RecommendCommandSD.PNG[width\u003d\"900\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How recommend executes"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* **Alternative 1 (current choice):** Filters the workout list based on user\u0027s input and randomly generates a workout from that filtered list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** Cons: May not reflect what the user actually wants."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* **Alternative 2:** Use machine learning algorithms."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** Pros: Able to recommend a workout that is more accurate to what the user wants."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** Cons: Complicated to implement. Requires a huge storage to store and record the substantial amount of data that comes from the interactions between the user and the application."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sijieg"
        },
        "content": "// end::recommend[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d User Profile"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sijieg"
        },
        "content": "// tag::profile"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sijieg"
        },
        "content": "The profile window is first being loaded by loading the `_profileWindow.fxml file_`. Thereafter, once the user request to open the profile window, it will then process it."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sijieg"
        },
        "content": "There are 3 ways to open a profile window."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* User types `\"profile\"` in command box"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* User clicks on `profile` on the menu bar"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* User presses the `F2` key"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d User types \"profile\" in command box"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sijieg"
        },
        "content": "After executing the command `profile`, it will create an instance which uses `showProfileRequestEvent` method of `Events`. Then, the `UI` will `handleShowProfileRequestEvent` and the profile window will be opened."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sijieg"
        },
        "content": "[[fig-ProfileCommand]]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sijieg"
        },
        "content": ".Interactions inside `Logic` component for the *`profile`* command"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sijieg"
        },
        "content": "image::ProfileCommand.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d User click on `profile` on the menu bar"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sijieg"
        },
        "content": "After clicking on `profile`, it will send an event `showProfileRequestEvent` to `Events`. It will then return `handleProfile` which will open up the profile window."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sijieg"
        },
        "content": "[[fig-ClickProfile]]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sijieg"
        },
        "content": ".Interactions inside `UI` component when user clicks profile"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sijieg"
        },
        "content": "image::ClickProfile.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d User presses `F2` key"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sijieg"
        },
        "content": "The profile window is firstly being accelerated by the key `F2`. After pressing `F2`, it will sent a `ShowProfileRequestEvent()` event to the `EventsCentre`. Then, the `UI` will `handleShowProfileRequestEvent` and the profile window will be opened."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sijieg"
        },
        "content": "[[fig-F2Profile]]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sijieg"
        },
        "content": ".Interactions inside `UI` component when user presses `F2`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sijieg"
        },
        "content": "image::F2Profile.PNG[width\u003d\"700\"]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sijieg"
        },
        "content": "// end::profile"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d [Traversing feature]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sijieg"
        },
        "content": "//tag::traversing"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sijieg"
        },
        "content": "The traversing mechanism is facilitated by `VersionedAddressBook`. It extends `WorkoutBook`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sijieg"
        },
        "content": "It implements following commands: +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `SortCommand()` -Sorts the current workout book"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `FilterCommand()` -Filters the workout book"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `SearchCommand()` - Search the workout by partial keywords"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `SelectCommand()` - Select the workout by index number"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Given below is an example usage scenario and how the traversing mechanism behaves at each step."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Step 1. The user launches the application, `add` some workouts to the workout book, then `sort` the workout."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sijieg"
        },
        "content": "The sort command calls the `sortFilteredWorkoutList()` of `Model` to sort the workout based on the names in alphabetical order."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Step 2. The user executes `filter` to find the workouts that contain `duration`, `equipment` and `type`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sijieg"
        },
        "content": "image::traversingSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sijieg"
        },
        "content": "// end::traversing[]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Memory feature"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sijieg"
        },
        "content": "//tag::memory"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sijieg"
        },
        "content": "The memory mechanism is facilitated by `VersionedAddressBook`. It extends `WorkoutBook`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sijieg"
        },
        "content": "It implements following commands: +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `CurrentCommand()` - Changes the state tag of a workout by index number to current"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `CompleteCommand()` - Changes the state tag of a workout by index number to completed"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Given below is an example usage scenario and how the memory mechanism behaves at each step."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Step 1. The user launches the application, `add` some workouts to the workout book and they automatically have a `future` tag."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Step 2. The user executes the current command to change the `future` tag in the workout as specified by the index number to `current`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sijieg"
        },
        "content": "[[fig-Current]]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sijieg"
        },
        "content": ".Interactions inside `Logic` component when pressing `current`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "image::CurrentCommandSD.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Step 3. The user executes the complete command to change the `current` tag in the workout as specified by the index number to `completed`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sijieg"
        },
        "content": "[[fig-Complete]]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sijieg"
        },
        "content": ".Interactions inside `Logic` component when pressing `complete`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "image::CompleteCommandSD.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* The user can only change the state tag from `current` to `completed` by using the complete command."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* The user can only change the state tag from `future` to `current` or `completed` to `current` by using the current command."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sijieg"
        },
        "content": "// end::memory[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "garyheng"
        },
        "content": "// tag::trackfeature[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003d\u003d\u003d Tracking Feature"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "garyheng"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "garyheng"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "garyheng"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "garyheng"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "garyheng"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "garyheng"
        },
        "content": "// end::trackfeature[]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* * *` |user |add a workout |store my favourite workouts"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* * *` |user |delete a workout |remove workouts which i do not want"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* * *` |user |edit a workout |modify the stored workouts to my liking"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* * *` |user |select a workout |look at the details of the workout"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by name |locate a workout without having to search through my entire workout list"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by type |locate a workout according to my preference"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by duration |locate a workout that is suitable for my time constraints"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by difficulty |locate a workout that is suitable for my proficiency level"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by equipment required |locate a workout that utilises the equipment that I possess"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by muscle group targeted |locate a workout that trains the muscle groups I am interested in"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter a workout by calories |locate a workout that is suitable for my calories constraints"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |find/filter/list a workout by date |see my past workouts and track my progress"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |get recommendations on workouts |start a new workout"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |favourite a workout |have easy access to all my favourite workouts"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |set preference for workouts |get recommendations to these types of workouts"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |add an image to my workout exercises |see how this exercise is supposed to be carried out"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |rate a workout |give feedback to other users about workouts in the form of ratings"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |import a workout from internet |have my workouts without manually typing everything"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`* *` |user |list different versions of my workout |easily locate previous versions of my workout"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`*` |user |be reminded when I do not workout for a certain period of time |finish a workout without forgetting halfway"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`*` |user |share the workout |show an interesting workout to my friends"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "shouteck"
        },
        "content": "|`*` |user |have a tutorial video on how to do a specific exercise |see how this exercise is supposed to be carried out"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "shouteck"
        },
        "content": "(For all use cases below, the *System* is the `Workout Tracker` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003d\u003d\u003d Use case: Delete workout"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "shouteck"
        },
        "content": "1.  User requests to list workouts"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "shouteck"
        },
        "content": "2.  Workout Tracker shows a list of workouts"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "shouteck"
        },
        "content": "3.  User requests to delete a specific workout in the list"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "shouteck"
        },
        "content": "4.  Workout Tracker deletes the workout"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** 3a1. Workout Tracker shows an error message."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "garyheng": 23,
      "sijieg": 107,
      "shouteck": 47,
      "-": 955
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d WorkoutBook - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T13-5/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "By: `Team T13-5`      Since: `Sept 2018`      #Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "WorkoutBook is for those who *prefer to use a desktop app for managing workouts*. More importantly, WorkoutBook is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *`list`* : Lists all workouts in the WorkoutBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* **`add`**`name/commando workout type/strength duration/20m difficulty/advanced equipment/dumbbell, bench muscle/bicep, tricep calories/150 instruction/set 1: bicep curl reps: 4-6 set 2: tricep extension reps: 4-6 tag/heavy` : adds a Workout named `commando workout` to the WorkoutBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* **`delete`**`3` : Deletes the 3rd workout shown in the current list of workouts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *`exit`* : Exits the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add name/NAME`, `NAME` is a parameter which can be used as `add name/commando workout`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* Below is a list of the remaining parameters with examples of their acceptable formats:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** *_CALORIES_* are positive integers from 1 to 1000. E.g. `120`, `500`, etc."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** *_DIFFICULTY_* and *_PREFERRED_DIFFICULTY_* should only be either beginner, intermediate or advanced."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** *_DURATION_* should only be in this format: E.g. `20m`, `500m`, etc from 1m to 1000m."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** *_EQUIPMENT_* is a list of equipment separated by commas, and it should not be blank. E.g. `dumbbell,bench,mat` and `dumbbell, bench, mat` are valid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** *_MUSCLE_* is a list of muscle groups separated by commas, and it should not be blank. E.g. `triceps,biceps,back` and `triceps, biceps, back` are valid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** *_TYPE_* is a list of workout types separated by commas, and it should not be blank. E.g. `cardio,strength,balance` and `cardio, strength, balance` are valid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "** *_INSTRUCTION_* should only contain alphanumeric characters, punctuation, spaces, and it should not be blank. E.g. `set1: dumbbell curls reps: 4-6`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** *_USERNAME_* should only contain alphanumeric characters, and it should not be blank. E.g.  `John Doe` and `Jane` are valid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** *_HEIGHT_* should only be in the form x.xx whereby x is any integer. E.g. `1.72` and `1.88` are valid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** *_WEIGHT_* should only be in the form xx.x or xxx.x whereby x is any integer. E.g. `88.4` and `102.9` are valid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "** *_GENDER_* should only be either male or female."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Items in square brackets are optional e.g `name/NAME [tag/TAG]` can be used as `name/commando workout tag/strength` or as `name/commando workout`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[tag/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `tag/strength`, `tag/strength tag/fast-paced` etc."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `name/NAME type/TYPE`, `type/TYPE name/NAME` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* White spaces after a slash are automatically trimmed. For example, `add name/ commando workout` and `add name/commando workout` are the same. However, the latter is more visually pleasing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* Duplicate parameters after one another will only take the last parameter input. For example, `add name/commando workout name/arnold workout` will only add the workout as arnold workout."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Adding a workout: `add`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Adds a workout to the workout book +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Format: `add name/NAME type/TYPE duration/DURATION difficulty/DIFFICULTY equipment/EQUIPMENT muscle/MUSCLE calories/CALORIES instruction/INSTRUCTION [tag/TAG]…​`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* The state tag \"future\" will automatically be added to any new workout."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* The state tag is for the user to note the various things: future - untouched workouts, current - the workout that the user is currently focused on and completed - workouts that have been completed by the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "A workout can have any number of tags (minimally 1)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `add name/commando workout type/strength, cardio duration/20m difficulty/advanced equipment/dumbbell, bench muscle/bicep, tricep calories/150 instruction/set 1: bicep curl reps: 4-6 set 2: tricep extension reps: 4-6 tag/heavy`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Listing all workouts : `list`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Shows a list of all workouts in the workout book. +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Editing a workout : `edit`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Edits an existing workout in the workout book. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Format: `edit INDEX name/NAME [type/TYPE] [duration/DURATION] [difficulty/DIFFICULTY] [equipment/EQUIPMENT] [muscle/MUSCLE] [calories/CALORIES] [instruction/INSTRUCTION] [tag/TAG]…​`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Edits the workout at the specified `INDEX`. The index refers to the index number shown in the displayed workout list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the workout except the state tag will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the workout\u0027s tags except the state tag by typing `tag/` without specifying any tags after it."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `edit 1 type/strength duration/20m` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Edits the type and duration of the 1st workout to be `strength` and `20m` respectively."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `edit 2 name/Arnold\u0027s workout tag/` +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd workout to be `Arnold\u0027s workout` and clears all existing tags except the state tag."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Changing a workout to current : `current`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Changes a workout to be the current workout in the workout book. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `current INDEX`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Changes the state tag of the workout at the specified `INDEX`. The index refers to the index number shown in the displayed workout list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* You can change the state tag from both `future` and `completed`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* You only can have either zero or one current workout at any point in time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `current 1` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Changes the state tag of the 1st workout to be `current`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Changing a workout to completed : `complete`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Changes a workout to be a completed workout in the workout book. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `complete INDEX`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Changes the state tag of the workout at the specified `INDEX`. The index refers to the index number shown in the displayed workout list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* You can change the state tag only from `current`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* `complete 1` +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Changes the state tag of the 1st workout to be `completed`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "\u003d\u003d\u003d Locating workouts by name: `filter`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Filters workouts whose types, durations, equipments contain any of the given keywords. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Format: `filter type/TYPE duration/DURATION equipment/EQUIPMENT`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* The search is case insensitive. e.g `filter type/strength` will match `filter type/STRENGTH`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* The order of the keywords does not matter. e.g. `filter type/strength duration/20m` will match `filter duration/20m type/strength`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* Duration, equipment, type are searched."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* `filter duration/20m equipment/dumbbell type/strength` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Returns any workout having duration of `20m`, with equipment of `dumbbell` and of type `strength`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Locating workouts by name: `find`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Finds workouts whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* The search is case insensitive. e.g `Commando workout` will match `commando workout`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* The order of the keywords does not matter. e.g. `workout commando` will match `commando workout`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Only full words will be matched e.g. `command workout` will not match `commando workout`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* workouts matching at least one keyword will be returned (i.e. `OR` search). e.g. `commando arnold\u0027s` will return `commando workout`, `Arnold\u0027s workout`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `find commando` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Returns `command workout`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `find commando arnold\u0027s` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Returns any workout having names `commando` or `arnold\u0027s`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Deleting a workout : `delete`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Deletes the specified workout from the workout book. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Deletes the workout at the specified `INDEX`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* The index refers to the index number shown in the displayed workout list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Deletes the 2nd workout in the workout book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `find commando` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Deletes the 1st workout in the results of the `find` command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Selecting a workout : `select`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Selects the workout identified by the index number used in the displayed workout list. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* Selects the workout and loads the Google search page the workout at the specified `INDEX`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* The index refers to the index number shown in the displayed workout list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Selects the 2nd workout in the workout book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `find commando` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Selects the 1st workout in the results of the `find` command."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "\u003d\u003d\u003d Selecting a workout : `sort`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Sorts the workouts. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* Sorts the workout."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* The index refers to the index number shown in the displayed workout list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "****"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* `add name/joe\u0027s workout type/strength duration/20m difficulty/beginner equipment/dumbbell muscle/bicep calories/200 instruction/bicep curl reps: 4-6 tag/future​` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "`sort` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Sorts a list of all workouts in the workout book based on names after `add` a new workout."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "`sort` +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "Sorts workout after `delete` a workout."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `profile`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Shows the user profile. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Format: `profile`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `modify`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Modify the user\u0027s profile. +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Format: `modify username/[USERNAME] gender/[GENDER] height/[HEIGHT] weight/[WEIGHT] preferred_difficulty/[DIFFICULTY]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `modify username/apple` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Change the Profile\u0027s name to apple."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sijieg"
        },
        "content": "* `modify username/apple height/1.82` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Change the Profile\u0027s name to apple, height to 1.82m and update the BMI accordingly."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `recommend`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Recommend a workout from the existing workouts. +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Format: `recommend [calories/CALORIES] [difficulty/DIFFICULTY] [duration/DURATION]`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shouteck"
        },
        "content": "****"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* Accepts any combinations of the three prefixes."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shouteck"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* `recommend difficulty/beginner` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Recommends a beginner workout."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* `recommend duration/10m calories/150` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Recommends a 10 minute workout that burns 150 calories."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* `recommend duration/35m calories/200 difficulty/advanced` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shouteck"
        },
        "content": "Recommends an advanced 35 minute workout that burns 200 calories."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Restores the workout book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Undoable commands: those commands that modify the workout book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Clears all entries from the workout book. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sijieg"
        },
        "content": "Workout book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *Add* : `add name/NAME type/TYPE duration/DURATION difficulty/DIFFICULTY equipment/EQUIPMENT muscle/MUSCLE calories/CALORIES instruction/INSTRUCTION [tag/TAG]...` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sijieg"
        },
        "content": "e.g. `add name/commando workout type/strength, cardio duration/20m difficulty/advanced equipment/dumbbell, bench muscle/bicep, tricep calories/150 instruction/set 1: bicep curl reps: 4-6 set 2: tricep extension reps: 4-6 tag/heavy`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *Edit* : `edit INDEX [name/NAME] [type/TYPE] [duration/DURATION] [difficulty/DIFFICULTY] [equipment/EQUIPMENT] [muscle/MUSCLE] [calories/CALORIES] [instruction/INSTRUCTION] [tag/TAG]…​` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sijieg"
        },
        "content": "e.g. `edit 1 type/light duration/25m`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *Filter* : `filter type/TYPE duration/DURATION equipment/EQUIPMENT` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "e.g. `filter type/strength duration/20m equipment/dumbbell`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sijieg"
        },
        "content": "e.g. `find bench`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "* *Sort* : `sort`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *Recommend* : `recommend [calories/CALORIES] [difficulty/DIFFICULTY] [duration/DURATION]` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shouteck"
        },
        "content": "e.g. `recommend calories/150`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shouteck"
        },
        "content": "* *Modify* : `modify` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sijieg"
        },
        "content": "e.g. `modify username/John Doe`"
      }
    ],
    "authorContributionMap": {
      "sijieg": 72,
      "shouteck": 45,
      "-": 225,
      "yicheng12": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.storage.TrackedDataListStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.storage.WorkoutBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.storage.XmlTrackedDataListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.storage.XmlWorkoutBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing WorkoutBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        WorkoutBookStorage workoutBookStorage \u003d new XmlWorkoutBookStorage(userPrefs.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackedDataListStorage trackedDataListStorage \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new XmlTrackedDataListStorage(userPrefs.getTrackedDataListFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        storage \u003d new StorageManager(workoutBookStorage, trackedDataListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s workout book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The data from the sample workout book will be used instead if {@code storage}\u0027s workout book is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * or an empty workout book will be used instead if errors occur when reading {@code storage}\u0027s workout book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Optional\u003cReadOnlyWorkoutBook\u003e workoutBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Optional\u003cReadOnlyTrackedDataList\u003e trackedDataListOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        ReadOnlyWorkoutBook initialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        ReadOnlyTrackedDataList initialTrackedDataList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            workoutBookOptional \u003d storage.readWorkoutBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (!workoutBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WorkoutBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            initialData \u003d workoutBookOptional.orElseGet(SampleDataUtil::getSampleWorkoutBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WorkoutBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            initialData \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WorkoutBook\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            initialData \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            trackedDataListOptional \u003d storage.readTrackedDataList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (!trackedDataListOptional.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a empty TrackedDataList\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            initialTrackedDataList \u003d trackedDataListOptional.orElseGet(SampleDataUtil::getEmptyTrackedDataList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TrackedDataList\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            initialTrackedDataList \u003d new TrackedDataList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TrackedDataList\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            initialTrackedDataList \u003d new TrackedDataList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return new ModelManager(initialData, initialTrackedDataList, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WorkoutBook\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logger.info(\"Starting WorkoutBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Workout Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 25,
      "sijieg": 20,
      "shouteck": 2,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private String appTitle \u003d \"WorkoutBook\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String LOG_FILE \u003d \"workoutbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX \u003d \"The workout index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_WORKOUTS_LISTED_OVERVIEW \u003d \"%1$d workouts listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_WORKOUTS_SORTED \u003d \"Sorted workouts\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_INVALID_GENDER \u003d \"Invalid Gender format! \\n%1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_VALID_GENDER \u003d \"Gender should either be male or female.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_INVALID_WEIGHT \u003d \"Invalid Weight format! \\n%1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_VALID_WEIGHT \u003d \"Weight should only be in xx.x/xxx.x form where x is an integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_INVALID_HEIGHT \u003d \"Invalid Height format! \\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_VALID_HEIGHT \u003d \"Height should only be in x.xx form where x is an integer.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_INVALID_USERNAME \u003d \"Invalid Username format! \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_VALID_USERNAME \u003d \"Username should only contain alphanumeric characters.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "sijieg": 8,
      "-": 10,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TrackedDataChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/** Indicates the WorkoutBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedDataChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public final ReadOnlyTrackedData data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataChangedEvent(ReadOnlyTrackedData data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return \"number of workouts \" + data.getTrackedData().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TrackedDataListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/** Indicates the WorkoutBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedDataListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public final ReadOnlyTrackedDataList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataListChangedEvent(ReadOnlyTrackedDataList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return \"number of parameters being tracked \" + data.getTrackedDataList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/WorkoutBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/** Indicates the WorkoutBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public final ReadOnlyWorkoutBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBookChangedEvent(ReadOnlyWorkoutBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return \"number of workouts \" + data.getWorkoutList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public JumpToListRequestEvent(int targetIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowProfileRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * An event requesting to view the profile page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ShowProfileRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TrackedDataPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a selection change in the Workout List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedDataPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Parameter newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataPanelSelectionChangedEvent(Parameter newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Parameter getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/WorkoutPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Represents a selection change in the Workout List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final Workout newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutPanelSelectionChangedEvent(Workout newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Workout getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *   Ignores case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true // substring match will return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .anyMatch(p -\u003e p.toLowerCase().contains(preppedWord.toLowerCase()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Comparable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * WIP"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public interface Comparable\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * WIP"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    int compareTo(Workout otherWorkout);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 3,
      "shouteck": 4,
      "yicheng12": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @throws IOException If an error occurs when opening a file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, IOException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of workouts */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    ObservableList\u003cWorkout\u003e getFilteredWorkoutList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of parameters */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    ObservableList\u003cParameter\u003e getFilteredTrackedDataList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 8,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.WorkoutBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final WorkoutBookParser workoutBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBookParser \u003d new WorkoutBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException , IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Command command \u003d workoutBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ObservableList\u003cParameter\u003e getFilteredTrackedDataList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return model.getFilteredTrackedDataList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 5,
      "sijieg": 6,
      "-": 46,
      "yicheng12": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Adds a workout to the workout book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a workout to the workout book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DURATION + \"DURATION \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_EQUIPMENT + \"EQUIPMENT \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_MUSCLE + \"MUSCLE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_INSTRUCTION + \"INSTRUCTION \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_NAME + \"john doe\u0027s workout \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_TYPE + \"strength \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DURATION + \"20m \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DIFFICULTY + \"beginner \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_EQUIPMENT + \"dumbbell \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_MUSCLE + \"bicep \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_CALORIES + \"150 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_INSTRUCTION + \"set1: bicep curl reps: 4-6 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + PREFIX_TAG + \"future \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_TAG + \"heavy \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + PREFIX_TAG + \"favourite\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New workout added with default future tag: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKOUT \u003d \"This workout already exists in the workout book\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Workout toAdd;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Workout}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public AddCommand(Workout workout) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        requireNonNull(workout);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        toAdd \u003d workout;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (model.hasWorkout(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        model.addWorkout(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "sijieg": 3,
      "shouteck": 33,
      "DarylTew": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Clears the workout book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Workout book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.resetData(new WorkoutBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "shouteck": 1,
      "DarylTew": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseTag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Changes a workout to be a completed workout in the workout book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class CompleteCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"complete\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a workout to be a completed workout identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"by the index number used in the displayed workout list.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_COMPLETE_WORKOUT_SUCCESS \u003d \"Completed Workout: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMPLETE_WORKOUT \u003d \"This workout is already completed.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param targetIndex of the person in the filtered workout list to edit the state tag"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CompleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        List\u003cWorkout\u003e filteredWorkoutList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Workout workoutToEdit \u003d filteredWorkoutList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Workout editedWorkout \u003d createEditedWorkout(workoutToEdit);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            model.updateWorkout(workoutToEdit, editedWorkout);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            model.commitModel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_COMPLETE_WORKOUT_SUCCESS, editedWorkout));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        } catch (IndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Creates and returns a {@code Workout} with the details of {@code workoutToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * edited with {@code editWorkoutDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private static Workout createEditedWorkout(Workout workoutToEdit) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assert workoutToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Name updatedName \u003d workoutToEdit.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Type updatedType \u003d workoutToEdit.getType();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Duration updatedDuration \u003d workoutToEdit.getDuration();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Difficulty updatedDifficulty \u003d workoutToEdit.getDifficulty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Equipment updatedEquipment \u003d workoutToEdit.getEquipment();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Muscle updatedMuscle \u003d workoutToEdit.getMuscle();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Calories updatedCalories \u003d workoutToEdit.getCalories();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Instruction updatedInstruction \u003d workoutToEdit.getInstruction();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Set\u003cTag\u003e originalTags \u003d workoutToEdit.getTags();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        for (Tag entry: originalTags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            updatedTags.add(entry);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Tag future \u003d parseTag(\"future\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Tag current \u003d parseTag(\"current\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Tag completed \u003d parseTag(\"completed\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (originalTags.contains(completed)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_COMPLETE_WORKOUT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (originalTags.contains(future)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            updatedTags.remove(future);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (originalTags.contains(current)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            updatedTags.remove(current);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        updatedTags.add(completed);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Workout(updatedName, updatedType, updatedDuration, updatedDifficulty, updatedEquipment,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                updatedMuscle, updatedCalories, updatedInstruction, updatedTags, null);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!(other instanceof CompleteCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        CompleteCommand e \u003d (CompleteCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return targetIndex.equals(e.targetIndex);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "shouteck": 13,
      "DarylTew": 111,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CurrentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseTag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javax.swing.JOptionPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.jsoup.nodes.Element;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ProfileWindowManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Changes a workout to be a current workout in the workout book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class CurrentCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"current\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a workout to be a current workout identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"by the index number used in the displayed workout list.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_CURRENT_WORKOUT_SUCCESS \u003d \"Current Workout: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_CURRENT_WORKOUT_FAILURE \u003d \"Fail to make the workout current.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CURRENT_WORKOUT \u003d \"This workout is already current.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_MORE_DIFFICULT \u003d \"This workout is more difficult than your indicated workout \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"difficulty.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_HIGHER_CALORIES \u003d \"This workout requires more calories to be burnt than your \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"preferred calories.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_HIGHER_DURATION \u003d \"This workout will take longer than your preferred duration.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_CONTINUE \u003d \"Do you still want to make this workout current?\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private boolean success \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param targetIndex of the person in the filtered workout list to edit the state tag"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CurrentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        List\u003cWorkout\u003e filteredWorkoutList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Workout workoutToEdit \u003d filteredWorkoutList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Workout editedWorkout \u003d createEditedWorkout(workoutToEdit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (success) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                model.updateWorkout(workoutToEdit, editedWorkout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                model.commitWorkoutBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_CURRENT_WORKOUT_SUCCESS, editedWorkout));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                return new CommandResult(MESSAGE_CURRENT_WORKOUT_FAILURE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        } catch (IndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Creates and returns a {@code Workout} with the details of {@code workoutToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * edited with {@code editWorkoutDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Workout createEditedWorkout(Workout workoutToEdit) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assert workoutToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Name updatedName \u003d workoutToEdit.getName();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Type updatedType \u003d workoutToEdit.getType();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Duration updatedDuration \u003d workoutToEdit.getDuration();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Difficulty updatedDifficulty \u003d workoutToEdit.getDifficulty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Equipment updatedEquipment \u003d workoutToEdit.getEquipment();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Muscle updatedMuscle \u003d workoutToEdit.getMuscle();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Calories updatedCalories \u003d workoutToEdit.getCalories();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Instruction updatedInstruction \u003d workoutToEdit.getInstruction();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Set\u003cTag\u003e originalTags \u003d workoutToEdit.getTags();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        int userCalories;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        int userDuration;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Tag current \u003d parseTag(\"current\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (originalTags.contains(current)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CURRENT_WORKOUT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        ProfileWindowManager profileWindowManager;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            profileWindowManager \u003d ProfileWindowManager.getInstance();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Element divCalories \u003d profileWindowManager.getCalories();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Element divDuration \u003d profileWindowManager.getDuration();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Element divDifficulty \u003d profileWindowManager.getDifficulty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String userDifficulty \u003d profileWindowManager.trimmedDifficulty(divDifficulty.ownText());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String calories \u003d profileWindowManager.trimmedCalories(divCalories.ownText());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String duration \u003d profileWindowManager.trimmedDuration(divDuration.ownText());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            userCalories \u003d profileWindowManager.convertStringIntoInt(calories);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            userDuration \u003d profileWindowManager.convertStringIntoInt(duration);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (profileWindowManager.isMoreDifficult(userDifficulty, updatedDifficulty.toString())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                int reply \u003d JOptionPane.showConfirmDialog(null, MESSAGE_MORE_DIFFICULT"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        + MESSAGE_CONTINUE, \"Making this workout current\", JOptionPane.YES_NO_OPTION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                if (reply \u003d\u003d JOptionPane.NO_OPTION) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    success \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    return new Workout(updatedName, updatedType, updatedDuration, updatedDifficulty, updatedEquipment,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                            updatedMuscle, updatedCalories, updatedInstruction, originalTags, null);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (profileWindowManager.isHigherCalories(profileWindowManager.convertStringIntoInt(profileWindowManager"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    .trimmedCalories(updatedCalories.toString())), userCalories)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                int reply \u003d JOptionPane.showConfirmDialog(null, MESSAGE_HIGHER_CALORIES"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        + MESSAGE_CONTINUE, \"Making this workout current\", JOptionPane.YES_NO_OPTION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                if (reply \u003d\u003d JOptionPane.NO_OPTION) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    success \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    return new Workout(updatedName, updatedType, updatedDuration, updatedDifficulty, updatedEquipment,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                            updatedMuscle, updatedCalories, updatedInstruction, originalTags, null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (profileWindowManager.isHigherDuration(profileWindowManager.convertStringIntoInt(profileWindowManager"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    .trimmedDuration(updatedDuration.toString())), userDuration)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                int reply \u003d JOptionPane.showConfirmDialog(null, MESSAGE_HIGHER_DURATION"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        + MESSAGE_CONTINUE, \"Making this workout current\", JOptionPane.YES_NO_OPTION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                if (reply \u003d\u003d JOptionPane.NO_OPTION) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    success \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    return new Workout(updatedName, updatedType, updatedDuration, updatedDifficulty, updatedEquipment,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                            updatedMuscle, updatedCalories, updatedInstruction, originalTags, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Tag future \u003d parseTag(\"future\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Tag completed \u003d parseTag(\"completed\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (originalTags.contains(future)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            updatedTags.remove(future);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (originalTags.contains(completed)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            updatedTags.remove(completed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        updatedTags.add(current);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Workout(updatedName, updatedType, updatedDuration, updatedDifficulty, updatedEquipment,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                updatedMuscle, updatedCalories, updatedInstruction, updatedTags, null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!(other instanceof CurrentCommand)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        CurrentCommand e \u003d (CurrentCommand) other;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return targetIndex.equals(e.targetIndex);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 73,
      "shouteck": 13,
      "DarylTew": 104,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Deletes a workout identified using its displayed index from the workout book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \": Deletes the workout identified by the index number used in the displayed workout list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_DELETE_WORKOUT_SUCCESS \u003d \"Deleted Workout: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        List\u003cWorkout\u003e lastShownList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout workoutToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        model.deleteWorkout(workoutToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_WORKOUT_SUCCESS, workoutToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 5,
      "DarylTew": 1,
      "-": 45,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Edits the details of an existing workout in the workout book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the workout identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"by the index number used in the displayed workout list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"TYPE] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_EQUIPMENT + \"EQUIPMENT] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_MUSCLE + \"MUSCLE] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + \"[\" + PREFIX_INSTRUCTION + \"INSTRUCTION] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + PREFIX_TYPE + \"Anaerobic \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            + PREFIX_DIFFICULTY + \"Beginner\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_EDIT_WORKOUT_SUCCESS \u003d \"Edited Workout: %1$s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKOUT \u003d \"This workout already exists in the workout book.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final EditWorkoutDescriptor editWorkoutDescriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param index of the workout in the filtered workout list to edit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param editWorkoutDescriptor details to edit the workout with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditCommand(Index index, EditWorkoutDescriptor editWorkoutDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(editWorkoutDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.editWorkoutDescriptor \u003d new EditWorkoutDescriptor(editWorkoutDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        List\u003cWorkout\u003e lastShownList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workoutToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout editedWorkout \u003d createEditedWorkout(workoutToEdit, editWorkoutDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!workoutToEdit.isSameWorkout(editedWorkout) \u0026\u0026 model.hasWorkout(editedWorkout)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        model.updateWorkout(workoutToEdit, editedWorkout);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_WORKOUT_SUCCESS, editedWorkout));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Creates and returns a {@code Workout} with the details of {@code workoutToEdit}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * edited with {@code editWorkoutDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private static Workout createEditedWorkout(Workout workoutToEdit, EditWorkoutDescriptor editWorkoutDescriptor) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assert workoutToEdit !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Name updatedName \u003d editWorkoutDescriptor.getName().orElse(workoutToEdit.getName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Type updatedType \u003d editWorkoutDescriptor.getType().orElse(workoutToEdit.getType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Duration updatedDuration \u003d editWorkoutDescriptor.getDuration().orElse(workoutToEdit.getDuration());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Difficulty updatedDifficulty \u003d editWorkoutDescriptor.getDifficulty().orElse(workoutToEdit.getDifficulty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Equipment updatedEquipment \u003d editWorkoutDescriptor.getEquipment().orElse(workoutToEdit.getEquipment());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Muscle updatedMuscle \u003d editWorkoutDescriptor.getMuscle().orElse(workoutToEdit.getMuscle());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Calories updatedCalories \u003d editWorkoutDescriptor.getCalories().orElse(workoutToEdit.getCalories());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Instruction updatedInstruction \u003d editWorkoutDescriptor.getInstruction().orElse(workoutToEdit.getInstruction());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editWorkoutDescriptor.getTags().orElse(workoutToEdit.getTags());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Workout(updatedName, updatedType, updatedDuration, updatedDifficulty, updatedEquipment,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                updatedMuscle, updatedCalories, updatedInstruction, updatedTags, workoutToEdit.getRemark());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 editWorkoutDescriptor.equals(e.editWorkoutDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Stores the details to edit the workout with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * corresponding field value of the workout."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static class EditWorkoutDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Difficulty difficulty;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Equipment equipment;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Muscle muscle;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private Instruction instruction;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public EditWorkoutDescriptor() {}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public EditWorkoutDescriptor(EditWorkoutDescriptor toCopy) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setDifficulty(toCopy.difficulty);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setEquipment(toCopy.equipment);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setMuscle(toCopy.muscle);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            setInstruction(toCopy.instruction);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, type, duration, difficulty, equipment, muscle, calories,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            instruction, tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(difficulty);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setEquipment(Equipment equipment) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.equipment \u003d equipment;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cEquipment\u003e getEquipment() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(equipment);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setMuscle(Muscle muscle) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.muscle \u003d muscle;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cMuscle\u003e getMuscle() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(muscle);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public void setInstruction(Instruction instruction) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public Optional\u003cInstruction\u003e getInstruction() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return Optional.ofNullable(instruction);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            if (!(other instanceof EditWorkoutDescriptor)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            EditWorkoutDescriptor e \u003d (EditWorkoutDescriptor) other;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getDuration().equals(e.getDuration())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getDifficulty().equals(e.getDifficulty())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getEquipment().equals(e.getEquipment())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getMuscle().equals(e.getMuscle())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    \u0026\u0026 getInstruction().equals(e.getInstruction())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "sijieg": 1,
      "shouteck": 13,
      "DarylTew": 115,
      "-": 159,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Workout Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.DurationPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.EquipmentPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.TypePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * WIP"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all workouts based on keywords \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"[\" + PREFIX_TYPE + \"TYPE] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"[\" + PREFIX_EQUIPMENT + \"EQUIPMENT] \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + PREFIX_EQUIPMENT + \"dumbbell \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + PREFIX_TYPE + \"strength \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + PREFIX_DURATION + \"20m \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_NOT_FILTERED \u003d \"At least one field to filter must be provided.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final TypePredicate typePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final EquipmentPredicate equipmentPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final DurationPredicate durationPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public FilterCommand(DurationPredicate durationPredicate, TypePredicate typePredicate,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                         EquipmentPredicate equipmentPredicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(durationPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(typePredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(equipmentPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.durationPredicate \u003d durationPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.typePredicate \u003d typePredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.equipmentPredicate \u003d equipmentPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        model.updateFilteredWorkoutList(typePredicate.and(durationPredicate).and(equipmentPredicate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                String.format(Messages.MESSAGE_WORKOUTS_LISTED_OVERVIEW, model.getFilteredWorkoutList().size()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 typePredicate.equals(((FilterCommand) other).typePredicate)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 equipmentPredicate.equals(((FilterCommand) other).equipmentPredicate)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 durationPredicate.equals(((FilterCommand) other).durationPredicate)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shouteck": 13,
      "yicheng12": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Finds and lists all workouts in workout book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all workouts whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice\u0027s workout bob\u0027s workout charlie\u0027s workout\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        model.updateFilteredWorkoutList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                String.format(Messages.MESSAGE_WORKOUTS_LISTED_OVERVIEW, model.getFilteredWorkoutList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 6,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Lists all persons in the workout book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all workouts\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 3,
      "DarylTew": 1,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModifyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Modify the user profile in the Profile window."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ModifyCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"modify\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Modify the user profile in the Profile window \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"[\" + PREFIX_HEIGHT + \"HEIGHT] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"[\" + PREFIX_WEIGHT + \"WEIGHT] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_GENDER + \"female \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_USERNAME + \"sarah \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + PREFIX_HEIGHT + \"1.69 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + PREFIX_WEIGHT + \"87.2 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_CALORIES + \"150 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DIFFICULTY + \"beginner \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DURATION + \"15m\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"User profile has been modified! Please rerun the\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \" MainApp to see the changes.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final String height;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final String weight;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    // element.owntext() return element w/o \u003cb\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public ModifyCommand(String gender, String username, String height, String weight, String calories,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                         String difficulty, String duration) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!(other instanceof ModifyCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        ModifyCommand e \u003d (ModifyCommand) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return gender.equals(e.gender)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 username.equals(e.username)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 height.equals(e.height)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 weight.equals(e.weight)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 difficulty.equals(e.difficulty)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 duration.equals(e.duration)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 calories.equals(e.calories);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 66,
      "shouteck": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ProfileCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.ui.ShowProfileRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Format full profile for user to input user information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profile\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows user\u0027s information.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String SHOWING_PROFILE_MESSAGE \u003d \"Opened profile window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        EventsCenter.getInstance().post(new ShowProfileRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return new CommandResult(SHOWING_PROFILE_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecommendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.RecommendArguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * Recommends an existing workout from the workout book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class RecommendCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recommend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Recommends a workout from the workout book \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"identified by a combination of DURATION,DIFFICULTY,CALORIES\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"[\" + PREFIX_CALORIES + \"CALORIES]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + PREFIX_DURATION + \"20m\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Workout recommended!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_WORKOUT \u003d \"There is no such workout in the workout book.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final RecommendArguments recommendArguments;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public RecommendCommand(RecommendArguments recommendArguments) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        requireAllNonNull(recommendArguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.recommendArguments \u003d recommendArguments;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        List\u003cWorkout\u003e filteredWorkoutList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        List\u003cWorkout\u003e filteredInternalList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        filteredInternalList \u003d model.getFilteredInternalList(recommendArguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (filteredInternalList.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_WORKOUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        int targetIndex \u003d getTargetIndex(filteredWorkoutList, filteredInternalList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private int getTargetIndex(List\u003cWorkout\u003e filteredWorkoutList, List\u003cWorkout\u003e filteredInternalList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        int randomIndex \u003d rand.nextInt(filteredInternalList.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout randomWorkout \u003d filteredInternalList.get(randomIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return filteredWorkoutList.indexOf(randomWorkout);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                || (other instanceof RecommendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 recommendArguments.equals(((RecommendCommand) other).recommendArguments));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Reverts the {@code model}\u0027s workout book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!model.canRedoModel()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.redoModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 3,
      "DarylTew": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * Remark a workout in workout book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \": Remark the workout identified by the index number used in the displayed workout list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"NAME]\\n \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + PREFIX_REMARK"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"This is a great upper body workout, targeting the muscles in arms, \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \"the shoulders, the center and your back.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_REMARK_WORKOUT_SUCCESS \u003d \"Remark workout: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKOUT \u003d \"This workout already exists in the workout book.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public RemarkCommand (Index index, Remark remark) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        List\u003cWorkout\u003e lastShownList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Workout workoutToRemark \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Workout remarkedWorkout \u003d createdRemarkedWorkout(workoutToRemark, remark);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        if (!workoutToRemark.isSameWorkout(remarkedWorkout) \u0026\u0026 model.hasWorkout(remarkedWorkout)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        model.updateWorkout(workoutToRemark, remarkedWorkout);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMARK_WORKOUT_SUCCESS, remarkedWorkout));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * @param workoutToRemark"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * @param remark"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private static Workout createdRemarkedWorkout(Workout workoutToRemark, Remark remark) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new Workout(workoutToRemark.getName(), workoutToRemark.getType(), workoutToRemark.getDuration(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                workoutToRemark.getDifficulty(), workoutToRemark.getEquipment(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                workoutToRemark.getMuscle(), workoutToRemark.getCalories(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                workoutToRemark.getInstruction(), workoutToRemark.getTags(), remark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "yicheng12": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Selects a person identified using its displayed index from the workout book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            + \": Selects the workout identified by the index number used in the displayed workout list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_SELECT_WORKOUT_SUCCESS \u003d \"Selected Workout: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        List\u003cWorkout\u003e filteredWorkoutList \u003d model.getFilteredWorkoutList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredWorkoutList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_WORKOUT_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 1,
      "-": 49,
      "yicheng12": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * Sorts (WIP)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"sorted all workouts\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        model.sortFilteredWorkoutList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new CommandResult(MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "shouteck": 3,
      "yicheng12": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TrackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Allows users to track parameters in subsequently added workouts"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"track\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            + \": allows the user to track specific parameters listed in the command, for any new workouts that are \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            + \"added after this command is entered.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            + \"Parameters: SUBCOMMAND PREFIX/VALUE\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" start muscle/bicep\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_START_SUCCESS \u003d \"Now tracking %1$s%2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_STOP_SUCCESS \u003d \"Tracking of %1$s%2$s has been stopped\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARAMETER \u003d \"This parameter is already being tracked\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETER \u003d \"This parameter is not currently being tracked\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_SUBCOMMAND_CONSTRAINTS \u003d \"subcommand must be \\\"start\\\" or \\\"stop\\\"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String SUBCOMMAND_VALIDATION_REGEX \u003d \"(start)|(stop)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final String subcommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Parameter parameter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param subcommand to indicate starting/stopping of tracking"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param parameter to be tracked"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackCommand(String subcommand, Parameter parameter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireAllNonNull(subcommand, parameter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.subcommand \u003d subcommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (subcommand.equals(\"start\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (model.hasParameter(parameter)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PARAMETER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            model.addDataToTrack(parameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            model.commitModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_START_SUCCESS, parameter.getPrefix(), parameter.getValue()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (subcommand.equals(\"stop\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (!model.hasParameter(parameter)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                throw new CommandException(MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            model.removeDataFromTrack(parameter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            model.commitModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_STOP_SUCCESS, parameter.getPrefix(), parameter.getValue()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * WIP"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 1: same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 2: null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof TrackCommand)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 3: check all attributes"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackCommand t \u003d (TrackCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return subcommand.equals(t.subcommand) \u0026\u0026 parameter.equals(t.parameter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static boolean isValidSubcommand(String test) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return test.matches(SUBCOMMAND_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 88,
      "shouteck": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Reverts the {@code model}\u0027s workout book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!model.canUndoModel()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.undoModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 3,
      "DarylTew": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TYPE, PREFIX_DURATION, PREFIX_DIFFICULTY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        PREFIX_EQUIPMENT, PREFIX_MUSCLE, PREFIX_CALORIES, PREFIX_INSTRUCTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE, PREFIX_DURATION, PREFIX_DIFFICULTY,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        PREFIX_EQUIPMENT, PREFIX_MUSCLE, PREFIX_CALORIES, PREFIX_INSTRUCTION)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Equipment equipment \u003d ParserUtil.parseEquipment(argMultimap.getValue(PREFIX_EQUIPMENT).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Muscle muscle \u003d ParserUtil.parseMuscle(argMultimap.getValue(PREFIX_MUSCLE).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Instruction instruction \u003d ParserUtil.parseInstruction(argMultimap.getValue(PREFIX_INSTRUCTION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        tagList.add(parseTag(\"future\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Workout workout \u003d new Workout(name, type, duration, difficulty, equipment, muscle, calories, instruction,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                tagList, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return new AddCommand(workout);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "shouteck": 27,
      "DarylTew": 2,
      "-": 44,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns number of arguments stored in the map."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public int getNumberOfArgs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the only Prefix in the map."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Prefix getTheOnlyPrefix() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        for (Map.Entry\u003cPrefix, List\u003cString\u003e\u003e entry : argMultimap.entrySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (!entry.getKey().getPrefix().equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                return entry.getKey();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 16,
      "shouteck": 8,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"duration/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"difficulty/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_EQUIPMENT \u003d new Prefix(\"equipment/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_MUSCLE \u003d new Prefix(\"muscle/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"calories/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_INSTRUCTION \u003d new Prefix(\"instruction/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"gender/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"username/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"height/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"weight/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 4,
      "shouteck": 9,
      "-": 10,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.CompleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Parses input arguments and creates a new CompleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class CompleteCommandParser implements Parser\u003cCompleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * and returns an CompleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CompleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return new CompleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CurrentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.CurrentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Parses input arguments and creates a new CurrentCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class CurrentCommandParser implements Parser\u003cCurrentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CurrentCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * and returns an CurrentCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CurrentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return new CurrentCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CurrentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 2,
      "DarylTew": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TYPE, PREFIX_DURATION, PREFIX_DIFFICULTY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                PREFIX_EQUIPMENT, PREFIX_MUSCLE, PREFIX_CALORIES, PREFIX_INSTRUCTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor editWorkoutDescriptor \u003d new EditWorkoutDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            editWorkoutDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            editWorkoutDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            editWorkoutDescriptor.setDuration(ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            editWorkoutDescriptor.setDifficulty(ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EQUIPMENT).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            editWorkoutDescriptor.setEquipment(ParserUtil.parseEquipment(argMultimap.getValue(PREFIX_EQUIPMENT).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MUSCLE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            editWorkoutDescriptor.setMuscle(ParserUtil.parseMuscle(argMultimap.getValue(PREFIX_MUSCLE).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            editWorkoutDescriptor.setCalories(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INSTRUCTION).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            editWorkoutDescriptor.setInstruction(ParserUtil.parseInstruction(argMultimap.getValue(PREFIX_INSTRUCTION)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editWorkoutDescriptor::setTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!editWorkoutDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new EditCommand(index, editWorkoutDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "shouteck": 8,
      "DarylTew": 25,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.DurationPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.EquipmentPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.TypePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * WIP"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_DURATION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                        PREFIX_EQUIPMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TYPE, PREFIX_DURATION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                PREFIX_EQUIPMENT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String[] parameters \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String typeKeywords \u003d argMultimap.getValue(PREFIX_TYPE).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String durationKeywords \u003d argMultimap.getValue(PREFIX_DURATION).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String equipmentKeywords \u003d argMultimap.getValue(PREFIX_EQUIPMENT).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new FilterCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                new DurationPredicate(Arrays.asList(durationKeywords)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                new TypePredicate(Arrays.asList(typeKeywords)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                new EquipmentPredicate(Arrays.asList(equipmentKeywords)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 16,
      "yicheng12": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModifyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_USERNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_WEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VALID_GENDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VALID_HEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VALID_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VALID_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.jsoup.nodes.Element;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.ProfileWindowManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Parses input arguments and creates a new ModifyCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ModifyCommandParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code ModifyCommand}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * and returns a {@code ModifyCommand} object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @throws IOException if the file does not exist or has the wrong name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public ModifyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_HEIGHT, PREFIX_WEIGHT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_GENDER, PREFIX_CALORIES, PREFIX_DURATION);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_USERNAME, PREFIX_HEIGHT, PREFIX_WEIGHT, PREFIX_DIFFICULTY,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                PREFIX_GENDER, PREFIX_CALORIES, PREFIX_DURATION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModifyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        ProfileWindowManager profileWindowManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            profileWindowManager \u003d ProfileWindowManager.getInstance();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divGender \u003d profileWindowManager.getGender();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divUsername \u003d profileWindowManager.getUsername();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divHeight \u003d profileWindowManager.getHeight();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divWeight \u003d profileWindowManager.getWeight();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divCalories \u003d profileWindowManager.getCalories();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divDuration \u003d profileWindowManager.getDuration();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Element divDifficulty \u003d profileWindowManager.getDifficulty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String newGender \u003d divGender.ownText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String newHeight \u003d divHeight.ownText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String newWeight \u003d divWeight.ownText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            String newDifficulty \u003d divDifficulty.ownText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            String newUsername \u003d divUsername.ownText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            String newCalories \u003d divCalories.ownText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            String newDuration \u003d divDuration.ownText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                String gender \u003d argMultimap.getValue(PREFIX_GENDER).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                if (!profileWindowManager.isValidGender(gender)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_GENDER, MESSAGE_VALID_GENDER));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setGender(\"Gender: \" + gender);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                newGender \u003d gender;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_USERNAME).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                if (!profileWindowManager.isValidUsername(username)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_USERNAME, MESSAGE_VALID_USERNAME));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setUsername(username);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                newUsername \u003d username;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_HEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                String height \u003d argMultimap.getValue(PREFIX_HEIGHT).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                if (!profileWindowManager.isValidHeight(height)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_HEIGHT, MESSAGE_VALID_HEIGHT));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setHeight(\"Height: \" + height + \"m\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                newHeight \u003d height;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (argMultimap.getValue(PREFIX_WEIGHT).isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                String weight \u003d argMultimap.getValue(PREFIX_WEIGHT).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                if (!profileWindowManager.isValidWeight(weight)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_WEIGHT, MESSAGE_VALID_WEIGHT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setWeight(\"Weight: \" + weight + \"kg\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                newWeight \u003d weight;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setDifficulty(\"Difficulty: \" + difficulty.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                newDifficulty \u003d difficulty.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            if (argMultimap.getValue(PREFIX_CALORIES).isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setCalories(\"Calories: \" + calories.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                newCalories \u003d calories.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager.setDuration(\"Duration: \" + duration.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                newDuration \u003d duration.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            DecimalFormat df \u003d new DecimalFormat(\"#.#\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            profileWindowManager.setBmi(\"BMI : \" + df.format(profileWindowManager.calculateBmi(newHeight, newWeight)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            profileWindowManager.writeToFile();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return new ModifyCommand(newGender, newUsername, newHeight, newWeight, newCalories, newDifficulty,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    newDuration);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            // Dummy"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return new ModifyCommand(\" \", \"\", \"\", \"\", \"\", \"\","
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    \"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 87,
      "shouteck": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.commands.TrackCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String type} into a {@code type}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String duration} into a {@code duration}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Duration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Duration(trimmedDuration);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String difficulty} into a {@code difficulty}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Difficulty(trimmedDifficulty);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String equipment} into a {@code equipment}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code equipment} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Equipment parseEquipment(String equipment) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(equipment);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedEquipment \u003d equipment.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Equipment.isValidEquipment(trimmedEquipment)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Equipment.MESSAGE_EQUIPMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Equipment(trimmedEquipment);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String muscle} into a {@code muscle}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code muscle} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Muscle parseMuscle(String muscle) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(muscle);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedMuscle \u003d muscle.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Muscle.isValidMuscle(trimmedMuscle)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Muscle.MESSAGE_MUSCLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Muscle(trimmedMuscle);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String calories} into a {@code calories}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code calories} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Calories.isValidCalories(trimmedCalories)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Calories(trimmedCalories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses a {@code String instruction} into a {@code instruction}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the given {@code instruction} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static Instruction parseInstruction(String instruction) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(instruction);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String trimmedInstruction \u003d instruction.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!Instruction.isValidInstruction(trimmedInstruction)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException(Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return new Instruction(trimmedInstruction);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Parses a {@code String remark} into a {@code remark}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Parses a {@code String subcommand}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws ParseException if the given {@code subcommand} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static String parseSubcommand(String subcommand) throws ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(subcommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String trimmedSubcommand \u003d subcommand.trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!TrackCommand.isValidSubcommand(trimmedSubcommand)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new ParseException(TrackCommand.MESSAGE_SUBCOMMAND_CONSTRAINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return trimmedSubcommand;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 16,
      "sijieg": 1,
      "shouteck": 1,
      "DarylTew": 77,
      "-": 105,
      "yicheng12": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecommendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.ProfileWindowManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.RecommendArguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * Parses input arguments and creates a new {@code RecommendCommand} object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class RecommendCommandParser implements Parser\u003cRecommendCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RecommendCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * and returns a {@code RecommendCommand} object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public RecommendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DURATION,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_CALORIES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments recommendArguments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (isPrefixPresent(argMultimap, PREFIX_DURATION, PREFIX_DIFFICULTY, PREFIX_CALORIES)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArguments \u003d getRecommendArguments(argMultimap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            ProfileWindowManager profileWindowManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                profileWindowManager \u003d ProfileWindowManager.getInstance();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                recommendArguments \u003d new RecommendArguments.Builder().withCalories(profileWindowManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .extractCalories())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withDifficulty(profileWindowManager.extractDifficulty())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withDuration(profileWindowManager.extractDuration()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                recommendArguments \u003d new RecommendArguments.Builder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return new RecommendCommand(recommendArguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private RecommendArguments getRecommendArguments(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments.Builder recommendArgumentsBuilder \u003d new RecommendArguments.Builder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_DURATION).isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Optional\u003cDuration\u003e duration \u003d Optional.of(ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArgumentsBuilder.withDuration(duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_DIFFICULTY).isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Optional\u003cDifficulty\u003e difficulty \u003d Optional.of(ParserUtil.parseDifficulty(argMultimap"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArgumentsBuilder.withDifficulty(difficulty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!argMultimap.getAllValues(PREFIX_CALORIES).isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            Optional\u003cCalories\u003e calories \u003d Optional.of(ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArgumentsBuilder.withCalories(calories);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return recommendArgumentsBuilder.build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns true if at least one of the prefixes contains non-empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Remark remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yicheng12": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrackCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.commands.TrackCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Parses input arguments and creates a new TrackCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackCommandParser implements Parser\u003cTrackCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code TrackCommand}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * and returns a {@code TrackCommand} object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TYPE, PREFIX_DURATION, PREFIX_DIFFICULTY,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        PREFIX_EQUIPMENT, PREFIX_MUSCLE, PREFIX_CALORIES, PREFIX_INSTRUCTION, PREFIX_TAG,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        PREFIX_REMARK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // check 1: no subcommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // check 2: no prefixes present"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // check 3: more than one prefix present"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                || !areAnyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE, PREFIX_DURATION, PREFIX_DIFFICULTY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                PREFIX_EQUIPMENT, PREFIX_MUSCLE, PREFIX_CALORIES, PREFIX_INSTRUCTION, PREFIX_TAG, PREFIX_REMARK)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                || areMultipleParametersPresent(argMultimap)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String subcommand \u003d ParserUtil.parseSubcommand(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Prefix prefix \u003d argMultimap.getTheOnlyPrefix();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String value \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (prefix.equals(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d name.fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_TYPE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d type.fullType;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_DURATION)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d duration.fullDuration;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_DIFFICULTY)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d difficulty.fullDifficulty;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_EQUIPMENT)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Equipment equipment \u003d ParserUtil.parseEquipment(argMultimap.getValue(PREFIX_EQUIPMENT).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d equipment.fullEquipment;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_MUSCLE)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Muscle muscle \u003d ParserUtil.parseMuscle(argMultimap.getValue(PREFIX_MUSCLE).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d muscle.fullMuscle;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_CALORIES)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d calories.fullCalories;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_INSTRUCTION)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Instruction instruction \u003d ParserUtil.parseInstruction(argMultimap.getValue(PREFIX_INSTRUCTION).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d instruction.fullInstruction;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            value \u003d tag.tagName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } else if (prefix.equals(PREFIX_REMARK)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new ParseException(\"Placeholder error message until Remark is fixed\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            //to uncomment once remark is fixed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            //Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            //value \u003d remark.fullRemark;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Parameter parameter \u003d new Parameter(prefix, value);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return new TrackCommand(subcommand, parameter);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if there is only one parameter in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static boolean areMultipleParametersPresent(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return (argumentMultimap.getNumberOfArgs() \u003e 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WorkoutBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.CompleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.CurrentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.ModifyCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.TrackCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutBookParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        case CurrentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return new CurrentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        case CompleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return new CompleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        case ModifyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            return new ModifyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        case ProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return new ProfileCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        case RecommendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return new RecommendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        case TrackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return new TrackCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "sijieg": 4,
      "shouteck": 4,
      "DarylTew": 6,
      "-": 90,
      "yicheng12": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/CurrentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.CurrentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * WIP"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class CurrentCommandParser implements Parser\u003cCurrentCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CurrentCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * and returns an CurrentCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public CurrentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            Index targetIndex \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return new CurrentCommand(targetIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CurrentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 5,
      "DarylTew": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    Predicate\u003cWorkout\u003e PREDICATE_SHOW_ALL_WORKOUTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Predicate\u003cWorkout\u003e PREDICATE_SHOW_ALL_PARAMETERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void resetData(ReadOnlyWorkoutBook newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /** Returns the WorkoutBook */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    ReadOnlyWorkoutBook getWorkoutBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /** Returns the TrackedDataList */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    ReadOnlyTrackedDataList getTrackedDataList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if a workout with the same identity as {@code workout} exists in the workout book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    boolean hasWorkout(Workout workout);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Deletes the given workout."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout must exist in the workout book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void deleteWorkout(Workout target);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Adds the given workout."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code workout} must not already exist in the workout book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void addWorkout(Workout workout);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Replaces the given workout {@code target} with {@code editedWorkout}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code target} must exist in the workout book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout identity of {@code editedWorkout} must not be the same as another existing workout in the workout"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void updateWorkout(Workout target, Workout editedWorkout);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered workout list */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    ObservableList\u003cWorkout\u003e getFilteredWorkoutList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Updates the filter of the filtered workout list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered workout list */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    ObservableList\u003cParameter\u003e getFilteredTrackedDataList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Updates the filter of the filtered workout list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void updateFilteredTrackedDataList(Predicate\u003cParameter\u003e predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if the model has previous states to restore."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    boolean canUndoModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if the model has undone states to restore."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    boolean canRedoModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the model to its previous state."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void undoModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the model to its previously undone state."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void redoModel();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the model has previous workout book states to restore."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    boolean canUndoWorkoutBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the model has undone workout book states to restore."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    boolean canRedoWorkoutBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Restores the model\u0027s workout book to its previous state."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void undoWorkoutBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Restores the model\u0027s workout book to its previously undone state."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void redoWorkoutBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if the model has previous tracked data list states to restore."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    boolean canUndoTrackedDataList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if the model has undone tracked data list states to restore."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    boolean canRedoTrackedDataList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the model\u0027s tracked data list to its previous state."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void undoTrackedDataList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the model\u0027s tracked data list to its previously undone state."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void redoTrackedDataList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the current model state for undo/redo."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void commitModel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Saves the current workout book state for undo/redo."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void commitWorkoutBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the current tracked data list state for undo/redo."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void commitTrackedDataList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Sort the current workout book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    void sortFilteredWorkoutList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Adds the given parameter to the tracked data list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The parameter must not already exist in the tracked data list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void addDataToTrack(Parameter parameter);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Deletes the given parameter."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The parameter must exist in the tracked data list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void removeDataFromTrack(Parameter parameter);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if {@code parameter} exists in the tracked data list."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    boolean hasParameter(Parameter parameter);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns the filtered internal list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    List\u003cWorkout\u003e getFilteredInternalList(RecommendArguments recommendArguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 68,
      "sijieg": 33,
      "shouteck": 3,
      "-": 67,
      "yicheng12": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.model.TrackedDataChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.model.TrackedDataListChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.model.WorkoutBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Represents the in-memory model of the workout book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final VersionedWorkoutBook versionedWorkoutBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final VersionedTrackedData versionedTrackedData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final VersionedTrackedDataList versionedTrackedDataList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final FilteredList\u003cWorkout\u003e filteredWorkouts;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final FilteredList\u003cParameter\u003e filteredParameters;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Initializes a ModelManager with the given workoutBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ModelManager(ReadOnlyWorkoutBook workoutBook, ReadOnlyTrackedDataList trackedDataList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireAllNonNull(workoutBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logger.fine(\"Initializing with workout book: \" + workoutBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedData \u003d new VersionedTrackedData(new TrackedData());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedDataList \u003d new VersionedTrackedDataList(trackedDataList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        filteredParameters \u003d new FilteredList\u003c\u003e(versionedTrackedDataList.getTrackedDataList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook \u003d new VersionedWorkoutBook(workoutBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        filteredWorkouts \u003d new FilteredList\u003c\u003e(versionedWorkoutBook.getWorkoutList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this(new WorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void resetData(ReadOnlyWorkoutBook newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ReadOnlyWorkoutBook getWorkoutBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return versionedWorkoutBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ReadOnlyTrackedDataList getTrackedDataList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return versionedTrackedDataList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void indicateWorkoutBookChanged() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        raise(new WorkoutBookChangedEvent(versionedWorkoutBook));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void indicateTrackedDataChanged() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        raise(new TrackedDataChangedEvent(versionedTrackedData));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void indicateTrackedDataListChanged() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        raise(new TrackedDataListChangedEvent(versionedTrackedDataList));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireNonNull(workout);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return versionedWorkoutBook.hasWorkout(workout);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void deleteWorkout(Workout target) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.removeWorkout(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void addWorkout(Workout workout) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.addWorkout(workout);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void addDataToTrack(Parameter parameter) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedDataList.addParameter(parameter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        indicateTrackedDataListChanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void removeDataFromTrack(Parameter parameter) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedDataList.removeParameter(parameter);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        indicateTrackedDataListChanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean hasParameter(Parameter parameter) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return versionedTrackedDataList.hasParameter(parameter);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void sortFilteredWorkoutList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        versionedWorkoutBook.sortFilteredWorkoutList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public List\u003cWorkout\u003e getFilteredInternalList(RecommendArguments recommendArguments) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return versionedWorkoutBook.getFilteredInternalList(recommendArguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void updateWorkout(Workout target, Workout editedWorkout) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireAllNonNull(target, editedWorkout);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.updateWorkout(target, editedWorkout);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Workout List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Workout} backed by the internal list of"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code versionedWorkoutBook}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredWorkouts);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        filteredWorkouts.setPredicate(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tracked Data List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Parameter} backed by the internal list of"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code versionedTrackedDataList}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ObservableList\u003cParameter\u003e getFilteredTrackedDataList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredParameters);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void updateFilteredTrackedDataList(Predicate\u003cParameter\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        filteredParameters.setPredicate(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canUndoModel() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return canUndoWorkoutBook()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 canUndoTrackedDataList();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canRedoModel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return canRedoWorkoutBook()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 canRedoTrackedDataList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void undoModel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        undoWorkoutBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        undoTrackedDataList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void redoModel() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        redoWorkoutBook();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        redoTrackedDataList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean canUndoWorkoutBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return versionedWorkoutBook.canUndo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean canRedoWorkoutBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return versionedWorkoutBook.canRedo();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void undoWorkoutBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.undo();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void redoWorkoutBook() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.redo();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        indicateWorkoutBookChanged();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canUndoTrackedDataList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return versionedTrackedDataList.canUndo();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canRedoTrackedDataList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return versionedTrackedDataList.canRedo();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void undoTrackedDataList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedDataList.undo();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        indicateTrackedDataListChanged();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void redoTrackedDataList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedDataList.redo();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        indicateTrackedDataListChanged();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void commitModel() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        commitWorkoutBook();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        commitTrackedDataList();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void commitWorkoutBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        versionedWorkoutBook.commit();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void commitTrackedDataList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        versionedTrackedDataList.commit();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return versionedWorkoutBook.equals(other.versionedWorkoutBook)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 filteredWorkouts.equals(other.filteredWorkouts);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 100,
      "sijieg": 54,
      "shouteck": 4,
      "-": 119,
      "yicheng12": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ProfileWindowManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.ui.ProfileWindow.USERPROFILE_FILE_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.jsoup.nodes.Document;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.jsoup.nodes.Element;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * Acts as a Facade for any methods to do with ProfileWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * Singleton Pattern"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class ProfileWindowManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String GENDER_VALIDATION_REGEX \u003d \"(male)|(female)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String HEIGHT_VALIDATION_REGEX \u003d \"\\\\d{1}\\\\.\\\\d{2}\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String WEIGHT_VALIDATION_REGEX \u003d \"\\\\d{2,3}\\\\.\\\\d{1}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}|\u0027][\\\\p{Alnum} |\u0027 ]*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static ProfileWindowManager singleInstance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element height;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element weight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element calories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element difficulty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Element bmi;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Document doc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private ProfileWindowManager() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        fileName \u003d getClass().getResource(USERPROFILE_FILE_PATH).toString().substring(6);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        doc \u003d Jsoup.parse(new File(fileName), \"UTF-8\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.gender \u003d doc.getElementById(\"gender\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.username \u003d doc.getElementById(\"username\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.height \u003d doc.getElementById(\"height\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.weight \u003d doc.getElementById(\"weight\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.calories \u003d doc.getElementById(\"calories\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.difficulty \u003d doc.getElementById(\"difficulty\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.duration \u003d doc.getElementById(\"duration\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.bmi \u003d doc.getElementById(\"bmi\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static ProfileWindowManager getInstance() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (singleInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            synchronized (ProfileWindowManager.class) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                singleInstance \u003d new ProfileWindowManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return singleInstance;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Writes to File."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void writeToFile() throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        File temp \u003d File.createTempFile(\"tempfile\", \".html\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        FileUtils.writeStringToFile(temp, doc.outerHtml(), \"UTF-8\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        File newFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        org.apache.commons.io.FileUtils.copyFile(temp, newFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        org.apache.commons.io.FileUtils.forceDelete(temp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getGender() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getUsername() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getHeight() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getWeight() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getCalories() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getDifficulty() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getDuration() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Element getBmi() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return bmi;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.gender.text(gender);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setUsername(String username) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.username.text(username);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setHeight(String height) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.height.text(height);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setWeight(String weight) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.weight.text(weight);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setCalories(String calories) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.calories.text(calories);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.difficulty.text(difficulty);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setDuration(String duration) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.duration.text(duration);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setBmi(String bmi) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.bmi.text(bmi);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String extractHeight(String height) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        height \u003d height.replaceFirst(\"Height: \", \"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        height \u003d height.replaceFirst(\"m\", \"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String extractWeight(String weight) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        weight \u003d weight.replaceFirst(\"kg\", \"\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        weight \u003d weight.replaceFirst(\"Weight: \", \"\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Trims the string calories"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String trimmedCalories(String calories) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        calories \u003d calories.replaceFirst(\"Calories: \", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Trims the string duration"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String trimmedDuration(String duration) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        duration \u003d duration.replaceFirst(\"Duration: \", \"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        duration \u003d duration.replaceFirst(\"m\", \"\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Trims the string difficulty"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String trimmedDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        difficulty \u003d difficulty.replaceFirst(\"Difficulty: \", \"\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Optional\u003cCalories\u003e extractCalories() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return Optional.of(new Calories(calories.ownText().substring(10)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Optional\u003cDifficulty\u003e extractDifficulty() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return Optional.of(new Difficulty(difficulty.ownText().substring(12)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Optional\u003cDuration\u003e extractDuration() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return Optional.of(new Duration(duration.ownText().substring(10)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * @param height"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * @param weight"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * @return bmi"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public double calculateBmi(String height, String weight) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        double h \u003d Double.parseDouble(extractHeight(height));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        double w \u003d Double.parseDouble(extractWeight(weight));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return w / (h * h);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Converts a String to integer."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @param string to be converted"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @return integer"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public int convertStringIntoInt(String string) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        int integer \u003d Integer.parseInt(string);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return integer;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns true if the given string is a valid gender"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isValidGender(String gender) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return gender.toLowerCase().matches(GENDER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns true if the given string is a valid height"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isValidHeight(String height) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return height.matches(HEIGHT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns true if the given string is a valid weight"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isValidWeight(String weight) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return weight.matches(WEIGHT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns true if the given string is a valid username"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isValidUsername(String username) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return username.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the first difficulty is more difficult than the second difficulty"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean isMoreDifficult(String first, String second) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (first \u003d\u003d \"beginner\") {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if ((first \u003d\u003d \"intermediate\") \u0026\u0026 (second \u003d\u003d \"beginner\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if ((first \u003d\u003d \"advanced\") \u0026\u0026 ((second \u003d\u003d \"beginner\") || (second \u003d\u003d \"intermediate\"))) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the first calories is higher or equal than the second calories"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean isHigherCalories(int first, int second) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (first \u003e\u003d second) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the first duration is higher or equal than the second duration"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean isHigherDuration(int first, int second) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (first \u003e\u003d second) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 73,
      "shouteck": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTrackedData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Unmodifiable view of a Tracked data workoutbook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public interface ReadOnlyTrackedData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns an unmodifiable view of a tracked data workoutbook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * This list will not contain any duplicate workout."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    ObservableList\u003cWorkout\u003e getTrackedData();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTrackedDataList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Unmodifiable view of a list of tracked parameters"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public interface ReadOnlyTrackedDataList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns an unmodifiable view of a list of tracked parameters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * This list will not contain any duplicate parameter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    ObservableList\u003cParameter\u003e getTrackedDataList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyWorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Unmodifiable view of an workout book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public interface ReadOnlyWorkoutBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns an unmodifiable view of the workouts list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * This list will not contain any duplicate workout."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    ObservableList\u003cWorkout\u003e getWorkoutList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RecommendArguments.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": " * Represents a Recommend arguments in the workout book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class RecommendArguments {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Optional\u003cCalories\u003e calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Optional\u003cDifficulty\u003e difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Optional\u003cDuration\u003e duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Builder pattern"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static class Builder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        private Optional\u003cCalories\u003e calories \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        private Optional\u003cDifficulty\u003e difficulty \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        private Optional\u003cDuration\u003e duration \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public Builder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         * Calories setter for Builder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public Builder withCalories(Optional\u003cCalories\u003e calories) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         * Difficulty setter for Builder"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public Builder withDifficulty(Optional\u003cDifficulty\u003e difficulty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         * Duration setter for Builder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public Builder withDuration(Optional\u003cDuration\u003e duration) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         * Main constructor for RecommendArguments"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public RecommendArguments build() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            RecommendArguments recommendArguments \u003d new RecommendArguments();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArguments.setCalories(this.calories);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArguments.setDifficulty(this.difficulty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            recommendArguments.setDuration(this.duration);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return recommendArguments;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private RecommendArguments() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Returns true if both recommend arguments have the same identity and data fields."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * This defines a stronger notion of equality between two recommend arguments."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!(other instanceof RecommendArguments)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments otherRecommendArguments \u003d (RecommendArguments) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return ((otherRecommendArguments.isCaloriesNull() \u0026\u0026 isCaloriesNull())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                || otherRecommendArguments.getCalories().equals(getCalories()))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 ((otherRecommendArguments.isDifficultyNull() \u0026\u0026 isDifficultyNull())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                || otherRecommendArguments.getDifficulty().equals(getDifficulty()))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 ((otherRecommendArguments.isDurationNull() \u0026\u0026 isDurationNull())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                || otherRecommendArguments.getDuration().equals(getDuration()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return calories.get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return difficulty.get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return duration.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setCalories(Optional\u003cCalories\u003e calories) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setDifficulty(Optional\u003cDifficulty\u003e difficulty) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setDuration(Optional\u003cDuration\u003e duration) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isCaloriesNull() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return !calories.isPresent();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isDifficultyNull() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return !difficulty.isPresent();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public boolean isDurationNull() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return !duration.isPresent();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TrackedData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.UniqueWorkoutList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Analogous to WorkoutBook; wraps all data at the workout-book level, for each tracked parameter"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Duplicates are not allowed (by .isSameWorkout comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedData implements ReadOnlyTrackedData {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final UniqueWorkoutList workouts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        workouts \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedData() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Creates an TrackedData workout book using the Workouts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedData(ReadOnlyTrackedData toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Replaces the contents of the Workout list with {@code workouts}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code workouts} must not contain duplicate workouts."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void setWorkouts(List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.workouts.setWorkouts(workouts);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Resets the existing data of this {@code TrackedData} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void resetData(ReadOnlyTrackedData newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        setWorkouts(newData.getTrackedData());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //// workout-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a workout with the same identity as {@code workout} exists in the tracked data."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(workout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return workouts.contains(workout);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Adds a workout to the tracked data workout book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The workout must not already exist in the tracked data workout book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void addWorkout(Workout w) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        workouts.add(w);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void sortFilteredWorkoutList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        workouts.sort();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Removes {@code key} from this {@code TrackedData}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code key} must exist in the workout book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void removeWorkout(Workout key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        workouts.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return workouts.asUnmodifiableObservableList().size() + \" workouts\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getTrackedData() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return workouts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                || (other instanceof TrackedData // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 workouts.equals(((TrackedData) other).workouts));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return workouts.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TrackedDataList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.UniqueParameterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Wraps all data at the tracked data list level, for each tracked parameter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedDataList implements ReadOnlyTrackedDataList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final UniqueParameterList parameters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        parameters \u003d new UniqueParameterList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataList() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Creates an TrackedDataList using the tracked parameters in {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataList(ReadOnlyTrackedDataList toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Replaces the contents of the TrackedDataList with {@code parameters}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code workouts} must not contain duplicate workouts."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void setWorkouts(List\u003cParameter\u003e parameters) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.parameters.setParameters(parameters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public List\u003cParameter\u003e getFilteredInternalList (Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.getFilteredInternalList(prefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public List\u003cParameter\u003e getFilteredInternalList (String value) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.getFilteredInternalList(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Resets the existing data of this {@code TrackedDataList} with {@code newData}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void resetData(ReadOnlyTrackedDataList newData) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        setWorkouts(newData.getTrackedDataList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //// parameter-level operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a parameter with the same identity as {@code parameter} exists in the tracked data list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean hasParameter(Parameter parameter) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(parameter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.contains(parameter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Adds a parameter to the tracked data list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The parameter must not already exist in the tracked data list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void addParameter(Parameter parameter) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        parameters.add(parameter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Removes {@code key} from this {@code TrackedDataList}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code key} must exist in the TrackedDataList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void removeParameter(Parameter key) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        parameters.remove(key);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.asUnmodifiableObservableList().size() + \" parameters\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ObservableList\u003cParameter\u003e getTrackedDataList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                || (other instanceof TrackedDataList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 parameters.equals(((TrackedDataList) other).parameters));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Path workoutBookFilePath \u003d Paths.get(\"data\" , \"workoutbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Path trackedDataListFilePath \u003d Paths.get(\"data\" , \"trackeddatalist.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Path getWorkoutBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void setWorkoutBookFilePath(Path workoutBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.workoutBookFilePath \u003d workoutBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Path getTrackedDataListFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return trackedDataListFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void setTrackedDataListFilePath(Path trackedDataFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.trackedDataListFilePath \u003d trackedDataFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(workoutBookFilePath, o.workoutBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return Objects.hash(guiSettings, workoutBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + workoutBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 8,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTrackedData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * {@code WorkoutBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class VersionedTrackedData extends TrackedData {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final List\u003cReadOnlyTrackedData\u003e trackedDataStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public VersionedTrackedData(ReadOnlyTrackedData initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataStateList.add(new TrackedData(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves a copy of the current {@code TrackedData} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataStateList.add(new TrackedData(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataStateList.subList(currentStatePointer + 1, trackedDataStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the workout book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        resetData(trackedDataStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the workout book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        resetData(trackedDataStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if {@code undo()} has tracked data states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if {@code redo()} has tracked data states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return currentStatePointer \u003c trackedDataStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof VersionedTrackedData)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        VersionedTrackedData otherVersionedTrackedData \u003d (VersionedTrackedData) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return super.equals(otherVersionedTrackedData)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 trackedDataStateList.equals(otherVersionedTrackedData.trackedDataStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTrackedData.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            super(\"Current state pointer at start of trackedDataState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            super(\"Current state pointer at end of trackedDataState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTrackedDataList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * {@code TrackedDataList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class VersionedTrackedDataList extends TrackedDataList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final List\u003cReadOnlyTrackedDataList\u003e trackedDataListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public VersionedTrackedDataList(ReadOnlyTrackedDataList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListStateList.add(new TrackedDataList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves a copy of the current {@code TrackedDataList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListStateList.add(new TrackedDataList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListStateList.subList(currentStatePointer + 1, trackedDataListStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the TrackedDataList to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        resetData(trackedDataListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Restores the TrackedDataList to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        resetData(trackedDataListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if {@code undo()} has tracked data states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if {@code redo()} has tracked data states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return currentStatePointer \u003c trackedDataListStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof VersionedTrackedDataList)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        VersionedTrackedDataList otherVersionedTrackedDataList \u003d (VersionedTrackedDataList) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return super.equals(otherVersionedTrackedDataList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 trackedDataListStateList.equals(otherVersionedTrackedDataList.trackedDataListStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTrackedDataList.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            super(\"Current state pointer at start of trackedDataListState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            super(\"Current state pointer at end of trackedDataListState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedWorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * {@code WorkoutBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class VersionedWorkoutBook extends WorkoutBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final List\u003cReadOnlyWorkoutBook\u003e workoutBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public VersionedWorkoutBook(ReadOnlyWorkoutBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBookStateList.add(new WorkoutBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Saves a copy of the current {@code WorkoutBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBookStateList.add(new WorkoutBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBookStateList.subList(currentStatePointer + 1, workoutBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Restores the workout book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        resetData(workoutBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Restores the workout book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        resetData(workoutBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if {@code undo()} has workout book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if {@code redo()} has workout book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return currentStatePointer \u003c workoutBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!(other instanceof VersionedWorkoutBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        VersionedWorkoutBook otherVersionedWorkoutBook \u003d (VersionedWorkoutBook) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return super.equals(otherVersionedWorkoutBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 workoutBookStateList.equals(otherVersionedWorkoutBook.workoutBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedWorkoutBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            super(\"Current state pointer at start of workoutBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            super(\"Current state pointer at end of workoutBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 23,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/WorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.UniqueWorkoutList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Wraps all data at the workout-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Duplicates are not allowed (by .isSameWorkout comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutBook implements ReadOnlyWorkoutBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final UniqueWorkoutList workouts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workouts \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Creates an WorkoutBook using the Workouts in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBook(ReadOnlyWorkoutBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Replaces the contents of the Workout list with {@code workouts}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code workouts} must not contain duplicate workouts."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void setWorkouts(List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.workouts.setWorkouts(workouts);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public List\u003cWorkout\u003e getFilteredInternalList (RecommendArguments recommendArguments) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return workouts.getFilteredInternalList(recommendArguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Resets the existing data of this {@code WorkoutBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void resetData(ReadOnlyWorkoutBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        setWorkouts(newData.getWorkoutList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    //// workout-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if a workout with the same identity as {@code workout} exists in the workout book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireNonNull(workout);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workouts.contains(workout);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Adds a workout to the workout book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout must not already exist in the workout book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void addWorkout(Workout w) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workouts.add(w);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Replaces the given workout {@code target} in the list with {@code editedWorkout}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code target} must exist in the workout book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout identity of {@code editedWorkout} must not be the same as another existing workout in the workout"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void updateWorkout(Workout target, Workout editedWorkout) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireNonNull(editedWorkout);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workouts.setWorkout(target, editedWorkout);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void sortFilteredWorkoutList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        workouts.sort();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Removes {@code key} from this {@code WorkoutBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code key} must exist in the workout book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void removeWorkout(Workout key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workouts.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workouts.asUnmodifiableObservableList().size() + \" workouts\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ObservableList\u003cWorkout\u003e getWorkoutList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workouts.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                || (other instanceof WorkoutBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 workouts.equals(((WorkoutBook) other).workouts));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workouts.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "sijieg": 118,
      "shouteck": 5,
      "yicheng12": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Contains utility methods for populating {@code WorkoutBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static Workout[] getSampleWorkouts() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return new Workout[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            new Workout(new Name(\"alex yeoh\u0027s workout\"), new Type(\"strength\"), new Duration(\"20m\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    new Difficulty(\"beginner\"), new Equipment(\"dumbbell\"), new Muscle(\"tricep\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    new Calories(\"150\"), new Instruction(\"set1: tricep extension reps: 4-6\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                    getTagSet(\"heavy\", \"morning\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                    new Remark(\"This is a great upper body workout, targeting the muscles in arms,\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                            + \" the shoulders, the center and your back.\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            )"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static ReadOnlyWorkoutBook getSampleWorkoutBook() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        WorkoutBook sampleWb \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        for (Workout sampleWorkout : getSampleWorkouts()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            sampleWb.addWorkout(sampleWorkout);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return sampleWb;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static ReadOnlyTrackedDataList getEmptyTrackedDataList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackedDataList emptyTrackedDataList \u003d new TrackedDataList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return emptyTrackedDataList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 13,
      "sijieg": 15,
      "shouteck": 2,
      "-": 27,
      "yicheng12": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Calories.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Calories in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCalories(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String MESSAGE_CALORIES_CONSTRAINTS \u003d \"Calories must a positive integer\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            + \" from 1 to 1000, inclusive of 1 and 1000.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String CALORIES_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|1000)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullCalories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param calories A valid calories value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Calories(String calories) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidCalories(calories), MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullCalories \u003d calories;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid calories value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static boolean isValidCalories(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return test.matches(CALORIES_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullCalories;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullCalories.equals(((Calories) other).fullCalories)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullCalories.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 4,
      "shouteck": 4,
      "DarylTew": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Difficulty.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Difficulty in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDifficulty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Difficulty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_DIFFICULTY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Difficulty should only be either beginner, intermediate or advanced.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String DIFFICULTY_VALIDATION_REGEX \u003d \"(beginner)|(intermediate)|(advanced)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullDifficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Difficulty}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param difficulty A valid difficulty."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullDifficulty \u003d difficulty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return test.matches(DIFFICULTY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullDifficulty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Difficulty // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullDifficulty.equals(((Difficulty) other).fullDifficulty)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullDifficulty.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 1,
      "shouteck": 1,
      "DarylTew": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Duration.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Duration in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDuration(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_DURATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Duration can only be in this format: 20m, from 1m to 1000m, inclusive of 1m and 1000m.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String DURATION_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"([1-9]|[1-8][0-9]|9[0-9]|[1-8][0-9]{2}|9[0-8][0-9]|99[0-9]|1000)[m]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullDuration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param duration A valid duration."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Duration(String duration) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullDuration \u003d duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid duration."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return test.matches(DURATION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullDuration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullDuration.equals(((Duration) other).fullDuration)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullDuration.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "sijieg": 1,
      "shouteck": 3,
      "DarylTew": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/DurationPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * Tests that a {@code Workout}\u0027s {@code Duration} matches any of the duration given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class DurationPredicate implements Predicate\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public DurationPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean test(Workout workout) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(workout.getDuration().fullDuration, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                || (other instanceof DurationPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 keywords.equals(((DurationPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 2,
      "yicheng12": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Equipment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Equipment in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEquipment(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Equipment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_EQUIPMENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Equipment should only contain names separated by commas, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String EQUIPMENT_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}|,][\\\\p{Alpha} |, ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullEquipment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Equipment}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param equipment A valid equipment."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Equipment(String equipment) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(equipment);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidEquipment(equipment), MESSAGE_EQUIPMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullEquipment \u003d equipment;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid equipment."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static boolean isValidEquipment(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return test.matches(EQUIPMENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullEquipment;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Equipment // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullEquipment.equals(((Equipment) other).fullEquipment)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullEquipment.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 1,
      "shouteck": 1,
      "DarylTew": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/EquipmentPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * Tests that a {@code Workout}\u0027s {@code Equipment} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class EquipmentPredicate implements Predicate\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public EquipmentPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean test(Workout workout) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(workout.getEquipment().fullEquipment, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                || (other instanceof EquipmentPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 keywords.equals(((EquipmentPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 2,
      "yicheng12": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Instruction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Instruction in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInstruction(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Instruction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_INSTRUCTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            \"Instruction should only contain alphanumeric characters , punctuation, and spaces,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    + \"and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INSTRUCTION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}|\\\\p{Punct}][\\\\p{Alnum} |\\\\p{Punct} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullInstruction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Instruction}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param instruction A valid instruction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Instruction(String instruction) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(instruction);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidInstruction(instruction), MESSAGE_INSTRUCTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullInstruction \u003d instruction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid instruction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static boolean isValidInstruction(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return test.matches(INSTRUCTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullInstruction;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Instruction // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullInstruction.equals(((Instruction) other).fullInstruction)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullInstruction.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 4,
      "sijieg": 4,
      "shouteck": 1,
      "DarylTew": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Muscle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Muscle in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMuscle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Muscle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_MUSCLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Muscle should only contain names separated by commas, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MUSCLE_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}|,][\\\\p{Alpha} |, ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullMuscle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Muscle}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param muscle A valid muscle."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Muscle(String muscle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(muscle);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidMuscle(muscle), MESSAGE_MUSCLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullMuscle \u003d muscle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid muscle."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static boolean isValidMuscle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return test.matches(MUSCLE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullMuscle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Muscle // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullMuscle.equals(((Muscle) other).fullMuscle)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullMuscle.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 1,
      "shouteck": 1,
      "DarylTew": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s name in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Names should only contain alphanumeric characters, apostrophes, and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}|\u0027][\\\\p{Alnum} |\u0027 ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "sijieg": 1,
      "shouteck": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Tests that a {@code Workout}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean test(Workout workout) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(workout.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Parameter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Parameter in the tracked data list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class Parameter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Parameter(Prefix prefix, String value) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof Parameter)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Parameter otherParameter \u003d (Parameter) other;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return otherParameter.getPrefix().equals(getPrefix())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 otherParameter.getValue().equals(getValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        builder.append(\"Prefix: \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .append(getPrefix())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .append(\" Value: \")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .append(getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import com.google.common.base.Strings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * Represents a Workout\u0027s remark in the workout book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Remark can take any values, and it should no be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public final String fullRemark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Constructs a {@code Muscle}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        fullRemark \u003d remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return test \u003d\u003d null || Strings.isNullOrEmpty(test) || test.matches(REMARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return fullRemark;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 fullRemark.equals(((Remark) other).fullRemark)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return fullRemark.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "shouteck": 1,
      "yicheng12": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Type.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a Workout\u0027s Type in the workout book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MESSAGE_TYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            \"Types should only contain names separated by commas, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String TYPE_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}|,][\\\\p{Alpha} |, ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final String fullType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Constructs a {@code Type}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * @param type A valid type."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        fullType \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if a given string is a valid type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return test.matches(TYPE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 fullType.equals(((Type) other).fullType)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return fullType.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 1,
      "shouteck": 1,
      "DarylTew": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/TypePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * Tests that a {@code Workout}\u0027s {@code Type} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class TypePredicate implements Predicate\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public TypePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean test(Workout workout) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(workout.getType().fullType, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                || (other instanceof TypePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 keywords.equals(((TypePredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 2,
      "yicheng12": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/UniqueParameterList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.exceptions.DuplicateParameterException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.exceptions.ParameterNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * A list of parameters that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * A parameter is considered unique by comparing using {@code Parameter#equals(Object)}. As such, adding and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * updating of parameters uses Parameter#equals(Object) for equality so as to ensure that the parameter being added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * or updated is unique in terms of identity in the UniqueParameterList. The removal of a parameter also uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Parameter#equals(Object) so as to ensure that the workout with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * @see Parameter#equals(Object)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class UniqueParameterList implements Iterable\u003cParameter\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final ObservableList\u003cParameter\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public List\u003cParameter\u003e getFilteredInternalList (Prefix prefix) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .filter(w -\u003e w.getPrefix().getPrefix().contains(prefix.getPrefix()))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public List\u003cParameter\u003e getFilteredInternalList (String value) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .filter(w -\u003e w.getValue().contains(value))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if the list contains an equivalent parameter as the given argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean contains(Parameter toCheck) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Adds a parameter to the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The parameter must not already exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void add(Parameter toAdd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new DuplicateParameterException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Sorts the parameters in the list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        internalList.sort(new Comparator\u003cParameter\u003e() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            public int compare(Parameter o1, Parameter o2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                return o1.getPrefix().getPrefix().compareTo(o2.getPrefix().getPrefix());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Removes the equivalent parameter from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * The parameter must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void remove(Parameter toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new ParameterNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void setWorkouts(UniqueParameterList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Replaces the contents of this list with {@code parameters}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code parameters} must not contain duplicate workouts."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void setParameters(List\u003cParameter\u003e parameters) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireAllNonNull(parameters);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!parametersAreUnique(parameters)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new DuplicateParameterException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        internalList.setAll(parameters);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ObservableList\u003cParameter\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Iterator\u003cParameter\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                || (other instanceof UniqueParameterList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueParameterList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns true if {@code parameters} contains only unique parameters."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private boolean parametersAreUnique(List\u003cParameter\u003e parameters) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        for (int i \u003d 0; i \u003c parameters.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c parameters.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                if (parameters.get(i).equals(parameters.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/UniqueWorkoutList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.RecommendArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.exceptions.DuplicateWorkoutException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.exceptions.WorkoutNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * A list of workouts that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * A workout is considered unique by comparing using {@code Workout#isSameWorkout(Workout)}. As such, adding and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * updating of workouts uses Workout#isSameWorkout(Workout) for equality so as to ensure that the workout being added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * or updated is unique in terms of identity in the UniqueWorkoutList. However, the removal of a workout uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Workout#equals(Object) so as to ensure that the workout with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * @see Workout#isSameWorkout(Workout)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class UniqueWorkoutList implements Iterable\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final ObservableList\u003cWorkout\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public List\u003cWorkout\u003e getFilteredInternalList (RecommendArguments recommendArguments) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .filter(!recommendArguments.isCaloriesNull() ? w -\u003e w.getCalories().toString()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .equals(recommendArguments.getCalories().toString()) : w -\u003e w !\u003d null)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .filter(!recommendArguments.isDifficultyNull() ? w -\u003e w.getDifficulty().toString()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .equals(recommendArguments.getDifficulty().toString()) : w -\u003e w !\u003d null)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .filter(!recommendArguments.isDurationNull() ? w -\u003e w.getDuration().toString()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .equals(recommendArguments.getDuration().toString()) : w -\u003e w !\u003d null)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the list contains an equivalent workout as the given argument."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean contains(Workout toCheck) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameWorkout);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Adds a workout to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void add(Workout toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new DuplicateWorkoutException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sorts the workout in the list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        internalList.sort(new Comparator\u003cWorkout\u003e() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            public int compare(Workout o1, Workout o2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                return o1.getName().fullName.compareTo(o2.getName().fullName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Replaces the workout {@code target} in the list with {@code editedWorkout}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout identity of {@code editedWorkout} must not be the same as another existing workout in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void setWorkout(Workout target, Workout editedWorkout) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireAllNonNull(target, editedWorkout);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new WorkoutNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!target.isSameWorkout(editedWorkout) \u0026\u0026 contains(editedWorkout)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new DuplicateWorkoutException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        internalList.set(index, editedWorkout);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Removes the equivalent workout from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * The workout must exist in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void remove(Workout toRemove) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new WorkoutNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void setWorkouts(UniqueWorkoutList replacement) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Replaces the contents of this list with {@code workouts}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code workouts} must not contain duplicate workouts."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void setWorkouts(List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireAllNonNull(workouts);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!workoutsAreUnique(workouts)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new DuplicateWorkoutException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        internalList.setAll(workouts);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ObservableList\u003cWorkout\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Iterator\u003cWorkout\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                || (other instanceof UniqueWorkoutList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueWorkoutList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if {@code workouts} contains only unique workouts."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private boolean workoutsAreUnique(List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        for (int i \u003d 0; i \u003c workouts.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c workouts.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                if (workouts.get(i).isSameWorkout(workouts.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 50,
      "shouteck": 13,
      "DarylTew": 88,
      "yicheng12": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/Workout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Represents a Workout in the workout book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class Workout {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Difficulty difficulty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Equipment equipment;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Muscle muscle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Instruction instruction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Workout(Name name, Type type, Duration duration, Difficulty difficulty, Equipment equipment,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                  Muscle muscle, Calories calories, Instruction instruction, Set\u003cTag\u003e tags, Remark remark) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        requireAllNonNull(name, type, duration, difficulty, equipment, muscle, calories, instruction, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.equipment \u003d equipment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.muscle \u003d muscle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Equipment getEquipment() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return equipment;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Muscle getMuscle() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return muscle;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Instruction getInstruction() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return instruction;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return remark; }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if both workouts have the same name or all the other fields are the same"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * This defines a weaker notion of equality between two workouts."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean isSameWorkout(Workout otherWorkout) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (otherWorkout \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return otherWorkout !\u003d null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                \u0026\u0026 ((otherWorkout.getName().equals(getName()))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                || (otherWorkout.getType().equals(getType()) \u0026\u0026 otherWorkout.getDuration().equals(getDuration())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getDifficulty().equals(getDifficulty())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getEquipment().equals(getEquipment())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getMuscle().equals(getMuscle()) \u0026\u0026 otherWorkout.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getInstruction().equals(getInstruction())));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if both workouts have the same identity and data fields."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * This defines a stronger notion of equality between two workouts."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!(other instanceof Workout)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout otherWorkout \u003d (Workout) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return otherWorkout.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getType().equals(getType())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getDuration().equals(getDuration())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getDifficulty().equals(getDifficulty())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getEquipment().equals(getEquipment())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getMuscle().equals(getMuscle())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getInstruction().equals(getInstruction())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 otherWorkout.getTags().equals(getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return Objects.hash(name, type, duration, difficulty, equipment, muscle, calories, instruction, tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getDuration())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Difficulty: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getDifficulty())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Equipment: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getEquipment())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Muscle: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getMuscle())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getCalories())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Instruction: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(getInstruction())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 29,
      "shouteck": 3,
      "DarylTew": 126,
      "yicheng12": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/exceptions/DuplicateParameterException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model.workout.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Signals that the operation will result in duplicate Parameters"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class DuplicateParameterException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public DuplicateParameterException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        super(\"Operation would result in duplicate parameters\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/exceptions/DuplicateWorkoutException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Signals that the operation will result in duplicate Workouts (Workouts are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class DuplicateWorkoutException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public DuplicateWorkoutException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        super(\"Operation would result in duplicate workouts\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/exceptions/ParameterNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.model.workout.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Signals that the operation is unable to find the specified parameter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class ParameterNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/workout/exceptions/WorkoutNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.model.workout.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Signals that the operation is unable to find the specified workout."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.model.TrackedDataListChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.model.WorkoutBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public interface Storage extends WorkoutBookStorage, UserPrefsStorage, TrackedDataListStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    Path getWorkoutBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void saveTrackedDataList(ReadOnlyTrackedDataList trackedData) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Saves the current version of the Workout Book to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void handleWorkoutBookChangedEvent(WorkoutBookChangedEvent abce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the current version of the tracked data to the hard disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *   Creates the data file(s) if it is missing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void handleTrackedDataListChangedEvent(TrackedDataListChangedEvent trackedDataListChanged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 15,
      "sijieg": 7,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.model.TrackedDataListChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.model.WorkoutBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Manages storage of WorkoutBook data and Tracked Data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private WorkoutBookStorage workoutBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private TrackedDataListStorage trackedDataListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public StorageManager(WorkoutBookStorage workoutBookStorage, TrackedDataListStorage trackedDataListStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.workoutBookStorage \u003d workoutBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.trackedDataListStorage \u003d trackedDataListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WorkoutBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Path getWorkoutBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutBookStorage.getWorkoutBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return readWorkoutBook(workoutBookStorage.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutBookStorage.readWorkoutBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        saveWorkoutBook(workoutBook, workoutBookStorage.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBookStorage.saveWorkoutBook(workoutBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void handleWorkoutBookChangedEvent(WorkoutBookChangedEvent event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            saveWorkoutBook(event.data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TrackedDataList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Path getTrackedDataListFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return trackedDataListStorage.getTrackedDataListFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return readTrackedDataList(trackedDataListStorage.getTrackedDataListFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return trackedDataListStorage.readTrackedDataList(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveTrackedDataList(ReadOnlyTrackedDataList trackedDataList) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        saveTrackedDataList(trackedDataList, trackedDataListStorage.getTrackedDataListFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveTrackedDataList(ReadOnlyTrackedDataList trackedDataList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListStorage.saveTrackedDataList(trackedDataList, filePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void handleTrackedDataListChangedEvent(TrackedDataListChangedEvent trackedDataListChanged) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(trackedDataListChanged,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \"Tracked data list changed, saving to file\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            saveTrackedDataList(trackedDataListChanged.data);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 48,
      "sijieg": 17,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TrackedDataListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a storage for {@link seedu.address.model.WorkoutBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public interface TrackedDataListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Path getTrackedDataListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns Tracked data as a {@link ReadOnlyTrackedDataList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @see #getTrackedDataListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the given {@link ReadOnlyTrackedDataList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param trackedData cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void saveTrackedDataList(ReadOnlyTrackedDataList trackedData) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @see #saveTrackedDataList(ReadOnlyTrackedDataList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void saveTrackedDataList(ReadOnlyTrackedDataList trackedData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TrackedDataStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Represents a storage for {@link seedu.address.model.WorkoutBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public interface TrackedDataStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Path getTrackedDataFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns Tracked data as a {@link ReadOnlyTrackedData}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Optional\u003cReadOnlyTrackedData\u003e readTrackedData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @see #getTrackedDataFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    Optional\u003cReadOnlyTrackedData\u003e readTrackedData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the given {@link ReadOnlyTrackedData} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param trackedData cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void saveTrackedData(ReadOnlyTrackedData trackedData) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @see #saveTrackedData(ReadOnlyTrackedData)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    void saveTrackedData(ReadOnlyTrackedData trackedData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/WorkoutBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Represents a storage for {@link seedu.address.model.WorkoutBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public interface WorkoutBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    Path getWorkoutBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns WorkoutBook data as a {@link ReadOnlyWorkoutBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @see #getWorkoutBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Saves the given {@link ReadOnlyWorkoutBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @param workoutBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @see #saveWorkoutBook(ReadOnlyWorkoutBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedParameter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * JAXB-friendly version of the Workout."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlAdaptedParameter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Parameter\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private String prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Constructs an XmlAdaptedParameter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlAdaptedParameter() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Constructs an {@code XmlAdaptedParameter} with the given parameter details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlAdaptedParameter(String prefix, String value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Converts a given Parameter into this class for JAXB use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedParameter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlAdaptedParameter(Parameter source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        prefix \u003d source.getPrefix().getPrefix();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        value \u003d source.getValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Converts this jaxb-friendly adapted parameter object into the model\u0027s Parameter object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Workout"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Parameter toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (prefix \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Prefix.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final Prefix modelPrefix \u003d new Prefix(prefix);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"value\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final String modelValue \u003d value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return new Parameter(modelPrefix, modelValue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof XmlAdaptedParameter)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedParameter otherParameter \u003d (XmlAdaptedParameter) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return Objects.equals(prefix, otherParameter.prefix)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 Objects.equals(value, otherParameter.value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedWorkout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * JAXB-friendly version of the Workout"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class XmlAdaptedWorkout {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Workout\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String difficulty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String equipment;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String muscle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String calories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private String instruction;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Constructs an XmlAdaptedWorkout."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public XmlAdaptedWorkout() {}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Constructs an {@code XmlAdaptedWorkout} with the given workout details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public XmlAdaptedWorkout(String name, String type, String duration, String difficulty,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                             String equipment, String muscle, String calories,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                             String instruction, List\u003cXmlAdaptedTag\u003e tagged, String remark) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.equipment \u003d equipment;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.muscle \u003d muscle;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Converts a given Workout into this class for JAXB use."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedWorkout"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public XmlAdaptedWorkout(Workout source) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        type \u003d source.getType().fullType;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        duration \u003d source.getDuration().fullDuration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        difficulty \u003d source.getDifficulty().fullDifficulty;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        equipment \u003d source.getEquipment().fullEquipment;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        muscle \u003d source.getMuscle().fullMuscle;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        calories \u003d source.getCalories().fullCalories;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        instruction \u003d source.getInstruction().fullInstruction;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        remark \u003d source.getRemark() \u003d\u003d null ? \"\" : source.getRemark().fullRemark;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Converts this jaxb-friendly adapted workout object into the model\u0027s Workout object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Workout"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Workout toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        final List\u003cTag\u003e workoutTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            workoutTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Duration modelDuration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    Difficulty.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (equipment \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    Equipment.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Equipment.isValidEquipment(equipment)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Equipment.MESSAGE_EQUIPMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Equipment modelEquipment \u003d new Equipment(equipment);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (muscle \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Muscle.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Muscle.isValidMuscle(muscle)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Muscle.MESSAGE_MUSCLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Muscle modelMuscle \u003d new Muscle(muscle);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    Calories.class.getSimpleName()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        //"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        //if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        //throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        //Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (instruction \u003d\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    Instruction.class.getSimpleName()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        if (!Instruction.isValidInstruction(instruction)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new IllegalValueException(Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final Instruction modelInstruction \u003d new Instruction(instruction);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(workoutTags);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return new Workout(modelName, modelType, modelDuration, modelDifficulty, modelEquipment,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                modelMuscle, modelCalories, modelInstruction, modelTags, null);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!(other instanceof XmlAdaptedWorkout)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout otherWorkout \u003d (XmlAdaptedWorkout) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return Objects.equals(name, otherWorkout.name)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(type, otherWorkout.type)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(duration, otherWorkout.duration)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(difficulty, otherWorkout.difficulty)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(equipment, otherWorkout.equipment)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(muscle, otherWorkout.muscle)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(calories, otherWorkout.calories)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 Objects.equals(instruction, otherWorkout.instruction)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 tagged.equals(otherWorkout.tagged)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                \u0026\u0026 Objects.equals(remark, otherWorkout.remark);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 47,
      "shouteck": 79,
      "-": 69,
      "yicheng12": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Stores workout book data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Saves the given workout book data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableWorkoutBook workoutBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            XmlUtil.saveDataToFile(file, workoutBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the given tracked data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableTrackedData trackedData)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            XmlUtil.saveDataToFile(file, trackedData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves the given parameter to the specified file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableTrackedDataList trackedDataList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            XmlUtil.saveDataToFile(file, trackedDataList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns workout book in the file or an empty workout book"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static XmlSerializableWorkoutBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns tracked data in the file or an empty tracked data list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static XmlSerializableTrackedData loadTrackedDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableTrackedData.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns tracked data in the file or an empty tracked data list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static XmlSerializableTrackedDataList loadTrackedDataListFromSaveFile(Path file)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableTrackedDataList.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 45,
      "sijieg": 4,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTrackedData.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * An Immutable TrackedData that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "@XmlRootElement(name \u003d \"trackeddata\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlSerializableTrackedData {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKOUT \u003d \"Tracked data list contains duplicate workout(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private List\u003cXmlAdaptedWorkout\u003e workouts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Creates an empty XmlSerializableTrackedData."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlSerializableTrackedData() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        workouts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlSerializableTrackedData(ReadOnlyTrackedData src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        workouts.addAll(src.getTrackedData().stream().map(XmlAdaptedWorkout::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Converts this tracked data list into the model\u0027s {@code TrackedData} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code XmlAdaptedWorkout}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedData toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackedData trackedData \u003d new TrackedData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        for (XmlAdaptedWorkout p : workouts) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Workout workout \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (trackedData.hasWorkout(workout)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            trackedData.addWorkout(workout);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return trackedData;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof XmlSerializableTrackedData)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return workouts.equals(((XmlSerializableTrackedData) other).workouts);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTrackedDataList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * An Immutable tracked data list that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "@XmlRootElement(name \u003d \"trackeddatalist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlSerializableTrackedDataList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARAMETER \u003d \"Tracked data list contains duplicate parameter(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private List\u003cXmlAdaptedParameter\u003e parameters;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Creates an empty XmlSerializableTrackedData."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlSerializableTrackedDataList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        parameters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlSerializableTrackedDataList(ReadOnlyTrackedDataList src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        parameters.addAll(src.getTrackedDataList().stream().map(XmlAdaptedParameter::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Converts this tracked data list into the model\u0027s {@code TrackedDataList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * {@code XmlAdaptedParameter}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackedDataList trackedDataList \u003d new TrackedDataList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        for (XmlAdaptedParameter p : parameters) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            Parameter parameter \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (trackedDataList.hasParameter(parameter)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PARAMETER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            trackedDataList.addParameter(parameter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return trackedDataList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof XmlSerializableTrackedDataList)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return parameters.equals(((XmlSerializableTrackedDataList) other).parameters);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableWorkoutBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * An Immutable WorkoutBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "@XmlRootElement(name \u003d \"workoutbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class XmlSerializableWorkoutBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WORKOUT \u003d \"Workouts list contains duplicate workout(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private List\u003cXmlAdaptedWorkout\u003e workouts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Creates an empty XmlSerializableWorkoutBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public XmlSerializableWorkoutBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workouts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public XmlSerializableWorkoutBook(ReadOnlyWorkoutBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workouts.addAll(src.getWorkoutList().stream().map(XmlAdaptedWorkout::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Converts this workoutbook into the model\u0027s {@code WorkoutBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code XmlAdaptedWorkout}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        WorkoutBook workoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        for (XmlAdaptedWorkout p : workouts) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Workout workout \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            if (workoutBook.hasWorkout(workout)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            workoutBook.addWorkout(workout);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!(other instanceof XmlSerializableWorkoutBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workouts.equals(((XmlSerializableWorkoutBook) other).workouts);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTrackedDataListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * A class to access the list of data being tracked, stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlTrackedDataListStorage implements TrackedDataListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTrackedDataListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlTrackedDataListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Path getTrackedDataListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return readTrackedDataList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Similar to {@link #readTrackedDataList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Optional\u003cReadOnlyTrackedDataList\u003e readTrackedDataList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            logger.info(\"Tracked data file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlSerializableTrackedDataList xmlTrackedDataList \u003d XmlFileStorage.loadTrackedDataListFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return Optional.of(xmlTrackedDataList.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveTrackedDataList(ReadOnlyTrackedDataList trackedDataList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        saveTrackedDataList(trackedDataList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Similar to {@link #saveTrackedDataList(ReadOnlyTrackedDataList)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveTrackedDataList(ReadOnlyTrackedDataList trackedDataList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(trackedDataList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableTrackedDataList(trackedDataList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTrackedDataStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * A class to access Tracked data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlTrackedDataStorage implements TrackedDataStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTrackedDataStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public XmlTrackedDataStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Path getTrackedDataFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Optional\u003cReadOnlyTrackedData\u003e readTrackedData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return readTrackedData(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Similar to {@link #readTrackedData()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public Optional\u003cReadOnlyTrackedData\u003e readTrackedData(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            logger.info(\"Tracked data file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlSerializableTrackedData xmlTrackedData \u003d XmlFileStorage.loadTrackedDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            return Optional.of(xmlTrackedData.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveTrackedData(ReadOnlyTrackedData trackedData) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        saveTrackedData(trackedData, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Similar to {@link #saveTrackedData(ReadOnlyTrackedData)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveTrackedData(ReadOnlyTrackedData trackedData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(trackedData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableTrackedData(trackedData));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlWorkoutBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * A class to access WorkoutBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class XmlWorkoutBookStorage implements WorkoutBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlWorkoutBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public XmlWorkoutBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Path getWorkoutBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return readWorkoutBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Similar to {@link #readWorkoutBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            logger.info(\"WorkoutBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlSerializableWorkoutBook xmlWorkoutBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return Optional.of(xmlWorkoutBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        saveWorkoutBook(workoutBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Similar to {@link #saveWorkoutBook(ReadOnlyWorkoutBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        requireNonNull(workoutBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableWorkoutBook(workoutBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.ui.WorkoutPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void loadWorkoutPage(Workout workout) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + workout.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void handleWorkoutPanelSelectionChangedEvent(WorkoutPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        loadWorkoutPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 6,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void handleCommandEntered() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 2,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.ui.ShowProfileRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private WorkoutListPanel workoutListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private TrackedDataListPanel trackedDataListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private ProfileWindow profileWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private MenuItem profileMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private StackPane workoutListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private StackPane trackedDataListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        setHelpAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        setProfileAccelerators();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        profileWindow \u003d new ProfileWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void setHelpAccelerators() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        setHelpAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void setProfileAccelerators() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        setProfileAccelerator(profileMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void setHelpAccelerator(MenuItem helpMenuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        helpMenuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                helpMenuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void setProfileAccelerator(MenuItem profileMenuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        profileMenuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                profileMenuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutListPanel \u003d new WorkoutListPanel(logic.getFilteredWorkoutList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutListPanelPlaceholder.getChildren().add(workoutListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListPanel \u003d new TrackedDataListPanel(logic.getFilteredTrackedDataList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListPanelPlaceholder.getChildren().add(trackedDataListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Opens the profile window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void handleProfile() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!profileWindow.isShowing()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            profileWindow.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            profileWindow.focus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutListPanel getWorkoutListPanel() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutListPanel;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void handleShowProfileEvent(ShowProfileRequestEvent event) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        handleProfile();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 5,
      "sijieg": 50,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Controller for a profile page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ProfileWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String USERPROFILE_FILE_PATH \u003d \"/htmlFiles/ProfileWindow.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProfileWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String FXML \u003d \"ProfileWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Creates a new ProfileWindow."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @param root Stage to use as the root of the ProfileWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ProfileWindow(Stage root) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String userProfileUrl \u003d getClass().getResource(USERPROFILE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        browser.getEngine().load(userProfileUrl);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Creates a new ProfileWindow."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ProfileWindow() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Shows the profile window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logger.fine(\"Showing profile page about the application.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the profile window is currently being shown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Focuses on the profile window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.events.model.WorkoutBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void handleWorkoutBookChangedEvent(WorkoutBookChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TrackedDataListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * An UI component that displays information of a {@code Workout}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedDataListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String FXML \u003d \"TrackedDataListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public final Parameter parameter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Label prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Label value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataListCard(Parameter parameter, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        prefix.setText(parameter.getPrefix().getPrefix());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        value.setText(parameter.getValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        if (!(other instanceof TrackedDataListCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackedDataListCard card \u003d (TrackedDataListCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                \u0026\u0026 parameter.equals(card.parameter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 14,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TrackedDataListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.events.ui.TrackedDataPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Panel containing the list of workouts."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackedDataListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String FXML \u003d \"TrackedDataListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TrackedDataListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private ListView\u003cParameter\u003e trackedDataListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TrackedDataListPanel(ObservableList\u003cParameter\u003e trackedDataList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        setConnections(trackedDataList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void setConnections(ObservableList\u003cParameter\u003e trackedDataList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListView.setItems(trackedDataList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListView.setCellFactory(listView -\u003e new TrackedDataListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        trackedDataListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        logger.fine(\"Selection in tracked data list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        raise(new TrackedDataPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Scrolls to the {@code WorkoutCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            trackedDataListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            trackedDataListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Workout} using a {@code WorkoutCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    class TrackedDataListViewCell extends ListCell\u003cParameter\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        protected void updateItem(Parameter parameter, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            super.updateItem(parameter, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            if (empty || parameter \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                setGraphic(new TrackedDataListCard(parameter, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WorkoutCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * An UI component that displays information of a {@code Workout}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class WorkoutCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private static final String FXML \u003d \"WorkoutListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public final Workout workout;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label equipment;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label muscle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private Label instruction;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public WorkoutCard(Workout workout, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.workout \u003d workout;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        name.setText(workout.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        type.setText(workout.getType().fullType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        duration.setText(workout.getDuration().fullDuration);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        difficulty.setText(workout.getDifficulty().fullDifficulty);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        equipment.setText(workout.getEquipment().fullEquipment);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        muscle.setText(workout.getMuscle().fullMuscle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        calories.setText(workout.getCalories().fullCalories);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        instruction.setText(workout.getInstruction().fullInstruction);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        remark.setText(workout.getRemark() \u003d\u003d null ? \"\" : workout.getRemark().fullRemark);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workout.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        if (!(other instanceof WorkoutCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutCard card \u003d (WorkoutCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                \u0026\u0026 workout.equals(card.workout);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 14,
      "DarylTew": 19,
      "-": 49,
      "yicheng12": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WorkoutListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.events.ui.WorkoutPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * Panel containing the list of workouts."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class WorkoutListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private static final String FXML \u003d \"WorkoutListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WorkoutListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private ListView\u003cWorkout\u003e workoutListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public WorkoutListPanel(ObservableList\u003cWorkout\u003e workoutList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        setConnections(workoutList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private void setConnections(ObservableList\u003cWorkout\u003e workoutList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutListView.setItems(workoutList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutListView.setCellFactory(listView -\u003e new WorkoutListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                        logger.fine(\"Selection in workout list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                        raise(new WorkoutPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Scrolls to the {@code WorkoutCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            workoutListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            workoutListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Workout} using a {@code WorkoutCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    class WorkoutListViewCell extends ListCell\u003cWorkout\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        protected void updateItem(Workout workout, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            super.updateItem(workout, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            if (empty || workout \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                setGraphic(new WorkoutCard(workout, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 83
    }
  },
  {
    "path": "src/main/resources/htmlFiles/ProfileWindow.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c!doctype html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        .card {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            max-width: 300px;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            margin: auto;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            text-align: center;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            font-family: arial;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        .title {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            color: grey;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            font-size: 18px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        button {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            border: none;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            outline: 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            display: inline-block;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            padding: 8px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            color: white;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            background-color: #000;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            text-align: center;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            cursor: pointer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            width: 100%;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            font-size: 18px;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        a {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            text-decoration: none;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            font-size: 22px;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            color: black;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        button:hover, a:hover {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            opacity: 0.7;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003ch2 style\u003d\"text-align:center\"\u003eUser Profile Card\u003c/h2\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cdiv class\u003d\"card\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cimg src\u003d\"https://qph.fs.quoracdn.net/main-qimg-d999ec0c56797e9248890badd3643024-c\" alt\u003d\"John\" style\u003d\"width:100%\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003ch1 id\u003d\"username\"\u003egsj\u003c/h1\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"gender\"\u003eGender: male\u003c/p\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"height\"\u003eHeight: 1.85m\u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"weight\"\u003eWeight: 97.3kg\u003c/p\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"bmi\"\u003eBMI : 27.2\u003c/p\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003ch2 style\u003d\"text-align:center\"\u003eWorkout Presets for User\u003c/h2\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"calories\"\u003eCalories: 150\u003c/p\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"difficulty\"\u003eDifficulty: advanced\u003c/p\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cp id\u003d\"duration\"\u003eDuration: 15m\u003c/p\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cdiv style\u003d\"margin: 24px 0;\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 56
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sijieg"
        },
        "content": "#filterField, #workoutListPanel, #workoutWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "         minWidth\u003d\"950\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cImage url\u003d\"@/images/workoutbook.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Profile\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"profileMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleProfile\" text\u003d\"Profile\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                   minHeight\u003d\"135\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "          \u003cVBox fx:id\u003d\"workoutList\" minWidth\u003d\"350\" maxWidth\u003d\"350\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            \u003cStackPane fx:id\u003d\"workoutListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "          \u003cVBox fx:id\u003d\"trackedDataList\" minWidth\u003d\"200\" maxWidth\u003d\"200\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            \u003cLabel fx:id\u003d\"trackedDataListPanelTitle\" text\u003d\"Tracked Parameters\" styleClass\u003d\"label-bright\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            \u003cStackPane fx:id\u003d\"trackedDataListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "garyheng": 12,
      "sijieg": 4,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/ProfileWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "         title\u003d\"Profile\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cImage url\u003d\"@/images/profile.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 18
    }
  },
  {
    "path": "src/main/resources/view/TrackedDataListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"20\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "      \u003cHBox spacing\u003d\"0\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cLabel fx:id\u003d\"prefix\" text\u003d\"\\$prefix\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cLabel fx:id\u003d\"value\" text\u003d\"\\$value\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "garyheng": 4,
      "-": 28
    }
  },
  {
    "path": "src/main/resources/view/TrackedDataListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "  \u003cListView fx:id\u003d\"trackedDataListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "garyheng": 8
    }
  },
  {
    "path": "src/main/resources/view/WorkoutListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$duration\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"equipment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$equipment\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"muscle\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$muscle\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"calories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "      \u003cLabel fx:id\u003d\"instruction\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$instruction\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 7,
      "-": 33,
      "yicheng12": 1
    }
  },
  {
    "path": "src/main/resources/view/WorkoutListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "  \u003cListView fx:id\u003d\"workoutListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "  \"workoutBookFilePath\" : \"workoutbook.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "  \"workoutBookFilePath\" : \"workoutbook.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableWorkoutBookTest/duplicateWorkoutWorkoutBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cworkoutbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cname\u003eAlice\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e150\u003c/calories\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: bicep curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003ecurrent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c!-- Workout with same identity as Alice --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cname\u003eAlice\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e150\u003c/calories\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: bicep curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/workoutbook\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 29
    }
  },
  {
    "path": "src/test/data/XmlSerializableWorkoutBookTest/invalidWorkoutWorkoutBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cworkoutbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c!-- Workout with invalid difficulty field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eAlice\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eeasy\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e150\u003c/calories\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: bicep curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003ecurrent\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/workoutbook\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 16
    }
  },
  {
    "path": "src/test/data/XmlSerializableWorkoutBookTest/typicalWorkoutsWorkoutBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c!-- WorkoutBook save file which contains the same Workout values as in TypicalWorkouts#getTypicalWorkoutBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cworkoutbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eAlice Pauline\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003ebalance\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e5m\u003c/duration\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eadvanced\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003ethigh\u003c/muscle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e20\u003c/calories\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eWalk heel to toe for 50 steps\u003c/instruction\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003erelax\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eBenson Meier\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e10m\u003c/duration\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003ebar\u003c/equipment\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003edeltoids\u003c/muscle\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e100\u003c/calories\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: shoulder press reps: 5-7\u003c/instruction\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eCarl Kurz\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003ecardio\u003c/type\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e25m\u003c/duration\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003elegs\u003c/muscle\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e135\u003c/calories\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: leg raises reps: 15-20\u003c/instruction\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eDaniel Meier\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003ecardio\u003c/type\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e30m\u003c/duration\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003elegs\u003c/muscle\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e200\u003c/calories\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003e30 minutes slow jog\u003c/instruction\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003efavourite\u003c/tagged\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eElle Meyer\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003eendurance\u003c/type\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003elegs\u003c/muscle\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e100\u003c/calories\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003e20 minutes brisk walk\u003c/instruction\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eFiona Kunz\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e40m\u003c/duration\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eadvanced\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003emedicine ball\u003c/equipment\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003earms\u003c/muscle\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e225\u003c/calories\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: medicine ball throw reps: 25-30\u003c/instruction\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eGeorge Best\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e30m\u003c/duration\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003efree weights\u003c/equipment\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003echest\u003c/muscle\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e175\u003c/calories\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003e6 sets of bench press, 6 reps per set of 70% max\u003c/instruction\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/workoutbook\u003e"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "sijieg": 76
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidWorkoutField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003c!-- Workout with an invalid calories field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003cworkout\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cname\u003eHans Muster\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003ccalories\u003e123 calories\u003c/calories\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cinstruction\u003eset1: hammer curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003c/workout\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "shouteck": 11,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingWorkoutField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003c!-- Workout with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003cworkout\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ccalories\u003e123\u003c/calories\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cinstruction\u003eset1: hammer curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003c/workout\u003e"
      }
    ],
    "authorContributionMap": {
      "shouteck": 11,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validWorkout.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003cworkout\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cname\u003eHans Muster\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ccalories\u003e123\u003c/calories\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003cinstruction\u003eset1: hammer curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "\u003c/workout\u003e"
      }
    ],
    "authorContributionMap": {
      "shouteck": 11,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validWorkoutBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003cworkoutbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eHans Muster\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003edumbbell\u003c/equipment\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003ebicep\u003c/muscle\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e123\u003c/calories\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003eset1: hammer curl reps: 4-6\u003c/instruction\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eRuth Mueller\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e45m\u003c/duration\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003eadvanced\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003equadriceps\u003c/muscle\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e200\u003c/calories\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003eset1: squats reps: 15-20\u003c/instruction\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctagged\u003eintense\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e10m\u003c/duration\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003ebar\u003c/equipment\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003edeltoids\u003c/muscle\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e100\u003c/calories\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003eset1: shoulder press reps: 5-7\u003c/instruction\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eCornelia Meier\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003ecardio\u003c/type\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e25m\u003c/duration\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003elegs\u003c/muscle\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e135\u003c/calories\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003eset1: leg raises reps: 15-20\u003c/instruction\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eWerner Meyer\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003ecardio\u003c/type\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e30m\u003c/duration\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003elegs\u003c/muscle\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e200\u003c/calories\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003e30 minutes slow jog\u003c/instruction\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctagged\u003efavourite\u003c/tagged\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eLydia Kunz\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003eendurance\u003c/type\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e20m\u003c/duration\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003elegs\u003c/muscle\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e100\u003c/calories\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003e20 minutes brisk walk\u003c/instruction\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eAnna Best\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e40m\u003c/duration\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003eadvanced\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003emedicine ball\u003c/equipment\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003earms\u003c/muscle\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e225\u003c/calories\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003eset1: medicine ball throw reps: 25-30\u003c/instruction\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eStefan Meier\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e30m\u003c/duration\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003eintermediate\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003efree weights\u003c/equipment\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003echest\u003c/muscle\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e175\u003c/calories\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003e6 sets of bench press, 6 reps per set of 70% max\u003c/instruction\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctagged\u003eheavy\u003c/tagged\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cname\u003eMartin Mueller\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ctype\u003eendurance\u003c/type\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cduration\u003e10m\u003c/duration\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cdifficulty\u003ebeginner\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cequipment\u003eyoga mat\u003c/equipment\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cmuscle\u003ecore\u003c/muscle\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003ccalories\u003e90\u003c/calories\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        \u003cinstruction\u003eset1: planks reps: 5 x 1 minute\u003c/instruction\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "\u003c/workoutbook\u003e"
      }
    ],
    "authorContributionMap": {
      "garyheng": 98
    }
  },
  {
    "path": "src/test/data/XmlWorkoutBookStorageTest/invalidAndValidWorkoutWorkoutBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cworkoutbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c!-- Valid Workout --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eAlice Pauline\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e45m\u003c/duration\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eadvance\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003equadriceps\u003c/muscle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e200\u003c/calories\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: squats reps: 15-20\u003c/instruction\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003eintense\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c!-- Workout with invalid workout field --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eAlice Pauline\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e45m\u003c/duration\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eeasy\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003equadriceps\u003c/muscle\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e200\u003c/calories\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: squats reps: 15-20\u003c/instruction\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003eintense\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/workoutbook\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 27
    }
  },
  {
    "path": "src/test/data/XmlWorkoutBookStorageTest/invalidWorkoutWorkoutBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003cworkoutbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c!-- Workout with invalid difficulty field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003cworkouts\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cname\u003eAlice Pauline\u0027s workout\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctype\u003estrength\u003c/type\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cduration\u003e45m\u003c/duration\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003cdifficulty\u003eeasy\u003c/difficulty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cequipment\u003eNIL\u003c/equipment\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cmuscle\u003equadriceps\u003c/muscle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003ccalories\u003e200\u003c/calories\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\t\t\u003cinstruction\u003eset1: squats reps: 15-20\u003c/instruction\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        \u003ctagged\u003eintense\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    \u003c/workouts\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "\u003c/workoutbook\u003e"
      }
    ],
    "authorContributionMap": {
      "sijieg": 15
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void openProfileWindowUsingMenu() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        clickOnMenuItemsSequentially(\"Profile\", \"F2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Opens the {@code ProfileWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void openProfileWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.push(KeyCode.F2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 12,
      "-": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final WorkoutListPanelHandle workoutListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutListPanel \u003d new WorkoutListPanelHandle(getChildNode(WorkoutListPanelHandle.WORKOUT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutListPanelHandle getWorkoutListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProfileWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * A handle to the {@code ProfileWindow} of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ProfileWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String PROFILE_WINDOW_TITLE \u003d \"Profile\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String PROFILE_WINDOW_BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public ProfileWindowHandle(Stage profileWindowStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        super(profileWindowStage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if a profile window is currently present in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return new GuiRobot().isWindowShown(PROFILE_WINDOW_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(PROFILE_WINDOW_BROWSER_ID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 34
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WorkoutCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Provides a handle to a workout card in the workout list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String TYPE_FIELD_ID \u003d \"#type\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String DURATION_FIELD_ID \u003d \"#duration\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String DIFFICULTY_FIELD_ID \u003d \"#difficulty\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String EQUIPMENT_FIELD_ID \u003d \"#equipment\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String MUSCLE_FIELD_ID \u003d \"#muscle\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String CALORIES_FIELD_ID \u003d \"#calories\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String INSTRUCTION_FIELD_ID \u003d \"#instruction\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label typeLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label durationLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label difficultyLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label equipmentLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label muscleLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label caloriesLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final Label instructionLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        typeLabel \u003d getChildNode(TYPE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        durationLabel \u003d getChildNode(DURATION_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        difficultyLabel \u003d getChildNode(DIFFICULTY_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        equipmentLabel \u003d getChildNode(EQUIPMENT_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        muscleLabel \u003d getChildNode(MUSCLE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        caloriesLabel \u003d getChildNode(CALORIES_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        instructionLabel \u003d getChildNode(INSTRUCTION_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return typeLabel.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getDuration () {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return durationLabel.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getDifficulty () {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return difficultyLabel.getText();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getEquipment () {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return equipmentLabel.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getMuscle () {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return muscleLabel.getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getCalories () {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return caloriesLabel.getText();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public String getInstruction () {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return instructionLabel.getText();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if this handle contains {@code workout}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean equals(Workout workout) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return getName().equals(workout.getName().fullName)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getType().equals(workout.getType().fullType)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getDuration().equals(workout.getDuration().fullDuration)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getDifficulty().equals(workout.getDifficulty().fullDifficulty)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getEquipment().equals(workout.getEquipment().fullEquipment)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getMuscle().equals(workout.getMuscle().fullMuscle)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getCalories().equals(workout.getCalories().fullCalories)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 getInstruction().equals(workout.getInstruction().fullInstruction)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(workout.getTags().stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 15,
      "shouteck": 50,
      "-": 54
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WorkoutListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Provides a handle for {@code WorkoutListPanel} containing the list of {@code WorkoutCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutListPanelHandle extends NodeHandle\u003cListView\u003cWorkout\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String WORKOUT_LIST_VIEW_ID \u003d \"#workoutListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Optional\u003cWorkout\u003e lastRememberedSelectedWorkoutCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutListPanelHandle(ListView\u003cWorkout\u003e workoutListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        super(workoutListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns a handle to the selected {@code WorkoutCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        List\u003cWorkout\u003e selectedWorkoutList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (selectedWorkoutList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new AssertionError(\"Workout list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .map(WorkoutCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedWorkoutList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        List\u003cWorkout\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Navigates the listview to display {@code workout}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void navigateToCard(Workout workout) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        if (!getRootNode().getItems().contains(workout)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throw new IllegalArgumentException(\"Workout does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            getRootNode().scrollTo(workout);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Selects the {@code WorkoutCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns the workout card handle of a workout associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutCardHandle getWorkoutCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .map(WorkoutCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .filter(handle -\u003e handle.equals(getWorkout(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Workout getWorkout(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Remembers the selected {@code WorkoutCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void rememberSelectedWorkoutCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        List\u003cWorkout\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            lastRememberedSelectedWorkoutCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            lastRememberedSelectedWorkoutCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns true if the selected {@code WorkoutCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code rememberSelectedWorkoutCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public boolean isSelectedWorkoutCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        List\u003cWorkout\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return lastRememberedSelectedWorkoutCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            return !lastRememberedSelectedWorkoutCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                    || !lastRememberedSelectedWorkoutCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : WorkoutBook\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Sentence word contains query word as substring"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // First word (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Last word (boundary case)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Sentence has extra spaces"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Leading/trailing spaces"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 14,
      "-": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.storage.XmlAdaptedWorkout;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.storage.XmlSerializableWorkoutBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.testutil.WorkoutBookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validWorkoutBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Path MISSING_WORKOUT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingWorkoutField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Path INVALID_WORKOUT_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidWorkoutField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Path VALID_WORKOUT_FILE \u003d TEST_DATA_FOLDER.resolve(\"validWorkout.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempWorkoutBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\u0027s workout\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String VALID_TYPE \u003d \"strength\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String VALID_DURATION \u003d \"20m\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d \"beginner\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String VALID_EQUIPMENT \u003d \"dumbbell\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final String VALID_MUSCLE \u003d \"bicep\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_CALORIES \u003d \"123\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_INSTRUCTION \u003d \"set1: hammer curl reps: 4-6\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"heavy\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"123 calories\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlUtil.getDataFromFile(null, WorkoutBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, WorkoutBook.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, WorkoutBook.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        WorkoutBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableWorkoutBook.class).toModelType();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(9, dataFromFile.getWorkoutList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void xmlAdaptedWorkoutFromFile_fileWithMissingWorkoutField_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout actualWorkout \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                MISSING_WORKOUT_FIELD_FILE, XmlAdaptedWorkoutWithRootElement.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout expectedWorkout \u003d new XmlAdaptedWorkout("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                null, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY, VALID_EQUIPMENT, VALID_MUSCLE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedWorkout, actualWorkout);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void xmlAdaptedWorkoutFromFile_fileWithInvalidWorkoutField_validResult() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout actualWorkout \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                INVALID_WORKOUT_FIELD_FILE, XmlAdaptedWorkoutWithRootElement.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout expectedWorkout \u003d new XmlAdaptedWorkout("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY, VALID_EQUIPMENT, VALID_MUSCLE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                INVALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedWorkout, actualWorkout);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void xmlAdaptedWorkoutFromFile_fileWithValidWorkout_validResult() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout actualWorkout \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                VALID_WORKOUT_FILE, XmlAdaptedWorkoutWithRootElement.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout expectedWorkout \u003d new XmlAdaptedWorkout("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY, VALID_EQUIPMENT, VALID_MUSCLE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedWorkout, actualWorkout);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlUtil.saveDataToFile(null, new WorkoutBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new WorkoutBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlSerializableWorkoutBook dataToWrite \u003d new XmlSerializableWorkoutBook(new WorkoutBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlSerializableWorkoutBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        WorkoutBookBuilder builder \u003d new WorkoutBookBuilder(new WorkoutBook());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        dataToWrite \u003d new XmlSerializableWorkoutBook("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                builder.withWorkout(new WorkoutBuilder().build()).build());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedWorkout}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @XmlRootElement(name \u003d \"workout\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static class XmlAdaptedWorkoutWithRootElement extends XmlAdaptedWorkout {}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 39,
      "shouteck": 11,
      "-": 95,
      "yicheng12": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\u0027s workout\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_validCommand_success() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void getFilteredWorkoutList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        logic.getFilteredWorkoutList().remove(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) throws"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWorkoutBook(), model.getTrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     *      - {@code expectedModel}\u0027s workout book was saved to the storage file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                                           String expectedMessage, Model expectedModel) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "sijieg": 16,
      "-": 109,
      "yicheng12": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_newWorkout_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout validWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWorkoutBook(), model.getTrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedModel.addWorkout(validWorkout);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertCommandSuccess(new AddCommand(validWorkout), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validWorkout), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_duplicateWorkout_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout workoutInList \u003d model.getWorkoutBook().getWorkoutList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertCommandFailure(new AddCommand(workoutInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "shouteck": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.RecommendArguments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void constructor_nullWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_workoutAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        ModelStubAcceptingWorkoutAdded modelStub \u003d new ModelStubAcceptingWorkoutAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout validWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validWorkout).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validWorkout), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(Arrays.asList(validWorkout), modelStub.workoutsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_duplicateWorkout_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout validWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validWorkout);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithWorkout(validWorkout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout aliceWorkout \u003d new WorkoutBuilder().withName(\"Alice\u0027s workout\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout bobWorkout \u003d new WorkoutBuilder().withName(\"Bob\u0027s workout\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        AddCommand addAliceWorkoutCommand \u003d new AddCommand(aliceWorkout);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        AddCommand addBobWorkoutCommand \u003d new AddCommand(bobWorkout);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(addAliceWorkoutCommand.equals(addAliceWorkoutCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        AddCommand addAliceWorkoutCommandCopy \u003d new AddCommand(aliceWorkout);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(addAliceWorkoutCommand.equals(addAliceWorkoutCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(addAliceWorkoutCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(addAliceWorkoutCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different workout -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(addAliceWorkoutCommand.equals(addBobWorkoutCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void addWorkout(Workout workout) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void resetData(ReadOnlyWorkoutBook newData) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public ReadOnlyWorkoutBook getWorkoutBook() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public ReadOnlyTrackedDataList getTrackedDataList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void deleteWorkout(Workout target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void updateWorkout(Workout target, Workout editedWorkout) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public List\u003cWorkout\u003e getFilteredInternalList(RecommendArguments recommendArguments) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public ObservableList\u003cParameter\u003e getFilteredTrackedDataList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void updateFilteredTrackedDataList(Predicate\u003cParameter\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canUndoModel() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canRedoModel() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void undoModel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void redoModel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean canUndoWorkoutBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean canRedoWorkoutBook() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void undoWorkoutBook() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void redoWorkoutBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canUndoTrackedDataList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canRedoTrackedDataList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void undoTrackedDataList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void redoTrackedDataList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void commitModel() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void commitWorkoutBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void commitTrackedDataList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void sortFilteredWorkoutList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void addDataToTrack(Parameter parameter) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void removeDataFromTrack(Parameter parameter) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean hasParameter(Parameter parameter) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * A Model stub that contains a single workout."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private class ModelStubWithWorkout extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        private final Workout workout;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        ModelStubWithWorkout(Workout workout) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            requireNonNull(workout);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            this.workout \u003d workout;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            requireNonNull(workout);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return this.workout.isSameWorkout(workout);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * A Model stub that always accept the workout being added."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private class ModelStubAcceptingWorkoutAdded extends ModelStub {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final ArrayList\u003cWorkout\u003e workoutsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            requireNonNull(workout);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return workoutsAdded.stream().anyMatch(workout::isSameWorkout);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void addWorkout(Workout workout) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            requireNonNull(workout);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            workoutsAdded.add(workout);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void commitModel() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public ReadOnlyWorkoutBook getWorkoutBook() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return new WorkoutBook();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 73,
      "sijieg": 6,
      "shouteck": 57,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_emptyWorkoutBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_nonEmptyWorkoutBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.resetData(new WorkoutBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.EditWorkoutDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_NAME_AMY_WORKOUT \u003d \"Amy Bee\u0027s workout\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_NAME_BOB_WORKOUT \u003d \"Bob Choo\u0027s workout\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_TYPE_AMY_WORKOUT \u003d \"cardio\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_TYPE_BOB_WORKOUT \u003d \"strength\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_DURATION_AMY_WORKOUT \u003d \"20m\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_DURATION_BOB_WORKOUT \u003d \"25m\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_DIFFICULTY_AMY_WORKOUT \u003d \"beginner\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_DIFFICULTY_BOB_WORKOUT \u003d \"intermediate\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_EQUIPMENT_AMY_WORKOUT \u003d \"yoga mat\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_EQUIPMENT_BOB_WORKOUT \u003d \"dumbbell\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_MUSCLE_AMY_WORKOUT \u003d \"leg\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_MUSCLE_BOB_WORKOUT \u003d \"bicep\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_CALORIES_AMY_WORKOUT \u003d \"180\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_CALORIES_BOB_WORKOUT \u003d \"150\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_INSTRUCTION_AMY_WORKOUT \u003d \"set1: flutter kick reps: 5-7\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_INSTRUCTION_BOB_WORKOUT \u003d \"set1: bicep curl reps: 4-6\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String VALID_USERNAME \u003d \"gsj\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String VALID_GENDER \u003d \"male\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String VALID_HEIGHT \u003d \"1.83\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String VALID_WEIGHT \u003d \"91.2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String VALID_PREFERRED_DIFFICULTY \u003d \"beginner\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_TAG_MORNING \u003d \"morning\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String VALID_TAG_NIGHT \u003d \"night\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String VALID_TAG_FUTURE \u003d \"future\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String NAME_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY_WORKOUT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String NAME_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB_WORKOUT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String TYPE_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_TYPE + VALID_TYPE_AMY_WORKOUT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String TYPE_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_TYPE + VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String DURATION_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_DURATION + VALID_DURATION_AMY_WORKOUT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String DURATION_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_DURATION + VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String DIFFICULTY_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_AMY_WORKOUT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String DIFFICULTY_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String EQUIPMENT_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_EQUIPMENT + VALID_EQUIPMENT_AMY_WORKOUT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String EQUIPMENT_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_EQUIPMENT + VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MUSCLE_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_MUSCLE + VALID_MUSCLE_AMY_WORKOUT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String MUSCLE_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_MUSCLE + VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String CALORIES_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_AMY_WORKOUT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String CALORIES_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String INSTRUCTION_DESC_AMY_WORKOUT \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_AMY_WORKOUT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String INSTRUCTION_DESC_BOB_WORKOUT \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String TAG_DESC_MORNING \u003d \" \" + PREFIX_TAG + VALID_TAG_MORNING;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String TAG_DESC_NIGHT \u003d \" \" + PREFIX_TAG + VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final String TAG_DESC_FUTURE \u003d \" \" + PREFIX_TAG + VALID_TAG_FUTURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0027s workout\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"strength + cardio\"; // \u0027+\u0027 not allowed in types"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INVALID_DURATION_DESC \u003d \" \" + PREFIX_DURATION + \"5 minutes\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INVALID_DIFFICULTY_DESC \u003d \" \" + PREFIX_DIFFICULTY + \"difficult\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INVALID_EQUIPMENT_DESC \u003d \" \" + PREFIX_EQUIPMENT + \"dumbbell + mat\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INVALID_MUSCLE_DESC \u003d \" \" + PREFIX_MUSCLE + \"bicep + tricep\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"123 calories\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"morning*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String INVALID_USERNAME \u003d \"gs_j@a\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String INVALID_GENDER \u003d \"femal\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String INVALID_HEIGHT \u003d \"183\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String INVALID_WEIGHT \u003d \"911\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String INVALID_PREFERRED_DIFFICULTY \u003d \"easy\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final EditCommand.EditWorkoutDescriptor DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final EditCommand.EditWorkoutDescriptor DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        DESC_AMY_WORKOUT \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_AMY_WORKOUT)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        .withType(VALID_TYPE_AMY_WORKOUT).withDuration(VALID_DURATION_AMY_WORKOUT)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        .withDifficulty(VALID_DIFFICULTY_AMY_WORKOUT)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withEquipment(VALID_EQUIPMENT_AMY_WORKOUT).withMuscle(VALID_MUSCLE_AMY_WORKOUT)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withCalories(VALID_CALORIES_AMY_WORKOUT).withInstruction(VALID_INSTRUCTION_AMY_WORKOUT)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withTags(VALID_TAG_MORNING).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        DESC_BOB_WORKOUT \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_BOB_WORKOUT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        .withType(VALID_TYPE_BOB_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                        .withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withCalories(VALID_CALORIES_BOB_WORKOUT).withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        .withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * - the workout book and the filtered workout list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        WorkoutBook expectedWorkoutBook \u003d new WorkoutBook(actualModel.getWorkoutBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        List\u003cWorkout\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredWorkoutList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            assertEquals(expectedWorkoutBook, actualModel.getWorkoutBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredWorkoutList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the workout at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * {@code model}\u0027s workout book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static void showWorkoutAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredWorkoutList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout workout \u003d model.getFilteredWorkoutList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final String[] splitName \u003d workout.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        model.updateFilteredWorkoutList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(1, model.getFilteredWorkoutList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Deletes the first workout in {@code model}\u0027s filtered list from {@code model}\u0027s workout book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static void deleteFirstWorkout(Model model) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout firstWorkout \u003d model.getFilteredWorkoutList().get(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        model.deleteWorkout(firstWorkout);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.commitModel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 23,
      "shouteck": 54,
      "DarylTew": 20,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showWorkoutAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout workoutToDelete \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_WORKOUT_SUCCESS, workoutToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWorkoutBook(), model.getTrackedDataList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.deleteWorkout(workoutToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkoutList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout workoutToDelete \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_WORKOUT_SUCCESS, workoutToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWorkoutBook(), model.getTrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.deleteWorkout(workoutToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        showNoWorkout(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of workout book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWorkoutBook().getWorkoutList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout workoutToDelete \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWorkoutBook(), model.getTrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.deleteWorkout(workoutToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // delete -\u003e first workout deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // undo -\u003e reverts workout book back to previous state and filtered workout list to show all workouts"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.undoWorkoutBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // redo -\u003e same first workout deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.redoWorkoutBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkoutList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // execution failed -\u003e workout book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // single workout book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * 1. Deletes a {@code Workout} from a filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted workout in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the workout object regardless of indexing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameWorkoutDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWorkoutBook(), model.getTrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_SECOND_WORKOUT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout workoutToDelete \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.deleteWorkout(workoutToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // delete -\u003e deletes second workout in unfiltered workout list / first workout in filtered workout list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // undo -\u003e reverts workout book back to previous state and filtered workout list to show all workouts"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.undoWorkoutBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertNotEquals(workoutToDelete, model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // redo -\u003e deletes same second workout in unfiltered workout list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.redoWorkoutBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_WORKOUT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different workout -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void showNoWorkout(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        model.updateFilteredWorkoutList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(model.getFilteredWorkoutList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 59,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB_WORKOUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MORNING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showWorkoutAtIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.testutil.EditWorkoutDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout editedWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder(editedWorkout).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT, descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_WORKOUT_SUCCESS, editedWorkout);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutBook(model.getWorkoutBook()), new TrackedDataList(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.updateWorkout(model.getFilteredWorkoutList().get(0), editedWorkout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index indexLastWorkout \u003d Index.fromOneBased(model.getFilteredWorkoutList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout lastWorkout \u003d model.getFilteredWorkoutList().get(indexLastWorkout.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutBuilder workoutInList \u003d new WorkoutBuilder(lastWorkout);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout editedWorkout \u003d workoutInList.withName(VALID_NAME_BOB_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT).withEquipment(VALID_EQUIPMENT_BOB_WORKOUT)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT).withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withTags(VALID_TAG_MORNING).withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_BOB_WORKOUT)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withType(VALID_TYPE_BOB_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT).withEquipment(VALID_EQUIPMENT_BOB_WORKOUT)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT).withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withTags(VALID_TAG_MORNING).withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastWorkout, descriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_WORKOUT_SUCCESS, editedWorkout);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutBook(model.getWorkoutBook()), model.getTrackedDataList(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.updateWorkout(lastWorkout, editedWorkout);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT, new EditWorkoutDescriptor());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout editedWorkout \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_WORKOUT_SUCCESS, editedWorkout);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutBook(model.getWorkoutBook()), model.getTrackedDataList(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workoutInFilteredList \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout editedWorkout \u003d new WorkoutBuilder(workoutInFilteredList).withName(VALID_NAME_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                new EditWorkoutDescriptorBuilder().withName(VALID_NAME_BOB_WORKOUT).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_WORKOUT_SUCCESS, editedWorkout);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutBook(model.getWorkoutBook()), model.getTrackedDataList(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.updateWorkout(model.getFilteredWorkoutList().get(0), editedWorkout);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void execute_duplicateWorkoutUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout firstWorkout \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder(firstWorkout).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_WORKOUT, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void execute_duplicateWorkoutFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // edit workout in filtered list into a duplicate in workout book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workoutInList \u003d model.getWorkoutBook().getWorkoutList().get(INDEX_SECOND_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                new EditWorkoutDescriptorBuilder(workoutInList).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void execute_invalidWorkoutIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkoutList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * but smaller than size of workout book"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void execute_invalidWorkoutIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of workout book list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWorkoutBook().getWorkoutList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                new EditWorkoutDescriptorBuilder().withName(VALID_NAME_BOB_WORKOUT).build());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout editedWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workoutToEdit \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder(editedWorkout).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutBook(model.getWorkoutBook()), model.getTrackedDataList(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.updateWorkout(workoutToEdit, editedWorkout);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // edit -\u003e first workout edited"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // undo -\u003e reverts workoutbook back to previous state and filtered workout list to show all workouts"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.undoWorkoutBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // redo -\u003e same first workout edited again"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.redoWorkoutBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredWorkoutList().size() + 1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // execution failed -\u003e workout book state not added into model"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // single workout book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * 1. Edits a {@code Workout} from a filtered list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited workout in the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the workout object regardless of indexing."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameWorkoutEdited() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout editedWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder(editedWorkout).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT, descriptor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WorkoutBook(model.getWorkoutBook()), model.getTrackedDataList(),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_SECOND_WORKOUT);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workoutToEdit \u003d model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.updateWorkout(workoutToEdit, editedWorkout);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.commitWorkoutBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // edit -\u003e edits second workout in unfiltered workout list / first workout in filtered workout list"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // undo -\u003e reverts workoutbook back to previous state and filtered workout list to show all workout"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.undoWorkoutBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertNotEquals(model.getFilteredWorkoutList().get(INDEX_FIRST_WORKOUT.getZeroBased()), workoutToEdit);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // redo -\u003e edits same second workout in unfiltered workout list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedModel.redoWorkoutBook();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_WORKOUT, DESC_AMY_WORKOUT);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor copyDescriptor \u003d new EditWorkoutDescriptor(DESC_AMY_WORKOUT);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_WORKOUT, copyDescriptor);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_WORKOUT, DESC_AMY_WORKOUT)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_WORKOUT, DESC_BOB_WORKOUT)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 14,
      "sijieg": 2,
      "shouteck": 11,
      "DarylTew": 108,
      "-": 136,
      "yicheng12": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditWorkoutDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB_WORKOUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.testutil.EditWorkoutDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class EditWorkoutDescriptorTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptorWithSameValues \u003d new EditWorkoutDescriptor(DESC_AMY_WORKOUT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertTrue(DESC_AMY_WORKOUT.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertTrue(DESC_AMY_WORKOUT.equals(DESC_AMY_WORKOUT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(DESC_BOB_WORKOUT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        EditWorkoutDescriptor editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .withName(VALID_NAME_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different equipment -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different muscle -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different calories -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT).withCalories(VALID_CALORIES_BOB_WORKOUT)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different instruction -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .withInstruction(VALID_INSTRUCTION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAmyWorkout \u003d new EditWorkoutDescriptorBuilder(DESC_AMY_WORKOUT).withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(DESC_AMY_WORKOUT.equals(editedAmyWorkout));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 18,
      "shouteck": 5,
      "DarylTew": 26,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_WORKOUTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.CARL_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ELLE_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.FIONA_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different workout -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_zeroKeywords_noWorkoutFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORKOUTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.updateFilteredWorkoutList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredWorkoutList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_multipleKeywords_multipleWorkoutsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORKOUTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        expectedModel.updateFilteredWorkoutList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(Arrays.asList(CARL_WORKOUT, ELLE_WORKOUT, FIONA_WORKOUT), model.getFilteredWorkoutList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 7,
      "sijieg": 11,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showWorkoutAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "sijieg": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ProfileCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.ProfileCommand.SHOWING_PROFILE_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.ui.ShowProfileRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ProfileCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void execute_profile_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertCommandSuccess(new ProfileCommand(), model, commandHistory, SHOWING_PROFILE_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowProfileRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RecommendCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyTrackedDataList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.RecommendArguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class RecommendCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void setUpModelStub() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout validWorkout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        modelStub.addWorkout(validWorkout);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void constructor_nullRecommendArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        new RecommendCommand(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_acceptedByModel_recommendSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Calories"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cCalories\u003e calories \u003d Optional.of(new Calories(\"150\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments recommendArguments \u003d new RecommendArguments.Builder().withCalories(calories).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        CommandResult commandResult \u003d new RecommendCommand(recommendArguments).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(RecommendCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Difficulty"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDifficulty\u003e difficulty \u003d Optional.of(new Difficulty(\"advanced\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        recommendArguments \u003d new RecommendArguments.Builder().withDifficulty(difficulty).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        commandResult \u003d new RecommendCommand(recommendArguments).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(RecommendCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Duration"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDuration\u003e duration \u003d Optional.of(new Duration(\"20m\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        recommendArguments \u003d new RecommendArguments.Builder().withDuration(duration).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        commandResult \u003d new RecommendCommand(recommendArguments).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(RecommendCommand.MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_workoutNotFoundCalories_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Calories"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cCalories\u003e calories \u003d Optional.of(new Calories(\"1000\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments recommendArguments \u003d new RecommendArguments.Builder().withCalories(calories).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendCommand recommendCommand \u003d new RecommendCommand(recommendArguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expectMessage(recommendCommand.MESSAGE_NO_SUCH_WORKOUT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        recommendCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_workoutNotFoundDifficulty_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Difficulty"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDifficulty\u003e difficulty \u003d Optional.of(new Difficulty(\"intermediate\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments recommendArguments \u003d new RecommendArguments.Builder().withDifficulty(difficulty).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendCommand recommendCommand \u003d new RecommendCommand(recommendArguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expectMessage(recommendCommand.MESSAGE_NO_SUCH_WORKOUT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        recommendCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void execute_workoutNotFoundDuration_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Duration"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDuration\u003e duration \u003d Optional.of(new Duration(\"1000m\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments recommendArguments \u003d new RecommendArguments.Builder().withDuration(duration).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendCommand recommendCommand \u003d new RecommendCommand(recommendArguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        thrown.expectMessage(recommendCommand.MESSAGE_NO_SUCH_WORKOUT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        recommendCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * A model stub."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        final ArrayList\u003cWorkout\u003e workoutsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void addWorkout(Workout workout) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            requireNonNull(workout);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            workoutsAdded.add(workout);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void resetData(ReadOnlyWorkoutBook newData) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public ReadOnlyWorkoutBook getWorkoutBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public ReadOnlyTrackedDataList getTrackedDataList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean hasWorkout(Workout workout) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void deleteWorkout(Workout target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void updateWorkout(Workout target, Workout editedWorkout) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public ObservableList\u003cWorkout\u003e getFilteredWorkoutList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return FXCollections.observableArrayList(workoutsAdded);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public List\u003cWorkout\u003e getFilteredInternalList(RecommendArguments recommendArguments) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            return workoutsAdded.stream()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .filter(!recommendArguments.isCaloriesNull() ? w -\u003e w.getCalories().fullCalories"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                            .equals(recommendArguments.getCalories().toString()) : w -\u003e w !\u003d null)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .filter(!recommendArguments.isDifficultyNull() ? w -\u003e w.getDifficulty().fullDifficulty"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                            .equals(recommendArguments.getDifficulty().toString()) : w -\u003e w !\u003d null)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .filter(!recommendArguments.isDurationNull() ? w -\u003e w.getDuration().fullDuration"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                            .equals(recommendArguments.getDuration().toString()) : w -\u003e w !\u003d null)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void updateFilteredWorkoutList(Predicate\u003cWorkout\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public ObservableList\u003cParameter\u003e getFilteredTrackedDataList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void updateFilteredTrackedDataList(Predicate\u003cParameter\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canUndoModel() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canRedoModel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void undoModel() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void redoModel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean canUndoWorkoutBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public boolean canRedoWorkoutBook() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void undoWorkoutBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void redoWorkoutBook() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canUndoTrackedDataList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean canRedoTrackedDataList() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void undoTrackedDataList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void redoTrackedDataList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void commitModel() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void commitWorkoutBook() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void commitTrackedDataList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        public void sortFilteredWorkoutList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void addDataToTrack(Parameter parameter) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public void removeDataFromTrack(Parameter parameter) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        public boolean hasParameter(Parameter parameter) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 82,
      "shouteck": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstWorkout;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.undoModel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        model.undoModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.undoModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.undoModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.redoModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.redoModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 17,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showWorkoutAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Index lastWorkoutIndex \u003d Index.fromOneBased(model.getFilteredWorkoutList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_WORKOUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertExecutionSuccess(lastWorkoutIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredWorkoutList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        showWorkoutAtIndex(expectedModel, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        showWorkoutAtIndex(model, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        showWorkoutAtIndex(expectedModel, INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of workout book list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getWorkoutBook().getWorkoutList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_WORKOUT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_WORKOUT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_WORKOUT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // different workout -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_WORKOUT_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 3,
      "shouteck": 5,
      "-": 91,
      "yicheng12": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TrackCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/*import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.TrackCommand.MESSAGE_ARGUMENTS_ACCEPTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.UserPrefs;*/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * Contains unit tests for TrackCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "/*    private Model model \u003d new ModelManager(getTypicalWorkoutBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final String subcommand \u003d \"start\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final Pair\u003cPrefix, String\u003e parameter \u003d new Pair\u003c\u003e(PREFIX_MUSCLE, \"bicep\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertCommandFailure(new TrackCommand(subcommand, parameter), model, new CommandHistory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                String.format(MESSAGE_ARGUMENTS_ACCEPTED, subcommand, parameter));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final TrackCommand testCommand \u003d new TrackCommand(\"start\", new Pair\u003c\u003e(PREFIX_MUSCLE, \"bicep\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 1: same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(testCommand, testCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 2: same values -\u003e return true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackCommand sameValuesInCommand \u003d new TrackCommand(\"start\", new Pair\u003c\u003e(PREFIX_MUSCLE, \"bicep\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(sameValuesInCommand, testCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 3: null -\u003e return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertNotEquals(null, testCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 4: different command -\u003e return false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertNotEquals(testCommand, new ClearCommand());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 5: different subcommand -\u003e return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackCommand differentSubcommand \u003d new TrackCommand(\"stop\", new Pair\u003c\u003e(PREFIX_MUSCLE, \"bicep\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertNotEquals(testCommand, differentSubcommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //check 6: different parameter -\u003e return false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackCommand differentParameter \u003d new TrackCommand(\"start\", new Pair\u003c\u003e(PREFIX_MUSCLE, \"bicep\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertNotEquals(testCommand, differentParameter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 55,
      "shouteck": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstWorkout;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.TrackedDataList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalWorkoutBook(), new TrackedDataList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        deleteFirstWorkout(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.undoModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedModel.undoModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 12,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFFICULTY_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFFICULTY_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EQUIPMENT_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EQUIPMENT_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EQUIPMENT_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MUSCLE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FUTURE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MORNING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NIGHT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB_WORKOUT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FUTURE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MORNING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.AMY_WORKOUT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.BOB_WORKOUT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout expectedWorkout \u003d new WorkoutBuilder(BOB_WORKOUT).withTags(VALID_TAG_NIGHT, VALID_TAG_FUTURE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY_WORKOUT + NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple types - last type accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_AMY_WORKOUT + TYPE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple durations - last duration accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple difficulties - last difficulty accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_AMY_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple equipments - last equipment accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_AMY_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple muscles - last muscle accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple calories - last calories accepted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_AMY_WORKOUT + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // multiple instructions - last instruction accepted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_AMY_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Workout expectedWorkoutMultipleTags \u003d new WorkoutBuilder(BOB_WORKOUT)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withTags(VALID_TAG_MORNING, VALID_TAG_NIGHT, VALID_TAG_FUTURE).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + TAG_DESC_NIGHT + TAG_DESC_FUTURE, new AddCommand(expectedWorkoutMultipleTags));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // zero tags except future tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout expectedWorkout \u003d new WorkoutBuilder(AMY_WORKOUT).withTags(VALID_TAG_FUTURE).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY_WORKOUT + TYPE_DESC_AMY_WORKOUT + DURATION_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        + DIFFICULTY_DESC_AMY_WORKOUT + EQUIPMENT_DESC_AMY_WORKOUT + MUSCLE_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        + CALORIES_DESC_AMY_WORKOUT + INSTRUCTION_DESC_AMY_WORKOUT + TAG_DESC_FUTURE,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new AddCommand(expectedWorkout));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing type prefix"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + VALID_TYPE_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                        + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing duration prefix"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + VALID_DURATION_BOB_WORKOUT"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing difficulty prefix"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + VALID_DIFFICULTY_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing equipment prefix"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + VALID_EQUIPMENT_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing muscle prefix"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + VALID_MUSCLE_BOB_WORKOUT"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing calories prefix"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + VALID_CALORIES_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // missing instruction prefix"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + VALID_INSTRUCTION_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB_WORKOUT + VALID_TYPE_BOB_WORKOUT"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + VALID_DURATION_BOB_WORKOUT + VALID_DIFFICULTY_BOB_WORKOUT + VALID_EQUIPMENT_BOB_WORKOUT"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + VALID_MUSCLE_BOB_WORKOUT + VALID_CALORIES_BOB_WORKOUT"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                + VALID_INSTRUCTION_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + INVALID_TYPE_DESC + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // invalid duration"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + INVALID_DURATION_DESC"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + INVALID_DIFFICULTY_DESC + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // invalid equipment"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + INVALID_EQUIPMENT_DESC + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Equipment.MESSAGE_EQUIPMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // invalid muscle"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + INVALID_MUSCLE_DESC"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Muscle.MESSAGE_MUSCLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + INVALID_CALORIES_DESC + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + VALID_TAG_NIGHT, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         * Work in Progress"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shouteck"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB_WORKOUT + TYPE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + TAG_DESC_NIGHT, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 113,
      "sijieg": 43,
      "shouteck": 27,
      "DarylTew": 14,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_WORKOUT));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 1,
      "-": 30,
      "yicheng12": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFFICULTY_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DIFFICULTY_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EQUIPMENT_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EQUIPMENT_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EQUIPMENT_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MUSCLE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MORNING;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NIGHT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_AMY_WORKOUT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_AMY_WORKOUT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY_WORKOUT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_AMY_WORKOUT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY_WORKOUT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_AMY_WORKOUT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY_WORKOUT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MORNING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY_WORKOUT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_WORKOUT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.testutil.EditWorkoutDescriptorBuilder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY_WORKOUT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY_WORKOUT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY_WORKOUT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * To be uncommented once invalid test cases are thought of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC, Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DURATION_DESC, Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DIFFICULTY_DESC, Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EQUIPMENT_DESC, Equipment.MESSAGE_EQUIPMENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MUSCLE_DESC, Muscle.MESSAGE_MUSCLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CALORIES_DESC, Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "         * To be uncommented once invalid test cases are thought of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        //invalid type followed by valid duration"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC +DURATION_DESC_AMY_WORKOUT, Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        //valid type followed by invalid type. The test case for invalid type followed by valid type"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        //is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        //assertParseFailure(parser, \"1\" + TYPE_DESC_BOB_WORKOUT + INVALID_TYPE_DESC, Type.MESSAGE_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Workout} being edited,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_MORNING + TAG_DESC_NIGHT + TAG_EMPTY,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_MORNING + TAG_EMPTY + TAG_DESC_NIGHT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_MORNING + TAG_DESC_NIGHT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "         * To be uncommented once invalid test cases are thought of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        //assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_TYPE_DESC + VALID_DURATION_AMY_WORKOUT"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        //+ VALID_DIFFICULTY_AMY_WORKOUT + VALID_EQUIPMENT_AMY_WORKOUT + VALID_MUSCLE_AMY_WORKOUT"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        //+ VALID_CALORIES_AMY_WORKOUT + VALID_INSTRUCTION_AMY_WORKOUT, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_BOB_WORKOUT + TAG_DESC_NIGHT"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + NAME_DESC_AMY_WORKOUT + DURATION_DESC_AMY_WORKOUT + DIFFICULTY_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + EQUIPMENT_DESC_AMY_WORKOUT + MUSCLE_DESC_AMY_WORKOUT + CALORIES_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + INSTRUCTION_DESC_AMY_WORKOUT + TAG_DESC_MORNING;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_AMY_WORKOUT)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withType(VALID_TYPE_BOB_WORKOUT).withDuration(VALID_DURATION_AMY_WORKOUT)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_AMY_WORKOUT).withEquipment(VALID_EQUIPMENT_AMY_WORKOUT)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withMuscle(VALID_MUSCLE_AMY_WORKOUT).withCalories(VALID_CALORIES_AMY_WORKOUT)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withInstruction(VALID_INSTRUCTION_AMY_WORKOUT).withTags(VALID_TAG_MORNING, VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + EQUIPMENT_DESC_AMY_WORKOUT + MUSCLE_DESC_AMY_WORKOUT + CALORIES_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + INSTRUCTION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_AMY_WORKOUT).withEquipment(VALID_EQUIPMENT_AMY_WORKOUT)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withMuscle(VALID_MUSCLE_AMY_WORKOUT).withCalories(VALID_CALORIES_AMY_WORKOUT)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withInstruction(VALID_INSTRUCTION_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_WORKOUT;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withName(VALID_NAME_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // type"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TYPE_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withType(VALID_TYPE_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // duration"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DURATION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withDuration(VALID_DURATION_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // difficulty"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withDifficulty(VALID_DIFFICULTY_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // equipment"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EQUIPMENT_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withEquipment(VALID_EQUIPMENT_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // muscle"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MUSCLE_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withMuscle(VALID_MUSCLE_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // calories"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CALORIES_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withCalories(VALID_CALORIES_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // instruction"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INSTRUCTION_DESC_AMY_WORKOUT;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withInstruction(VALID_INSTRUCTION_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_MORNING;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withTags(VALID_TAG_MORNING).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TYPE_DESC_AMY_WORKOUT + DURATION_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + DIFFICULTY_DESC_AMY_WORKOUT + EQUIPMENT_DESC_AMY_WORKOUT + MUSCLE_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + CALORIES_DESC_AMY_WORKOUT + INSTRUCTION_DESC_AMY_WORKOUT + TAG_DESC_MORNING + TYPE_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + DURATION_DESC_AMY_WORKOUT + DIFFICULTY_DESC_AMY_WORKOUT + EQUIPMENT_DESC_AMY_WORKOUT"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                + MUSCLE_DESC_AMY_WORKOUT + CALORIES_DESC_AMY_WORKOUT + INSTRUCTION_DESC_AMY_WORKOUT + TAG_DESC_MORNING"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + TYPE_DESC_BOB_WORKOUT + DURATION_DESC_BOB_WORKOUT + DIFFICULTY_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT + CALORIES_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + INSTRUCTION_DESC_BOB_WORKOUT + TAG_DESC_NIGHT;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withDuration(VALID_DURATION_BOB_WORKOUT).withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT).withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "                .withTags(VALID_TAG_MORNING, VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * To be uncommented once invalid test cases are thought of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TYPE_DESC + TYPE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withType(VALID_TYPE_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DURATION_DESC_BOB_WORKOUT + INVALID_TYPE_DESC + TYPE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + DIFFICULTY_DESC_BOB_WORKOUT + EQUIPMENT_DESC_BOB_WORKOUT + MUSCLE_DESC_BOB_WORKOUT"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            + CALORIES_DESC_BOB_WORKOUT + INSTRUCTION_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptorBuilder().withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withDuration(VALID_DURATION_BOB_WORKOUT).withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT).withInstruction(VALID_INSTRUCTION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_WORKOUT;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 91,
      "shouteck": 1,
      "DarylTew": 85,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"James\u0027s workout\u0026\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"strength + cardio\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"5 minutes\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"difficult\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_EQUIPMENT \u003d \"dumbbell + mat\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_MUSCLE \u003d \"bicep + tricep\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"123 calories\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //no invalid instructions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_NAME \u003d \"commando workout\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_TYPE \u003d \"strength\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_DURATION \u003d \"60m\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d \"intermediate\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_EQUIPMENT \u003d \"bench\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_MUSCLE \u003d \"biceps\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_CALORIES \u003d \"150\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_INSTRUCTION \u003d \"set 1: bicep curl reps: 4-6 set 2: tricep extension reps: 4-6\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"crazy\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"fun\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(INDEX_FIRST_WORKOUT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(INDEX_FIRST_WORKOUT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void paxrseName_null_throwsNullPointerEception() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseType(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseType(INVALID_TYPE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseType_validValueWithoutWhitespace_returnsType() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(VALID_TYPE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseType_validValueWithWhitespace_returnsTrimmedType() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String typeWithWhitespace \u003d WHITESPACE + VALID_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Type expectedType \u003d new Type(VALID_TYPE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedType, ParserUtil.parseType(typeWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDuration_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDuration_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDuration_validValueWithoutWhitespace_returnsDuration() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Duration expectedDuration \u003d new Duration(VALID_DURATION);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedDuration, ParserUtil.parseDuration(VALID_DURATION));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDuration_validValueWithWhitespace_returnsTrimmedDuration() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String durationWithWhitespace \u003d WHITESPACE + VALID_DURATION + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Duration expectedDuration \u003d new Duration(VALID_DURATION);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedDuration, ParserUtil.parseDuration(durationWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDifficulty_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDifficulty(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDifficulty_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDifficulty(INVALID_DIFFICULTY));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDifficulty_validValueWithoutWhitespace_returnsDifficulty() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Difficulty expectedDifficulty \u003d new Difficulty(VALID_DIFFICULTY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedDifficulty, ParserUtil.parseDifficulty(VALID_DIFFICULTY));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseDifficulty_validValueWithWhitespace_returnsTrimmedDifficulty() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String difficultyWithWhitespace \u003d WHITESPACE + VALID_DIFFICULTY + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Difficulty expectedDifficulty \u003d new Difficulty(VALID_DIFFICULTY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedDifficulty, ParserUtil.parseDifficulty(difficultyWithWhitespace));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseEquipment_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEquipment(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseEquipment_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEquipment(INVALID_EQUIPMENT));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseEquipment_validValueWithoutWhitespace_returnsEquipment() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Equipment expectedEquipment \u003d new Equipment(VALID_EQUIPMENT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedEquipment, ParserUtil.parseEquipment(VALID_EQUIPMENT));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseEquipment_validValueWithWhitespace_returnsTrimmedEquipment() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String equipmentWithWhitespace \u003d WHITESPACE + VALID_EQUIPMENT + WHITESPACE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Equipment expectedEquipment \u003d new Equipment(VALID_EQUIPMENT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedEquipment, ParserUtil.parseEquipment(equipmentWithWhitespace));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseMuscle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMuscle(null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseMuscle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseMuscle(INVALID_MUSCLE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseMuscle_validValueWithoutWhitespace_returnsMuscle() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Muscle expectedMuscle \u003d new Muscle(VALID_MUSCLE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedMuscle, ParserUtil.parseMuscle(VALID_MUSCLE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseMuscle_validValueWithWhitespace_returnsTrimmedMuscle() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String muscleWithWhitespace \u003d WHITESPACE + VALID_MUSCLE + WHITESPACE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Muscle expectedMuscle \u003d new Muscle(VALID_MUSCLE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedMuscle, ParserUtil.parseMuscle(muscleWithWhitespace));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseCalories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCalories(null));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseCalories_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalories(INVALID_CALORIES));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseCalories_validValueWithoutWhitespace_returnsCalories() throws Exception {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Calories expectedCalories \u003d new Calories(VALID_CALORIES);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(VALID_CALORIES));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseCalories_validValueWithWhitespace_returnsTrimmedCalories() throws Exception {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String caloriesWithWhitespace \u003d WHITESPACE + VALID_CALORIES + WHITESPACE;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Calories expectedCalories \u003d new Calories(VALID_CALORIES);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCalories, ParserUtil.parseCalories(caloriesWithWhitespace));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseInstruction_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInstruction(null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseInstruction_validValueWithoutWhitespace_returnsInstruction() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Instruction expectedInstruction \u003d new Instruction(VALID_INSTRUCTION);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedInstruction, ParserUtil.parseInstruction(VALID_INSTRUCTION));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseInstruction_validValueWithWhitespace_returnsTrimmedInstruction() throws Exception {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String instructionWithWhitespace \u003d WHITESPACE + VALID_INSTRUCTION + WHITESPACE;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Instruction expectedInstruction \u003d new Instruction(VALID_INSTRUCTION);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedInstruction, ParserUtil.parseInstruction(instructionWithWhitespace));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 9,
      "sijieg": 134,
      "shouteck": 8,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RecommendCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.RecommendArguments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class RecommendCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private RecommendCommandParser parser \u003d new RecommendCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Calories without Difficulty and Duration fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cCalories\u003e calories \u003d Optional.of(new Calories(\"1\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments expectedRecommendArguments \u003d new RecommendArguments.Builder().withCalories(calories).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_CALORIES + \"1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Difficulty without Calories and Duration fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDifficulty\u003e difficulty \u003d Optional.of(new Difficulty(\"beginner\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedRecommendArguments \u003d new RecommendArguments.Builder().withDifficulty(difficulty).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DIFFICULTY + \"beginner\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Duration without Calories and Difficulty fields"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDuration\u003e duration \u003d Optional.of(new Duration(\"1m\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedRecommendArguments \u003d new RecommendArguments.Builder().withDuration(duration).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DURATION + \"1m\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Calories and Difficulty without Duration field"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        calories \u003d Optional.of(new Calories(\"1000\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        difficulty \u003d Optional.of(new Difficulty(\"intermediate\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedRecommendArguments \u003d new RecommendArguments.Builder().withCalories(calories)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDifficulty(difficulty).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_CALORIES + \"1000\" + \" \" + PREFIX_DIFFICULTY + \"intermediate\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Calories and Duration without Difficulty field"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        calories \u003d Optional.of(new Calories(\"500\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        duration \u003d Optional.of(new Duration(\"1000m\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedRecommendArguments \u003d new RecommendArguments.Builder().withCalories(calories)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(duration).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_CALORIES + \"500\" + \" \" + PREFIX_DURATION + \"1000m\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Difficulty and Duration without Calories Field"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        difficulty \u003d Optional.of(new Difficulty(\"advanced\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        duration \u003d Optional.of(new Duration(\"500m\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedRecommendArguments \u003d new RecommendArguments.Builder().withDifficulty(difficulty)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(duration).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_DIFFICULTY + \"advanced\" + \" \" + PREFIX_DURATION + \"500m\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Valid Calories,Difficulty and Duration fields"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cCalories\u003e calories \u003d Optional.of(new Calories(\"750\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDifficulty\u003e difficulty \u003d Optional.of(new Difficulty(\"intermediate\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Optional\u003cDuration\u003e duration \u003d Optional.of(new Duration(\"750m\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments expectedRecommendArguments \u003d new RecommendArguments.Builder().withCalories(calories)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDifficulty(difficulty).withDuration(duration).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_CALORIES + \"750\" + \" \" + PREFIX_DIFFICULTY + \"intermediate\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                        + \" \" + PREFIX_DURATION + \"750m\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void parse_noFieldsPresent_success() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // No fields"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        ProfileWindowManager profileWindowManager \u003d ProfileWindowManager.getInstance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        RecommendArguments expectedRecommendArguments \u003d new RecommendArguments.Builder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withCalories(profileWindowManager.extractCalories())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDifficulty(profileWindowManager.extractDifficulty())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(profileWindowManager.extractDuration()).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseSuccess(parser, \" \", new RecommendCommand(expectedRecommendArguments));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Calories \u003c 1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_CALORIES + \"0\", Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Calories \u003e 1000"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_CALORIES + \"1001\", Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Calories for non-integer"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_CALORIES + \"hundred\", Calories.MESSAGE_CALORIES_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Difficulty for non-case sensitive inputs"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DIFFICULTY + \"beginNer\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Difficulty for integer"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DIFFICULTY + \"1\", Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Duration for \u003c 1m"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DURATION + \"0m\", Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Duration for \u003e 1000m"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DURATION + \"1001m\", Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // Invalid Duration for non-integer"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DURATION + \"fivem\", Duration.MESSAGE_DURATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_WORKOUT));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 1,
      "-": 27,
      "yicheng12": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TrackCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.commands.TrackCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TrackCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private TrackCommandParser parser \u003d new TrackCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void parse_compulsoryFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // have subcommand and parameter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String subcommand \u003d \"start\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String userInput \u003d subcommand + \" \" + MUSCLE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackCommand expectedCommand \u003d new TrackCommand(subcommand,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new Parameter(PREFIX_MUSCLE, VALID_MUSCLE_BOB_WORKOUT));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TrackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // no subcommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //assertParseFailure(parser, TrackCommand.COMMAND_WORD + \" \" + MUSCLE_DESC_BOB_WORKOUT, expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // no parameter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, TrackCommand.COMMAND_WORD + \" start\", expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        // only command word"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertParseFailure(parser, TrackCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WorkoutBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MUSCLE_DESC_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FUTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.logic.commands.TrackCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Parameter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.testutil.EditWorkoutDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.testutil.WorkoutUtil;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutBookParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private final WorkoutBookParser parser \u003d new WorkoutBookParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workout \u003d new WorkoutBuilder().withTags(VALID_TAG_FUTURE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(WorkoutUtil.getAddCommand(workout));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(new AddCommand(workout), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_WORKOUT.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_WORKOUT), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout workout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        EditWorkoutDescriptor descriptor \u003d new EditWorkoutDescriptorBuilder(workout).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                + INDEX_FIRST_WORKOUT.getOneBased() + \" \" + WorkoutUtil.getEditWorkoutDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_WORKOUT, descriptor), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void parseCommand_profile() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(parser.parseCommand(ProfileCommand.COMMAND_WORD) instanceof ProfileCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(parser.parseCommand(ProfileCommand.COMMAND_WORD + \" 3\") instanceof ProfileCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_WORKOUT.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_WORKOUT), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void parseCommand_track() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        final String subcommand \u003d \"start\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackCommand command \u003d (TrackCommand) parser.parseCommand(TrackCommand.COMMAND_WORD + \" start \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                + MUSCLE_DESC_BOB_WORKOUT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(new TrackCommand(subcommand, new Parameter(PREFIX_MUSCLE, VALID_MUSCLE_BOB_WORKOUT)), command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 10,
      "sijieg": 25,
      "shouteck": 2,
      "DarylTew": 1,
      "-": 125,
      "yicheng12": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_WORKOUTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ALICE_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.BENSON_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBookBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void hasWorkout_nullWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        modelManager.hasWorkout(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void hasWorkout_workoutNotInWorkoutBook_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(modelManager.hasWorkout(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void hasWorkout_workoutInWorkoutBook_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        modelManager.addWorkout(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(modelManager.hasWorkout(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void getFilteredWorkoutList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        modelManager.getFilteredWorkoutList().remove(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        WorkoutBook workoutBook \u003d new WorkoutBookBuilder().withWorkout(ALICE_WORKOUT).withWorkout(BENSON_WORKOUT)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        WorkoutBook differentWorkoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        TrackedDataList trackedDataList \u003d new TrackedDataList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        modelManager \u003d new ModelManager(workoutBook, trackedDataList, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(workoutBook, trackedDataList, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different workoutBook -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWorkoutBook, trackedDataList, userPrefs)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        /* different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        String[] keywords \u003d ALICE_WORKOUT.getName().fullName.replace(\"workout\",\"\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        modelManager.updateFilteredWorkoutList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(workoutBook, userPrefs)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        This test case is removed as the word \"workout\" can exists in another person\u0027s workout name */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        modelManager.updateFilteredWorkoutList(PREDICATE_SHOW_ALL_WORKOUTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        differentUserPrefs.setWorkoutBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(workoutBook, trackedDataList, differentUserPrefs)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 5,
      "sijieg": 5,
      "shouteck": 20,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedWorkoutBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shouteck"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.AMY_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.BOB_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.CARL_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.testutil.WorkoutBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "public class VersionedWorkoutBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final ReadOnlyWorkoutBook workoutBookWithAmy \u003d new WorkoutBookBuilder().withWorkout(AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final ReadOnlyWorkoutBook workoutBookWithBob \u003d new WorkoutBookBuilder().withWorkout(BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final ReadOnlyWorkoutBook workoutBookWithCarl \u003d new WorkoutBookBuilder().withWorkout(CARL_WORKOUT).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private final ReadOnlyWorkoutBook emptyWorkoutBook \u003d new WorkoutBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void commit_singleWorkoutBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList(emptyWorkoutBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.singletonList(emptyWorkoutBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void commit_multipleWorkoutBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Arrays.asList(emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                workoutBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void commit_multipleWorkoutBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.singletonList(emptyWorkoutBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canUndo_multipleWorkoutBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(versionedWorkoutBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canUndo_multipleWorkoutBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(versionedWorkoutBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canUndo_singleWorkoutBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList(emptyWorkoutBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canUndo_multipleWorkoutBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canRedo_multipleWorkoutBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(versionedWorkoutBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canRedo_multipleWorkoutBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(versionedWorkoutBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canRedo_singleWorkoutBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList(emptyWorkoutBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void canRedo_multipleWorkoutBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void undo_multipleWorkoutBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.singletonList(emptyWorkoutBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                workoutBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.singletonList(workoutBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void undo_multipleWorkoutBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Arrays.asList(workoutBookWithAmy, workoutBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void undo_singleWorkoutBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList(emptyWorkoutBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertThrows(VersionedWorkoutBook.NoUndoableStateException.class, versionedWorkoutBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void undo_multipleWorkoutBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertThrows(VersionedWorkoutBook.NoUndoableStateException.class, versionedWorkoutBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void redo_multipleWorkoutBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Arrays.asList(emptyWorkoutBook, workoutBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                workoutBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void redo_multipleWorkoutBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        versionedWorkoutBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertWorkoutBookListStatus(versionedWorkoutBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.singletonList(emptyWorkoutBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                workoutBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                Collections.singletonList(workoutBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void redo_singleWorkoutBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList(emptyWorkoutBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertThrows(VersionedWorkoutBook.NoRedoableStateException.class, versionedWorkoutBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void redo_multipleWorkoutBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                emptyWorkoutBook, workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertThrows(VersionedWorkoutBook.NoRedoableStateException.class, versionedWorkoutBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d prepareWorkoutBookList(workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook copy \u003d prepareWorkoutBookList(workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(versionedWorkoutBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(versionedWorkoutBook.equals(versionedWorkoutBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook differentWorkoutBookList \u003d prepareWorkoutBookList(workoutBookWithBob, workoutBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.equals(differentWorkoutBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook differentCurrentStatePointer \u003d prepareWorkoutBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                workoutBookWithAmy, workoutBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedWorkoutBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Asserts that {@code versionedWorkoutBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * states before {@code versionedWorkoutBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * and states after {@code versionedWorkoutBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private void assertWorkoutBookListStatus(VersionedWorkoutBook versionedWorkoutBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                                             List\u003cReadOnlyWorkoutBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                                             ReadOnlyWorkoutBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                                             List\u003cReadOnlyWorkoutBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(new WorkoutBook(versionedWorkoutBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        while (versionedWorkoutBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            versionedWorkoutBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        for (ReadOnlyWorkoutBook expectedWorkoutBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            assertEquals(expectedWorkoutBook, new WorkoutBook(versionedWorkoutBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            versionedWorkoutBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        for (ReadOnlyWorkoutBook expectedWorkoutBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            versionedWorkoutBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            assertEquals(expectedWorkoutBook, new WorkoutBook(versionedWorkoutBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(versionedWorkoutBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedWorkoutBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Creates and returns a {@code VersionedWorkoutBook} with the {@code workoutBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * {@code VersionedWorkoutBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private VersionedWorkoutBook prepareWorkoutBookList(ReadOnlyWorkoutBook... workoutBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(workoutBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        VersionedWorkoutBook versionedWorkoutBook \u003d new VersionedWorkoutBook(workoutBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        for (int i \u003d 1; i \u003c workoutBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            versionedWorkoutBook.resetData(workoutBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            versionedWorkoutBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        return versionedWorkoutBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     * Shifts the {@code versionedWorkoutBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shouteck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedWorkoutBook versionedWorkoutBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            versionedWorkoutBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "shouteck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WorkoutBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ALICE_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.workout.exceptions.DuplicateWorkoutException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class WorkoutBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private final WorkoutBook workoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertEquals(Collections.emptyList(), workoutBook.getWorkoutList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void resetData_withValidReadOnlyWorkoutBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutBook newData \u003d getTypicalWorkoutBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertEquals(newData, workoutBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void resetData_withDuplicateWorkouts_throwsDuplicateWorkoutException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // Two workouts with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        List\u003cWorkout\u003e newWorkouts \u003d Arrays.asList(ALICE_WORKOUT, editedAliceWorkout);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutBookStub newData \u003d new WorkoutBookStub(newWorkouts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        thrown.expect(DuplicateWorkoutException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void hasWorkout_nullWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.hasWorkout(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void hasWorkout_workoutNotInWorkoutBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(workoutBook.hasWorkout(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void hasWorkout_workoutInWorkoutBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.addWorkout(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertTrue(workoutBook.hasWorkout(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void hasWorkout_workoutWithSameIdentityFieldsInWorkoutBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.addWorkout(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                .withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(workoutBook.hasWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void getWorkoutList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutBook.getWorkoutList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * A stub ReadOnlyWorkoutBook whose workouts list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private static class WorkoutBookStub implements ReadOnlyWorkoutBook {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        private final ObservableList\u003cWorkout\u003e workouts \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutBookStub(Collection\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            this.workouts.setAll(workouts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        public ObservableList\u003cWorkout\u003e getWorkoutList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            return workouts;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 2,
      "sijieg": 4,
      "shouteck": 1,
      "DarylTew": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/model/workout/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // different workout -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertTrue(predicate.test(new WorkoutBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertTrue(predicate.test(new WorkoutBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertTrue(predicate.test(new WorkoutBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertTrue(predicate.test(new WorkoutBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertFalse(predicate.test(new WorkoutBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertFalse(predicate.test(new WorkoutBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "         * To be fixed later"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        /*predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(predicate.test(new WorkoutBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));*/"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 4,
      "DarylTew": 3,
      "yicheng12": 8,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/workout/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yicheng12": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/workout/UniqueWorkoutListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ALICE_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.exceptions.DuplicateWorkoutException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.exceptions.WorkoutNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class UniqueWorkoutListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private final UniqueWorkoutList uniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void contains_nullWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.contains(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void contains_workoutNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertFalse(uniqueWorkoutList.contains(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void contains_workoutInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertTrue(uniqueWorkoutList.contains(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void contains_workoutWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout editedAlice \u003d new WorkoutBuilder(ALICE_WORKOUT).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertTrue(uniqueWorkoutList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void add_nullWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void add_duplicateWorkout_throwsDuplicateWorkoutException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(DuplicateWorkoutException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_nullTargetWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(null, ALICE_WORKOUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_nullEditedWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(ALICE_WORKOUT, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_targetWorkoutNotInList_throwsWorkoutNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(WorkoutNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(ALICE_WORKOUT, ALICE_WORKOUT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_editedWorkoutIsSameWorkout_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(ALICE_WORKOUT, ALICE_WORKOUT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        UniqueWorkoutList expectedUniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedUniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(expectedUniqueWorkoutList, uniqueWorkoutList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_editedWorkoutHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout editedAlice \u003d new WorkoutBuilder(ALICE_WORKOUT).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(ALICE_WORKOUT, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        UniqueWorkoutList expectedUniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        expectedUniqueWorkoutList.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(expectedUniqueWorkoutList, uniqueWorkoutList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_editedWorkoutHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(ALICE_WORKOUT, BOB_WORKOUT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        UniqueWorkoutList expectedUniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedUniqueWorkoutList.add(BOB_WORKOUT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(expectedUniqueWorkoutList, uniqueWorkoutList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkout_editedWorkoutHasNonUniqueIdentity_throwsDuplicateWorkoutException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(BOB_WORKOUT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(DuplicateWorkoutException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.setWorkout(ALICE_WORKOUT, BOB_WORKOUT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void remove_nullWorkout_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void remove_workoutDoesNotExist_throwsWorkoutNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(WorkoutNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.remove(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void remove_existingWorkout_removesWorkout() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.remove(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        UniqueWorkoutList expectedUniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(expectedUniqueWorkoutList, uniqueWorkoutList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkouts_nullUniqueWorkoutList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.setWorkouts((UniqueWorkoutList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWrokouts_uniqueWorkoutList_replacesOwnListWithProvidedUniqueWorkoutList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        UniqueWorkoutList expectedUniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedUniqueWorkoutList.add(BOB_WORKOUT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.setWorkouts(expectedUniqueWorkoutList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(expectedUniqueWorkoutList, uniqueWorkoutList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkouts_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.setWorkouts((List\u003cWorkout\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkouts_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        uniqueWorkoutList.add(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        List\u003cWorkout\u003e workoutList \u003d Collections.singletonList(BOB_WORKOUT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.setWorkouts(workoutList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        UniqueWorkoutList expectedUniqueWorkoutList \u003d new UniqueWorkoutList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        expectedUniqueWorkoutList.add(BOB_WORKOUT);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(expectedUniqueWorkoutList, uniqueWorkoutList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void setWorkouts_listWithDuplicateWorkouts_throwsDuplicateWorkoutException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        List\u003cWorkout\u003e listWithDuplicateWorkouts \u003d Arrays.asList(ALICE_WORKOUT, ALICE_WORKOUT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(DuplicateWorkoutException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.setWorkouts(listWithDuplicateWorkouts);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        uniqueWorkoutList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 29,
      "sijieg": 11,
      "shouteck": 8,
      "yicheng12": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/model/workout/WorkoutTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.model.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB_WORKOUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ALICE_WORKOUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.BOB_WORKOUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class WorkoutTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Workout workout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        workout.getTags().remove(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void isSameWorkout() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(ALICE_WORKOUT.isSameWorkout(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(ALICE_WORKOUT.isSameWorkout(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different type and duration -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(VALID_DURATION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different name only -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withName(VALID_NAME_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different name and type -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withName(VALID_NAME_BOB_WORKOUT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withType(VALID_TYPE_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different name and duration -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withName(VALID_NAME_BOB_WORKOUT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(VALID_DURATION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different name and muscle -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withName(VALID_NAME_BOB_WORKOUT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withMuscle(VALID_MUSCLE_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different attributes -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different attributes -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // different attributes -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withCalories(VALID_CALORIES_BOB_WORKOUT)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withInstruction(VALID_INSTRUCTION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(ALICE_WORKOUT.isSameWorkout(editedAliceWorkout));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout aliceCopy \u003d new WorkoutBuilder(ALICE_WORKOUT).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(ALICE_WORKOUT.equals(aliceCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertTrue(ALICE_WORKOUT.equals(ALICE_WORKOUT));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // different workout -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(BOB_WORKOUT));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Workout editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withName(VALID_NAME_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withType(VALID_TYPE_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different equipment -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withEquipment(VALID_EQUIPMENT_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different muscle -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withMuscle(VALID_MUSCLE_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different calories -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withCalories(VALID_CALORIES_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        // different instruction -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withInstruction(VALID_INSTRUCTION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        editedAliceWorkout \u003d new WorkoutBuilder(ALICE_WORKOUT).withTags(VALID_TAG_NIGHT).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(ALICE_WORKOUT.equals(editedAliceWorkout));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 53,
      "shouteck": 52,
      "yicheng12": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        userPrefs.setWorkoutBookFilePath(Paths.get(\"workoutbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "yicheng12": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.commons.events.model.WorkoutBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlWorkoutBookStorage workoutBookStorage \u003d new XmlWorkoutBookStorage(getTempFilePath(\"wb\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlTrackedDataListStorage trackedDataListStorage \u003d new XmlTrackedDataListStorage(getTempFilePath(\"tdl\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        storageManager \u003d new StorageManager(workoutBookStorage, trackedDataListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void workoutBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "         * {@link XmlWorkoutBookStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlWorkoutBookStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        WorkoutBook original \u003d getTypicalWorkoutBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        storageManager.saveWorkoutBook(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        ReadOnlyWorkoutBook retrieved \u003d storageManager.readWorkoutBook().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertEquals(original, new WorkoutBook(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void getWorkoutBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        assertNotNull(storageManager.getWorkoutBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public void handleWorkoutBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlWorkoutBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                                             new XmlTrackedDataListStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        storage.handleWorkoutBookChangedEvent(new WorkoutBookChangedEvent(new WorkoutBook()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    class XmlWorkoutBookStorageExceptionThrowingStub extends XmlWorkoutBookStorage {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        public XmlWorkoutBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        public void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 4,
      "shouteck": 1,
      "DarylTew": 1,
      "-": 82,
      "yicheng12": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedWorkoutTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.storage.XmlAdaptedWorkout.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.BENSON_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlAdaptedWorkoutTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"James\u0027s workout\u0026\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"strength + cardio\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"5 minutes\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"difficult\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_EQUIPMENT \u003d \"dumbbell + mat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_MUSCLE \u003d \"bicep + tricep\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_CALORIES \u003d \"123 calories\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //no invalid instructions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON_WORKOUT.getName().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_TYPE \u003d BENSON_WORKOUT.getType().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_DURATION \u003d BENSON_WORKOUT.getDuration().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d BENSON_WORKOUT.getDifficulty().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_EQUIPMENT \u003d BENSON_WORKOUT.getEquipment().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_MUSCLE \u003d BENSON_WORKOUT.getMuscle().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_CALORIES \u003d BENSON_WORKOUT.getCalories().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final String VALID_INSTRUCTION \u003d BENSON_WORKOUT.getInstruction().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON_WORKOUT.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void toModelType_validWorkoutDetails_returnsWorkout() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(BENSON_WORKOUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(BENSON_WORKOUT, workout.toModelType());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                new XmlAdaptedWorkout(INVALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY, VALID_EQUIPMENT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                        VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(null, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, INVALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Type.MESSAGE_TYPE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, null, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, INVALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Duration.MESSAGE_DURATION_CONSTRAINTS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, null, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Duration.class.getSimpleName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidDifficulty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, INVALID_DIFFICULTY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Difficulty.MESSAGE_DIFFICULTY_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullDifficulty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, null,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Difficulty.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidEquipment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                INVALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Equipment.MESSAGE_EQUIPMENT_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullEquipment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                null, VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Equipment.class.getSimpleName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidMuscle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, INVALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Muscle.MESSAGE_MUSCLE_CONSTRAINTS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullMuscle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, null, VALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Muscle.class.getSimpleName());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, INVALID_CALORIES, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CALORIES_CONSTRAINTS;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, null, VALID_INSTRUCTION, VALID_TAGS, null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calories.class.getSimpleName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    //no invalid instruction"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_nullInstruction_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_EQUIPMENT, VALID_MUSCLE, VALID_CALORIES, null, VALID_TAGS, null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Instruction.class.getSimpleName());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, workout::toModelType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        XmlAdaptedWorkout workout \u003d new XmlAdaptedWorkout(VALID_NAME, VALID_TYPE, VALID_DURATION, VALID_DIFFICULTY,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                VALID_EQUIPMENT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "                VALID_MUSCLE, VALID_CALORIES, VALID_INSTRUCTION, invalidTags, null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, workout::toModelType);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 160,
      "sijieg": 3,
      "shouteck": 8,
      "yicheng12": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableWorkoutBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.testutil.TypicalWorkouts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlSerializableWorkoutBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableWorkoutBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Path TYPICAL_WORKOUTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalWorkoutsWorkoutBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Path INVALID_WORKOUTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidWorkoutWorkoutBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Path DUPLICATE_WORKOUTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateWorkoutWorkoutBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_typicalWorkoutsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlSerializableWorkoutBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_WORKOUTS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        WorkoutBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        WorkoutBook typicalWorkoutsWorkoutBook \u003d TypicalWorkouts.getTypicalWorkoutBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(addressBookFromFile, typicalWorkoutsWorkoutBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_invalidWorkoutFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlSerializableWorkoutBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_WORKOUTS_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void toModelType_duplicateWorkouts_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlSerializableWorkoutBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_WORKOUTS_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expectMessage(XmlSerializableWorkoutBook.MESSAGE_DUPLICATE_WORKOUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlWorkoutBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ALICE_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.HOON_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.IDA_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkoutBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.ReadOnlyWorkoutBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class XmlWorkoutBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlWorkoutBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void readWorkoutBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        readWorkoutBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWorkoutBook\u003e readWorkoutBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return new XmlWorkoutBookStorage(Paths.get(filePath)).readWorkoutBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertFalse(readWorkoutBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        readWorkoutBook(\"NotXmlFormatWorkoutBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void readWorkoutBook_invalidWorkoutWorkoutBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        readWorkoutBook(\"invalidWorkoutWorkoutBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void readWorkoutBook_invalidAndValidWorkoutWorkoutBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        readWorkoutBook(\"invalidAndValidWorkoutWorkoutBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void readAndSaveWorkoutBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempWorkoutBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        WorkoutBook original \u003d getTypicalWorkoutBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        XmlWorkoutBookStorage xmlWorkoutBookStorage \u003d new XmlWorkoutBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        xmlWorkoutBookStorage.saveWorkoutBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        ReadOnlyWorkoutBook readBack \u003d xmlWorkoutBookStorage.readWorkoutBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(original, new WorkoutBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        original.addWorkout(HOON_WORKOUT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        original.removeWorkout(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        xmlWorkoutBookStorage.saveWorkoutBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        readBack \u003d xmlWorkoutBookStorage.readWorkoutBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(original, new WorkoutBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        original.addWorkout(IDA_WORKOUT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        xmlWorkoutBookStorage.saveWorkoutBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        readBack \u003d xmlWorkoutBookStorage.readWorkoutBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        assertEquals(original, new WorkoutBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveWorkoutBook_nullWorkoutBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        saveWorkoutBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Saves {@code workoutBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private void saveWorkoutBook(ReadOnlyWorkoutBook workoutBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            new XmlWorkoutBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                    .saveWorkoutBook(workoutBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public void saveWorkoutBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        saveWorkoutBook(new WorkoutBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 126,
      "shouteck": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditWorkoutDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": " * A utility class to help with building EditWorkoutDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class EditWorkoutDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private EditWorkoutDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder(EditWorkoutDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        this.descriptor \u003d new EditWorkoutDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Returns an {@code EditWorkoutDescriptor} with fields containing {@code workout}\u0027s details"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder(Workout workout) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor \u003d new EditWorkoutDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setName(workout.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setType(workout.getType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setDuration(workout.getDuration());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setDifficulty(workout.getDifficulty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setEquipment(workout.getEquipment());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setMuscle(workout.getMuscle());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setCalories(workout.getCalories());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setInstruction(workout.getInstruction());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setTags(workout.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Name} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Type} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Duration} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setDuration(new Duration(duration));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setDifficulty(new Difficulty(difficulty));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Equipment} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withEquipment(String equipment) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setEquipment(new Equipment(equipment));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Muscle} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withMuscle(String muscle) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setMuscle(new Muscle(muscle));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Calories} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setCalories(new Calories(calories));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Sets the {@code Instruction} of the {@code EditWorkoutDescriptor} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withInstruction(String instruction) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        descriptor.setInstruction(new Instruction(instruction));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditWorkoutDescriptor}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public EditWorkoutDescriptor build() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 3,
      "shouteck": 15,
      "DarylTew": 69,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the middle index of the workout in the {@code model}\u0027s workout list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredWorkoutList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the last index of the workout in the {@code model}\u0027s workout list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return Index.fromOneBased(model.getFilteredWorkoutList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns the workout in the {@code model}\u0027s workout list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static Workout getWorkout(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return model.getFilteredWorkoutList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final Index INDEX_FIRST_WORKOUT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final Index INDEX_SECOND_WORKOUT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final Index INDEX_THIRD_WORKOUT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalWorkouts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "garyheng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_AMY_WORKOUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB_WORKOUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_AMY_WORKOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BOB_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_AMY_WORKOUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EQUIPMENT_BOB_WORKOUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY_WORKOUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB_WORKOUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_AMY_WORKOUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MUSCLE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY_WORKOUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB_WORKOUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_AMY_WORKOUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_BOB_WORKOUT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "garyheng"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "garyheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "garyheng"
        },
        "content": " * A utility class containing a list of {@code Workouts} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "garyheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "garyheng"
        },
        "content": "public class TypicalWorkouts {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout ALICE_WORKOUT \u003d new WorkoutBuilder().withName(\"Alice Pauline\u0027s workout\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            .withType(\"balance\").withDuration(\"5m\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"advanced\").withEquipment(\"NIL\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            .withMuscle(\"thigh\").withCalories(\"20\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            .withInstruction(\"Walk heel to toe for 50 steps\").withTags(\"relax\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout BENSON_WORKOUT \u003d new WorkoutBuilder().withName(\"Benson Meier\u0027s workout\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"strength\").withDuration(\"10m\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"intermediate\").withEquipment(\"bar\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"deltoids\").withCalories(\"100\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withInstruction(\"set1: shoulder press reps: 5-7\").withTags(\"heavy\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout CARL_WORKOUT \u003d new WorkoutBuilder().withName(\"Carl Kurz\u0027s workout\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"cardio\").withDuration(\"25m\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"intermediate\").withEquipment(\"NIL\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"legs\").withCalories(\"135\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withInstruction(\"set1: leg raises reps: 15-20\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout DANIEL_WORKOUT \u003d new WorkoutBuilder().withName(\"Daniel Meier\u0027s workout\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"cardio\").withDuration(\"30m\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"intermediate\").withEquipment(\"NIL\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"legs\").withCalories(\"200\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withInstruction(\"30 minutes slow jog\").withTags(\"favourite\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout ELLE_WORKOUT \u003d new WorkoutBuilder().withName(\"Elle Meyer\u0027s workout\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"endurance\").withDuration(\"20m\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"beginner\").withEquipment(\"NIL\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"legs\").withCalories(\"100\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withInstruction(\"20 minutes brisk walk\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout FIONA_WORKOUT \u003d new WorkoutBuilder().withName(\"Fiona Kunz\u0027s workout\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"strength\").withDuration(\"40m\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"advanced\").withEquipment(\"medicine ball\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"arms\").withCalories(\"225\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withInstruction(\"set1: medicine ball throw reps: 25-30\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout GEORGE_WORKOUT \u003d new WorkoutBuilder().withName(\"George Best\u0027s workout\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"strength\").withDuration(\"30m\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"intermediate\").withEquipment(\"free weights\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"chest\").withCalories(\"175\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withInstruction(\"6 sets of bench press, 6 reps per set of 70% max\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout HOON_WORKOUT \u003d new WorkoutBuilder().withName(\"Hoon Meier\u0027s workout\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"endurance\").withDuration(\"10m\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"beginner\").withEquipment(\"yoga mat\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"core\").withCalories(\"90\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withInstruction(\"set1: planks reps: 5 x 1 minute\").withTags(\"future\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout IDA_WORKOUT \u003d new WorkoutBuilder().withName(\"Ida Mueller\u0027s workout\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(\"strength\").withDuration(\"35m\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(\"intermediate\").withEquipment(\"dumbbells\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(\"chest\").withCalories(\"160\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withInstruction(\"set1: chest fly reps: 5 - 10\").withTags(\"future\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public static final Workout JOHN_WORKOUT \u003d new WorkoutBuilder().withName(\"John Pauline\u0027s workout\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withType(\"cardio\").withDuration(\"45m\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withDifficulty(\"intermediate\").withEquipment(\"NIL\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withMuscle(\"legs\").withCalories(\"300\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withInstruction(\"45 minutes slow jog\").withTags(\"future\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    // Manually added - Workout details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout AMY_WORKOUT \u003d new WorkoutBuilder().withName(VALID_NAME_AMY_WORKOUT)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(VALID_TYPE_AMY_WORKOUT).withDuration(VALID_DURATION_AMY_WORKOUT)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_AMY_WORKOUT).withEquipment(VALID_EQUIPMENT_AMY_WORKOUT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(VALID_MUSCLE_AMY_WORKOUT).withCalories(VALID_CALORIES_AMY_WORKOUT)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withInstruction(VALID_INSTRUCTION_AMY_WORKOUT).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final Workout BOB_WORKOUT \u003d new WorkoutBuilder().withName(VALID_NAME_BOB_WORKOUT)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withType(VALID_TYPE_BOB_WORKOUT).withDuration(VALID_DURATION_BOB_WORKOUT)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_BOB_WORKOUT).withEquipment(VALID_EQUIPMENT_BOB_WORKOUT)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            .withMuscle(VALID_MUSCLE_BOB_WORKOUT).withCalories(VALID_CALORIES_BOB_WORKOUT)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "            .withInstruction(VALID_INSTRUCTION_BOB_WORKOUT).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    private TypicalWorkouts() {} // prevents instantiation"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     * Returns an {@code WorkoutBook} with all the typical workouts."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "garyheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static WorkoutBook getTypicalWorkoutBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        WorkoutBook wb \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        for (Workout workout : getTypicalWorkouts()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "garyheng"
        },
        "content": "            wb.addWorkout(workout);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return wb;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "garyheng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static List\u003cWorkout\u003e getTypicalWorkouts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "garyheng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_WORKOUT, BENSON_WORKOUT, CARL_WORKOUT, DANIEL_WORKOUT, ELLE_WORKOUT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "garyheng"
        },
        "content": "                FIONA_WORKOUT, GEORGE_WORKOUT));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "garyheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 94,
      "sijieg": 3,
      "shouteck": 10,
      "DarylTew": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WorkoutBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * A utility class to help with building Workoutbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": " *     {@code WorkoutBook ab \u003d new WorkoutBookBuilder().withWorkout(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private WorkoutBook workoutBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBook \u003d new WorkoutBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBookBuilder(WorkoutBook workoutBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        this.workoutBook \u003d workoutBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Adds a new {@code Workout} to the {@code WorkoutBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBookBuilder withWorkout(Workout workout) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutBook.addWorkout(workout);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public WorkoutBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return workoutBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WorkoutBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Equipment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Instruction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Muscle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class WorkoutBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"commando\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"strength, cardio\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String DEFAULT_DURATION \u003d \"20m\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "garyheng"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"advanced\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String DEFAULT_EQUIPMENT \u003d \"dumbbell\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String DEFAULT_MUSCLE \u003d \"bicep, tricep\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static final String DEFAULT_CALORIES \u003d \"150\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public static final String DEFAULT_INSTRUCTION \u003d \"set 1: bicep curl reps: 4-6 set 2: tricep extension reps: 4-6\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Difficulty difficulty;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Equipment equipment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Muscle muscle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Instruction instruction;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        duration \u003d new Duration(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        equipment \u003d new Equipment(DEFAULT_EQUIPMENT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        muscle \u003d new Muscle(DEFAULT_MUSCLE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        instruction \u003d new Instruction(DEFAULT_INSTRUCTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Initializes the WorkoutBuilder with the data of {@code workoutToCopy}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder(Workout workoutToCopy) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        name \u003d workoutToCopy.getName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        type \u003d workoutToCopy.getType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        duration \u003d workoutToCopy.getDuration();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        difficulty \u003d workoutToCopy.getDifficulty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        equipment \u003d workoutToCopy.getEquipment();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        muscle \u003d workoutToCopy.getMuscle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        calories \u003d workoutToCopy.getCalories();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        instruction \u003d workoutToCopy.getInstruction();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(workoutToCopy.getTags());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Sets the {@code Name} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withName(String name) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Workout} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Type} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withType(String type) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Duration} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.duration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Equipment} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withEquipment(String equipment) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.equipment \u003d new Equipment(equipment);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Muscle} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withMuscle(String muscle) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.muscle \u003d new Muscle(muscle);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Calories} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withCalories(String calories) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Sets the {@code Instruction} of the {@code Workout} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public WorkoutBuilder withInstruction(String instruction) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        this.instruction \u003d new Instruction(instruction);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public Workout build() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return new Workout(name, type, duration, difficulty, equipment, muscle, calories, instruction, tags, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "garyheng": 1,
      "sijieg": 8,
      "shouteck": 8,
      "yicheng12": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WorkoutUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EQUIPMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MUSCLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditWorkoutDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shouteck"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yicheng12"
        },
        "content": " * A utility class for Workout."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "public class WorkoutUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Returns an add command string for adding the {@code workout}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static String getAddCommand(Workout workout) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getWorkoutDetails(workout);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Returns the part of command string for the given {@code workout}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static String getWorkoutDetails(Workout workout) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_NAME + workout.getName().fullName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_TYPE + workout.getType().fullType + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_DURATION + workout.getDuration().fullDuration + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_DIFFICULTY + workout.getDifficulty().fullDifficulty + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_EQUIPMENT + workout.getEquipment().fullEquipment + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_MUSCLE + workout.getMuscle().fullMuscle + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_CALORIES + workout.getCalories().fullCalories + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "        sb.append(PREFIX_INSTRUCTION + workout.getInstruction().fullInstruction + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        workout.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "     * Returns the part of command string for the given {@code EditWorkoutDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yicheng12"
        },
        "content": "    public static String getEditWorkoutDescriptorDetails(EditWorkoutDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getType().ifPresent(type -\u003e sb.append(PREFIX_TYPE).append(type.fullType).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getDuration().ifPresent(duration -\u003e sb.append(PREFIX_DURATION).append(duration.fullDuration)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getDifficulty().ifPresent(difficulty -\u003e sb.append(PREFIX_DIFFICULTY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .append(difficulty.fullDifficulty).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getEquipment().ifPresent(equipment -\u003e sb.append(PREFIX_EQUIPMENT).append(equipment.fullEquipment)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getMuscle().ifPresent(muscle -\u003e sb.append(PREFIX_MUSCLE).append(muscle.fullMuscle).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getCalories().ifPresent(calories -\u003e sb.append(PREFIX_CALORIES).append(calories.fullCalories)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        descriptor.getInstruction().ifPresent(instruction -\u003e sb.append(PREFIX_INSTRUCTION)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .append(instruction.fullInstruction).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yicheng12"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 22,
      "-": 37,
      "yicheng12": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.ALICE_WORKOUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.ui.WorkoutPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private WorkoutPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        selectionChangedEventStub \u003d new WorkoutPanelSelectionChangedEvent(ALICE_WORKOUT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // associated web page of a workout"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        URL expectedWorkoutUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE_WORKOUT.getName().fullName"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                .replaceAll(\" \", \"%20\").replaceAll(\"\u0027\", \"%27\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedWorkoutUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 8,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": " * A GUI unit test class for Workout Book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ProfileWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.ui.ProfileWindow.USERPROFILE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import guitests.guihandles.ProfileWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class ProfileWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private ProfileWindow profileWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private ProfileWindowHandle profileWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.interact(() -\u003e profileWindow \u003d new ProfileWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        FxToolkit.registerStage(profileWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        profileWindowHandle \u003d new ProfileWindowHandle(profileWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        URL expectedProfilePage \u003d ProfileWindow.class.getResource(USERPROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedProfilePage, profileWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void isShowing_profileWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.interact(profileWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(profileWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void isShowing_profileWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(profileWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void focus_profileWindowNotFocused_focused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.interact(profileWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        // Focus on another stage to remove focus from the profileWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertFalse(profileWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.interact(profileWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTrue(profileWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.commons.events.model.WorkoutBookChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.WorkoutBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private static final WorkoutBookChangedEvent EVENT_STUB \u003d new WorkoutBookChangedEvent(new WorkoutBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // after workout book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DarylTew": 4,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/WorkoutCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysWorkout;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import guitests.guihandles.WorkoutCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "import seedu.address.testutil.WorkoutBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "public class WorkoutCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        Workout workoutWithNoTags \u003d new WorkoutBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutCard workoutCard \u003d new WorkoutCard(workoutWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        uiPartRule.setUiPart(workoutCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCardDisplay(workoutCard, workoutWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workoutWithTags \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        workoutCard \u003d new WorkoutCard(workoutWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        uiPartRule.setUiPart(workoutCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCardDisplay(workoutCard, workoutWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout workout \u003d new WorkoutBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutCard workoutCard \u003d new WorkoutCard(workout, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // same workout, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutCard copy \u003d new WorkoutCard(workout, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertTrue(workoutCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertTrue(workoutCard.equals(workoutCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(workoutCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(workoutCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // different workout, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        Workout differentWorkout \u003d new WorkoutBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(workoutCard.equals(new WorkoutCard(differentWorkout, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // same workout, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertFalse(workoutCard.equals(new WorkoutCard(workout, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * Asserts that {@code workoutCard} displays the details of {@code expectedWorkout} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    private void assertCardDisplay(WorkoutCard workoutCard, Workout expectedWorkout, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        WorkoutCardHandle workoutCardHandle \u003d new WorkoutCardHandle(workoutCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", workoutCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DarylTew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        // verify workout details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "        assertCardDisplaysWorkout(expectedWorkout, workoutCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DarylTew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shouteck": 1,
      "DarylTew": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/WorkoutListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sijieg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_WORKOUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.testutil.TypicalWorkouts.getTypicalWorkouts;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysWorkout;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import guitests.guihandles.WorkoutCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import guitests.guihandles.WorkoutListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.storage.XmlSerializableWorkoutBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "public class WorkoutListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final ObservableList\u003cWorkout\u003e TYPICAL_WORKOUTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            FXCollections.observableList(getTypicalWorkouts());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_WORKOUT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private WorkoutListPanelHandle workoutListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        initUi(TYPICAL_WORKOUTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_WORKOUTS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            workoutListPanelHandle.navigateToCard(TYPICAL_WORKOUTS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            Workout expectedWorkout \u003d TYPICAL_WORKOUTS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            WorkoutCardHandle actualCard \u003d workoutListPanelHandle.getWorkoutCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            assertCardDisplaysWorkout(expectedWorkout, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        initUi(TYPICAL_WORKOUTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        WorkoutCardHandle expectedWorkout \u003d workoutListPanelHandle.getWorkoutCardHandle(INDEX_SECOND_WORKOUT"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shouteck"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        WorkoutCardHandle selectedWorkout \u003d workoutListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertCardEquals(expectedWorkout, selectedWorkout);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Verifies that creating and deleting large number of workouts in {@code WorkoutListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        ObservableList\u003cWorkout\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }, \"Creation and deletion of workout cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns a list of workouts containing {@code workoutCount} workouts that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * {@code WorkoutListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private ObservableList\u003cWorkout\u003e createBackingList(int workoutCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithWorkouts(workoutCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        XmlSerializableWorkoutBook xmlWorkoutBook \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableWorkoutBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return FXCollections.observableArrayList(xmlWorkoutBook.toModelType().getWorkoutList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Returns a .xml file containing {@code workoutCount} workouts. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private Path createXmlFileWithWorkouts(int workoutCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        builder.append(\"\u003cworkoutbook\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        for (int i \u003d 0; i \u003c workoutCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            builder.append(\"\u003cworkouts\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003ctype\u003ea\u003c/type\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003cduration\u003e1m\u003c/duration\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003cdifficulty\u003ebeginner\u003c/difficulty\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003cequipment\u003ea\u003c/equipment\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003cmuscle\u003ea\u003c/muscle\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003ccalories\u003e1\u003c/calories\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shouteck"
        },
        "content": "            builder.append(\"\u003cinstruction\u003e\").append(i).append(\"a\u003c/instruction\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            builder.append(\"\u003c/workouts\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        builder.append(\"\u003c/workoutbook\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        Path manyWorkoutsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyWorkouts.xml\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        FileUtil.createFile(manyWorkoutsFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        FileUtil.writeToFile(manyWorkoutsFile, builder.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        manyWorkoutsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        return manyWorkoutsFile;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Initializes {@code workoutListPanelHandle} with a {@code WorkoutListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code WorkoutListPanel}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    private void initUi(ObservableList\u003cWorkout\u003e backingList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        WorkoutListPanel workoutListPanel \u003d new WorkoutListPanel(backingList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        uiPartRule.setUiPart(workoutListPanel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sijieg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        workoutListPanelHandle \u003d new WorkoutListPanelHandle(getChildNode(workoutListPanel.getRoot(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sijieg"
        },
        "content": "                WorkoutListPanelHandle.WORKOUT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sijieg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 119,
      "shouteck": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import guitests.guihandles.WorkoutCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import guitests.guihandles.WorkoutListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sijieg"
        },
        "content": "import seedu.address.model.workout.Workout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static void assertCardEquals(WorkoutCardHandle expectedCard, WorkoutCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getType(), actualCard.getType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getDuration(), actualCard.getDuration());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getDifficulty(), actualCard.getDifficulty());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getEquipment(), actualCard.getEquipment());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getMuscle(), actualCard.getMuscle());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getCalories(), actualCard.getCalories());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedCard.getInstruction(), actualCard.getInstruction());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedWorkout}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static void assertCardDisplaysWorkout(Workout expectedWorkout, WorkoutCardHandle actualCard) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getType().fullType, actualCard.getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getDuration().fullDuration, actualCard.getDuration());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getDifficulty().fullDifficulty, actualCard.getDifficulty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getEquipment().fullEquipment, actualCard.getEquipment());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getMuscle().fullMuscle, actualCard.getMuscle());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getCalories().fullCalories, actualCard.getCalories());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shouteck"
        },
        "content": "        assertEquals(expectedWorkout.getInstruction().fullInstruction, actualCard.getInstruction());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(expectedWorkout.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Asserts that the list in {@code workoutListPanelHandle} displays the details of {@code workouts} correctly and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static void assertListMatching(WorkoutListPanelHandle workoutListPanelHandle, Workout... workouts) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        for (int i \u003d 0; i \u003c workouts.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            workoutListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sijieg"
        },
        "content": "            assertCardDisplaysWorkout(workouts[i], workoutListPanelHandle.getWorkoutCardHandle(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Asserts that the list in {@code workoutListPanelHandle} displays the details of {@code workouts} correctly and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shouteck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static void assertListMatching(WorkoutListPanelHandle workoutListPanelHandle, List\u003cWorkout\u003e workouts) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertListMatching(workoutListPanelHandle, workouts.toArray(new Workout[0]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sijieg"
        },
        "content": "     * Asserts the size of the list in {@code workoutListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sijieg"
        },
        "content": "    public static void assertListSize(WorkoutListPanelHandle workoutListPanelHandle, int size) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        int numberOfWorkout \u003d workoutListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sijieg"
        },
        "content": "        assertEquals(size, numberOfWorkout);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sijieg": 26,
      "shouteck": 12,
      "-": 48
    }
  }
]
