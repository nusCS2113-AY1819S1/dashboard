[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d Student Management System"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-T13-4/main[image:https://travis-ci.org/CS2113-AY1819S1-T13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "https://ci.appveyor.com/project/Tsuweiquan/main[image:https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-T13-4/main?branch\u003dmaster\u0026service\u003dgithub[image:https://coveralls.io/repos/github/CS2113-AY1819S1-T13-4/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::docs/images/Ui.png.jpg[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::docs/images/Ui.png.jpg[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *Student Management System* is a Java application that runs on the Desktop."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Student Management System* is suitable University Lecturers with students under their supervision."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Student Management System* is capable of adding students to its record and grouping these students into their respective module/tutorial groups."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Student Management System* also contains multiple useful functionalities to assist Lecturers on day to day tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d Functionalities"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Add/Delete Students"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* View Students Data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Create/Delete Groups"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** Add Students to Groups"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** Delete Students from Groups [_Coming in v1.4_]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* View Groups"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* View Students in Groups"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Student Distribution"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** Can be based on *Gender*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** Can be based on *Nationality*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Send Email to Groups or Multiple Students"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Add/Delete Tags to Students Name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Show a summary of Examination Scores of all Students in a particular module."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Student Attendance List Creation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* A script that run multiple commands to read inputs from a file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Student Management System is build on top of AddressBook-Level4 project that was created by https://github.com/se-edu/[SE-EDU] initiative"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 18,
      "-": 27,
      "rajdeepsh": 11
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    compile group: \u0027javax.mail\u0027, name: \u0027javax.mail-api\u0027, version: \u00271.6.2\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    compile group: \u0027com.sun.mail\u0027, name: \u0027javax.mail\u0027, version: \u00271.6.2\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "    compile group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "novin997"
        },
        "content": "    archiveName \u003d \u0027Student Management System.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "E0176882": 2,
      "novin997": 2,
      "-": 246
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Student Management System is currently being developed by the https://github.com/orgs/CS2113-AY1819S1-T13-4/teams[T13-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Novin Tong Yong Kang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::novin997.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "{empty}[https://github.com/novin997[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer + Moderator +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Responsibilities: Development of features, scheduling and tracking of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Rajdeep Singh Hundal"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::rajdeepsh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "{empty}[https://github.com/rajdeepsh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Leader + Documentation +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Responsibilities: +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Group Feature - Create Group(s) +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Group Feature - Add Student(s) to Group(s) +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Group Feature - Delete Group(s) +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Group Feature - Delete Student(s) from Group(s) +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Group Feature - Select Group +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Development of features and ensuring document correctness"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Tan Wei Hao Joel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::e0176882.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "{empty}[https://github.com/E0176882[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Lead Developer + Quality Assurance +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Responsibilities: Development of features and ensuring good quality of application"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Tsu Wei Quan"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::tsuweiquan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": "{empty}[https://github.com/Tsuweiquan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Role: Developer + Integration +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Responsibilities: Development of features, maintainance of github site and other administrative duties"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Yang Shuang"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::clara1234566.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "{empty}[https://github.com/clara1234566[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Role: Developer + Tester +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Responsibilities: Development of features and rigorous testing of application"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Nishant Shyamal Budhdev"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::Nishant.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "{empty}[[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "E0176882": 30,
      "-": 32,
      "rajdeepsh": 7
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `GroupListPanel`, `GroupPersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cGroup\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::group[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Group feature"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The group mechanism is facilitated by `AddressBook`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "and implements the following operations:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `AddressBook#createGroup()` -- Creates a group in the student management system."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `AddressBook#hasGroup()` -- Checks to see if the student management system has a particular group."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* `AddressBook#hasPersonInGroup()` -- Checks to see if a particular person is in a group."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* `AddressBook#addGroup()` -- Add\u0027s persons to a group."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `AddressBook#removeGroup()` -- Removes a group form the student management system."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#createGroup()`, `Model#hasGroup()`,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "`Model#hasPersonInGroup()`, `Model#addGroup()` and `Model#deleteGroup()` respectively."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Given below is an example usage scenario and how the group mechanism behaves at each step."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Step 1. User inputs `creategroup n/CS1231 l/LT15` to create a group in the student management system."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The `AddressBookParser` detects `creategroup` as a command word to use `CreateGroupCommandParser` to parse the input given."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "`CreateGroupCommandParser` will then create a `Group` object containing all of the group\u0027s given information after parsing and pass it to `GroupCommand` which will then"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "execute adding the group created to the student management system."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0176882"
        },
        "content": "  +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0176882"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "If a duplicate groups are found in the student management system during its execution,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "it will not create a group nor will it override the existing group but instead, it will throw a `DuplicateGroupException`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "which will then notify the user of the issue."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The following sequence diagram shows how the create group operation works within both `Model` and `Logic` components where `g` is the `Group` object created:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".Interactions Inside the Logic and Model Component for the `creategroup n/CS1231 l/LT15` Command +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::CreateGroupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Step 2. The user inputs `addgroup g/1 p/1` to add the first person in the student management system to the first group"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "in the student management system. The `AddressBookParser` detects `addgroup` as a command word will use `AddGroupCommandParser`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "to parse the input given. `AddGroupCommandParser` will then create an `AddGroup` object containing all relevant group and person indexes after parsing and pass it to `AddGroupCommand`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "which will then execute adding persons to the specified group in the student management system."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0176882"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "If a duplicate persons are found in the group of the student management system during its execution,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "it will not create a group nor will it override the existing group but instead, it will throw a `DuplicatePersonException` which will notify the user of the issue."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The following sequence diagram shows how the add persons to group operation works within both `Model` and `Logic` components where `ag` is the `AddGroup` object created:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".Interactions Inside the Logic and Model Component for the `addgroup g/1 p/1` Command +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::AddGroupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Step 3. The user inputs `deletegroup 1` to delete the first group in the student management system. The `AddressBookParser` detects `deletegroup` as a command word and will use `DeleteGroupCommandParser`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "to parse the input given. `DeleteGroupCommandParser` will then create an `Index` object after parsing and pass it to `DeleteGroupCommand`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "which will then execute deleting the specified group from the student management system."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The following sequence diagram shows how the delete group operation works within both `Model` and `Logic` components:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".Interactions Inside the Logic and Model Component\u0027s for the `deletegroup 1` Command +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::DeleteGroupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Additional Operations:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `SelectGroupCommand` -- Selects a group on the student management system\u0027s GUI which will in turn display all"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "students in that group on the `GroupPersonList` panel. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Step 1. The user inputs `selectgroup 1` to select the first group listed on the student management system\u0027s GUI. The `AddressBookParser` detects `selectgroup` as a command word and will use `SelectGroupCommandParser`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        to parse the input given. `SelectGroupCommandParser` will then create an `Index` object after parsing and pass it to `SelectGroupCommand`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        which will then execute selecting the specified group on the student management system by posting a new `JumpToGroupListRequestEvent` object coupled with the Index created to the `EventsCenter`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "         +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "The following sequence diagram shows how the select group operation works within both `EventsCenter` and `Logic` components:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".Interactions Inside the Logic and EventsCenter Component\u0027s for the `selectgroup 1` Command +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::SelectGroupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* **Alternative 1 (current choice):** Stores groups in `addressbook.xml`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0176882"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0176882"
        },
        "content": "** Cons: Share same database as persons, not modular in terms of future expansions."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* **Alternative 2:** Stores groups in a different file `addressbookgroups.xml`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** Pros: Modular as groups are stored in a different file, makes data extraction easier."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0176882"
        },
        "content": "** Cons: Harder to implement."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "// end::group[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "novin997"
        },
        "content": "// tag::ScriptCommand[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "novin997"
        },
        "content": "\u003d\u003d\u003d ScriptCommand feature"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "novin997"
        },
        "content": "The `ScriptCommand` Feature allows the user to run `scripts` that execute the same command multiples time by importing"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "novin997"
        },
        "content": "all Command arguments from a specific text file."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "novin997"
        },
        "content": "Before the `ScriptCommand` can be executed, there are some prerequisites:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "novin997"
        },
        "content": "* There must be a default folder for which all the scripts need to be stored"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "novin997"
        },
        "content": "* The default location of scripts folder is `root program location` + `/scripts/`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "novin997"
        },
        "content": "* All scripts must be of `Text File Format/txt`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "novin997"
        },
        "content": "\u003d\u003d\u003d\u003d ScriptSetup feature"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "novin997"
        },
        "content": "If the scripts folder is missing whenever the program run, the program will automatically generate the folder through"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "novin997"
        },
        "content": "the `ScriptSetup` Class"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "novin997"
        },
        "content": ".Sequence Diagram for the `ScriptSetup` Function"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "novin997"
        },
        "content": "image::ScriptSetupSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "novin997"
        },
        "content": "* Procedure for ScriptSetup"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "novin997"
        },
        "content": "Step 1: ScriptSetup will be executed by `MainApp` when the program is initialized and the `ScriptSetup` will be"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "novin997"
        },
        "content": "execute with the parameter containing the default `scripts` folder location."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "novin997"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "novin997"
        },
        "content": " The default scripts folder location is"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "novin997"
        },
        "content": " obtained from the `preferences.json` file in the main directory"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "novin997"
        },
        "content": "Step 2: `ScriptSetup` will obtain the path of the default script folder by calling `getPath` from the `FileUtil`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "novin997"
        },
        "content": "Step 3: The `createFolder` function will be called to create a new folder if the `path` does not exist."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "novin997"
        },
        "content": "A boolean `isScriptFolderPresent` will be return true if the script folder is present in the project folder and false"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "novin997"
        },
        "content": "if it is not present inside the project folder"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "novin997"
        },
        "content": "Step 4: If `isScriptFolderPresent` is false, `scriptSetup` will call `addSampleTextFile` which will add some Sample"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "novin997"
        },
        "content": "Text Files into the scripts folder"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "novin997"
        },
        "content": "Future Implementation:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "novin997"
        },
        "content": "****"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "novin997"
        },
        "content": "* Provide feedback and logging to users on which command has failed to executed"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "novin997"
        },
        "content": "* Allow the program to change the scripts default location"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "novin997"
        },
        "content": "****"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "novin997"
        },
        "content": "// end::ScriptCommand[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "E0176882"
        },
        "content": "// tag::distribute[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d Distribute All Students feature"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The Distribute feature assist the user in distributing all students in the address book to specific number of groups randomly."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The user is able to control if the distribution process should take into consideration of balanced gender or balanced nationality."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "In the current version, the following operations have been implemented:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `DistributeCommand` -- Execute the command to start the Distribution process."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `DistributeAlgorithm` -- Handles the different types of algorithm depending on the user input flags."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `DistributeUtils` -- Contains the methods that work closely with DistributeAlgorithm class."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "This feature also work with `CreateGroupCommand` and `AddGroupCommand` as Distribute functionality consist of creating groups and adding person into groups."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Given below is an example usage scenario and how the Distribute mechanism behave at each step."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Step 1: User inputs `distinto 3 n/CS2113-T13- g/0 nat/0` to distribute all students in the student management system randomly into 3 groups. By setting \u00270\u0027 to \u0027g/\u0027 and \u0027nat/\u0027,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "user does not want to take gender and nationality into account. The AddressBookParser detects `distinto` or `di` as a command word and proceed to call `DistributeCommandParser`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The `DistributeCommandParser` will take in the rest of the input and parse the necessary information out. The information that were parsed out are `INDEX`, `GROUP_NAME`, `GENDER_FLAG` and `NATIONALITY FLAG`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "`DistributeCommandParser` will now create a `DistributeCommand` object containing all the Distribute\u0027s information extracted after parsing."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "`DistributeCommand` receives the inputs and execute the Distribution Command."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "- If the `INDEX` value entered by the user is *less than* the number of student in the management system or `INDEX` is *0* or is blank, the command will be rejected and it will"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "throw a `CommandException` which will notify the user of the issue."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "- If the `GROUP_NAME` string entered by the user does not adhere to only contain alphanumeric characters, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027, and should not be blank, the command will be rejected and it will"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "throw a `CommandException` which will notify the user of the issue."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "- The `GENDER_FLAG` and `NATIONALITY_FLAG` only accepts `1`, `0`, `true` and `false` else the command will be rejected and will throw a `CommandException` which will notify the user of the issue."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Step 2: The `DistributeCommand` creates a new `DistributeAlgorithm` Object with an input parameter of a `Distribute` Object which contains the extracted information in Step 1 and a `model` object.."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The `DistributeAlgorithm` constructor will proceed to run and check for non null inputs. Once it is completed, it will set `DistributeUtils` to have the same model as the input model."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Next, the method will gather a list of all person in the management system and check if the desired number of groups to be create is lesser than the number of people in the management system."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Once the checks are complete, the `DistributeAlgorithm` method will shuffle all person in it list check the gender and nationality flags. Different combination of flags input results in different distribution algorithm to be run."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Step 3: In every algorithm, the allocation process is different. However, the *Distribution process* is the same throughout all algorithm."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The following sequence diagram shows how the distribution process works within `Logic`, `Commons` components:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".(Part 1) Interactions Inside the Logic and Commons Component for the `distinto 3 n/CS2113- g/0 nat/0` Command"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "image::DistributeSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".(Part 2) Interactions Inside the Commons and Logic Component for the `distinto 3 n/CS2113- g/0 nat/0` Command"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "image::DistributeSequenceDiagram_2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d FlowDiagram Diagrams"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d UML Diagrams"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d Algorithm Implementation"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "E0176882"
        },
        "content": "The Distribute Students Equally feature holds 4 different algorithms."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Each Algorithm serve different purposes."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Distribute Students Randomly with equal numbers"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Distribute Students Randomly with Balanced Gender"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Distribute Students Randomly with Balanced Nationality"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* Distribute Students Randomly with Balanced Gender \u0026 Nationality (Coming in v1.4)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Every Algorithm will require inputs such as:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "E0176882"
        },
        "content": "****"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* int _n_ : Number of Groups to be created of Integer Data Type"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList : 2D ArrayList of Person Type"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* LinkList\u003cPerson\u003e allPerson : LinkList containing all person data from the current address book"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* String groupName : Group Name in String Type"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "E0176882"
        },
        "content": "****"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "From these 4 inputs, every algorithm will run necessary checks, create the required number of groups with the `Group Name` parsed in and add the Students assigned to the group."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Before any Algorithm execute, the system will check if there exist any duplicate group name."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "If such an event occur, the command will stop and throw a `CommandException : Duplicate Groups Found` which will notify the user of the issue."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d Pre Execution Checks and Operations"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Before any Algorithm is execute, there are some checks and functions to be performed."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Check if _n_ number of groups to be created must be *less than* number of persons in the address book."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. throw `Command Exception` if _n_ groups is more than \u003e number of persons in address book."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Check if there exist a group with the *same group name* as the ones to be created."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. throw `Command Exception` if there exist another group with the intended name to be created."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Shuffle the Address Book with a time seed."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. A Better Distribution"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Place All Persons into an LinkList."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d Algorithm Design Input Parameters"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". int _n_"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Number of Groups to be created"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. A 2D Array List where the *Outer Array List* acts as a group while the *Inner Array List* stores the *Person Object*."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". LinkList\u003cPerson\u003e allPerson"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. A LinkList containing all person data from the current address book. Meant for distribution into the 2D ArrayList."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". String groupName"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. The group name required to create the groups."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Distribute Students Equally Algorithm Explanation"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "To ensure a balanced number of persons in each group, we have to calculate the minimum number of people to place in a group."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "This process of recalculation has to be executed as we access the next group. This allows the distribution to be balanced."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*Allocation Process*"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates a For Loop of _n_ number of times. Starting with i equals to _n_ and count down to 0."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates an ArrayList of Person Object."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. This ArrayList acts as the inner array list to hold all Persons."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Calculates the number of Person should be in a group."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. This can be done by having the *total number of Person* in the LinkList divided by *i* from the for loop."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Lets label this as _paxInAGroup_"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates a While Loop with the condition of _paxInAGroup_ more than 0."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. In the while loop, we will load a person object from the LinkList into the ArrayList."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Once the while loop is complete, the array list will be filled with _paxInAGroup_ Persons."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Now, we add this ArrayList with _paxInAGroup_ of Persons into the 2D ArrayList where the outer acts as a group."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". This process is repeated until the total number of group required to be allocated is complete."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*Distribution Process*"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". The `distributeProcess` method will access the 2D ArrayList."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". In each ArrayList of the 2D ArrayList, the distributeProcess Method will access the outer ArrayList and creates a group."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. The group is created with the given Group Name that the user specified in the Command."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Next, it will access the inner ArrayList and add all the person allocated inside into the group."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". This process is repeated until the 2D ArrayList is fully accessed."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "We will now be able to achieve _n_ groups with all students distributed randomly into them. +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Distribute Students Equally with Balanced Gender Explanation"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The process is quite different from the Algorithm used above. The key difference is that we had separate all female person into a list"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "and all male persons into another list. After separation, we start the allocation of 1 male person to each group and process repeats until there are no males left."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "At that same pointer where the male list turns empty, we will start the allocation of 1 female person to each group. This process continues until all female persons are allocated."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*Allocation Process*"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates a For Loop of _n_ number of times. Starting with i equals to _n_ and counts down to 0."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates 2 LinkedList of Person Object."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. 1 LinkedList to store all male persons"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. 1 LinkedList to store all female persons"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Iterate through allPersonLinkList, store male persons into maleLinkList and store female persons into femaleLinkList."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates a while loops to check if maleLinkList or femaleLinkList is not empty"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Create a pointer to point to the group number."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Creates another while loop to allow the group pointer to iterate infinitely."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "... if the group pointer points to the last group, it will reset its pointer back to the first group."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". In the inner While Loop from 4b."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Creates an ArrayList of Person Object."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Allocate 1 male person from the male LinkList into the inner ArrayList."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "... This process is done in the selectiveDistributionByGender method."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Add the inner ArrayList into the outer ArrayList of the 2D ArrayList."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Move the group pointer to the next group and repeat from Step 5"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Once maleLinkList is exhausted, repeat Step 5 with the female LinkList."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*Distribution Process*"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". The `distributeProcess` method will access the 2D ArrayList."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". In each ArrayList of the 2D ArrayList, the distributeProcess Method will access the outer ArrayList and creates a group."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. The group is created with the given Group Name that the user specified in the Command."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Next, it will access the inner ArrayList and add all the person allocated inside into the group."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". This process is repeated until the 2D ArrayList is fully accessed."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "We will now be able to achieve _n_ groups with all students distributed randomly with balanced gender. +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Distribute Students Equally with Balanced Nationality Explanation"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "The process is quite similar to the Algorithm used above. The key difference is that we had to collect the total number of different nationalities in the Person list."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "We can achieve this by using a Map to filter out the different nationalities as the key and the number of persons belonging to that nationality as the values."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "We have to also sort the map by the values decreasingly to ensure the highest pax of a single nationality is distributed first."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Once we have the Map of different nationalities and the number of values in each nationality, we can follow the previous algorithm and allocate 1 person from the same nationality to 1 group at a time."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "After exhausting all person from the same nationality, we can repeat the same process for the next nationality. This ensure all groups to have a balanced and mixed nationality."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*Allocation Process*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Initialize a group pointer."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates a for loop that iterates based on the Map\u0027s number of key which is the number of different nationality."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Creates another for loop that iterates based on the key\u0027s values which is the number of person that has the same nationality."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Creates an ArrayList of Person Object."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. In each iteration, we locate a person with the specific Nationality (key) and add into inner ArrayList."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "... This process is done by the selectiveDistributionByNationality method."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. Next, we will add the inner ArrayList into the outer ArrayList of the 2D ArrayList."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. A group pointer will be moved to the next group and the process is repeated from Step 3b."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Once the value in the particular nationality is exhausted, the for loop in Step 2 will point to the next Nationality."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". The process now repeats from Step 3 until the For Loop in Step 2 is exhausted."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*Distribution Process*"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". The `distributeProcess` method will access the 2D ArrayList."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". In each ArrayList of the 2D ArrayList, the distributeProcess Method will access the outer ArrayList and creates a group."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ".. The group is created with the given Group Name that the user specified in the Command."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". Next, it will access the inner ArrayList and add all the person allocated inside into the group."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ". This process is repeated until the 2D ArrayList is fully accessed."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "We will now be able to achieve _n_ groups with all students distributed randomly with balanced nationality. +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Distribute Students Equally with Balanced Gender \u0026 Nationality Explanation"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Coming in v1.4"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "E0176882"
        },
        "content": "// end::distribute[]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "E0176882"
        },
        "content": "// tag::sendemail[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Send Email feature"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "E0176882"
        },
        "content": "The send email feature is facilitated by `JavaMail` API. It provides a platform-independent and protocol-independent framework to build mail and messaging applications."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "E0176882"
        },
        "content": "In the current version, the following operations have been implemented:"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* `EmailCommand` -- The command to send an email to single and multiple indexes of persons, or to persons belonging to a group."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* `EmailUtil` -- The helper function that interacts with `JavaMail` for sending email."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* `EmailLoginCommand` -- The command to enter credentials for the email account to be used for sending emails."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "E0176882"
        },
        "content": "The feature currently supports the following mail servers:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "E0176882"
        },
        "content": "1. `Google Mail` -- @gmail.com"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "E0176882"
        },
        "content": "2. `Microsoft Outlook` -- @outlook.com"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "E0176882"
        },
        "content": "3. `Hotmail` -- @hotmail.com"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "E0176882"
        },
        "content": "4. `Live` -- @live.com"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "E0176882"
        },
        "content": "5. `NUS Student` -- @u.nus.edu"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "E0176882"
        },
        "content": "6. `NUS Staff` -- @nus.edu.sg"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Given below is an example usage scenario and how the EmailCommand behaves at each step."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Step 1. The user types in the command to send email."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Single Person Index"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandSingleIndexDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Single Person Index w/ Command Alias"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::AliasEmailCommandSingleIndexDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Multiple Persons Index"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandMultipleIndexDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Multiple Persons Index w/ Command Alias"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::AliasEmailCommandMultipleIndexDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Group Index"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandGroupIndexDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Group Index w/ Command Alias"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::AliasEmailCommandGroupIndexDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "E0176882"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "E0176882"
        },
        "content": "If a login credential is not found in the system, the following message will be shown."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandNoLoginFound.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "E0176882"
        },
        "content": "In order for an email to be sent, there must be a sender account."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "E0176882"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "E0176882"
        },
        "content": "If subject title exceeds 78 characters, the following message will be shown."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandExceedSubjectLength.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Although it is possible for subject field to contain more than 78 characters, the system"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "E0176882"
        },
        "content": "sets a limit to prevent subject title folding."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence Diagrams"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandSequenceDiagram.png[width\u003d\"1200\"]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to send email to a single person"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Initially, the idea was to identify the recipient by their full name, but after awhile, we found"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "E0176882"
        },
        "content": "that using the pre-existing `Index` class to be a better way to select our recipient."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "E0176882"
        },
        "content": "To send an email to a single person, we simply identify the `Index` of the person we want to send"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "E0176882"
        },
        "content": "to from any list (full listing or filtered list) and enter it into the sendmail command."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to send email to multiple person"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Since we are able to send email to a single person using their index, we can identify more recipients"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "E0176882"
        },
        "content": "using their associated `Index` in the listing."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "E0176882"
        },
        "content": "To send an email to multiple persons, we simply identify all their `Index` and enter them into the"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "E0176882"
        },
        "content": "sendmail command separated by a comma. We then add a parser to identify that this is an email command"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "E0176882"
        },
        "content": "for multiple persons and add them all into the recipient list."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to send email to a group of persons"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Similar idea for sending email to single or multiple person(s). Instead of identifying `Index` of persons,"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "E0176882"
        },
        "content": "now we simply identify an entire list of person using their `Group` `Index`, add a parser to identify that"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "E0176882"
        },
        "content": "it is an email command for sending to a group and then add all of the persons into the recipient list."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to allow email login from different mail servers"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "E0176882"
        },
        "content": "To support more mail servers (initially only Google mail was supported through hardcoding), we maintain a list"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "E0176882"
        },
        "content": "of mail servers under `Domain`. To add a new mail server support, we need primarily three information:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* The SMTP Hostname"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandDomainHost.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* The SMTP Port (465 or 587)"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandDomainPort.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* Is it TLS or SSL (if SSL, we need to add trust into `Properties`)"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "E0176882"
        },
        "content": "image::EmailCommandDomainTrust.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "E0176882"
        },
        "content": "When the user enter their email credentials using `login` command, we will be able to identify which mail"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "E0176882"
        },
        "content": "server their email uses by looking at the domain (@example.com). We then set `Properties` with the relevant"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "E0176882"
        },
        "content": "domain information."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to send email with attachments"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "E0176882"
        },
        "content": "To send emails with attachment, we consider allowing the user to specify a path to the attachment or we can"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "E0176882"
        },
        "content": " fix a specific folder where the attachments has to be in to be included in the email."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "E0176882"
        },
        "content": "We then make use of MimeMessage provided by `JavaMail` API and create a Multipart message."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "E0176882"
        },
        "content": "// end::sendmail[]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Target user profile*: University Lecturers"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* has a need to manage a significant number of students"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Value proposition*: manage students and groups faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* * *` |university lecturer |create groups |have a list of all my modules/tutorial classes"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* * *` |university lecturer |add students to groups |have a list of all my students in a particular module/group"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* * *` |university lecturer |delete students from groups |edit my student management system"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* * *` |university lecturer |delete groups |edit my student management system"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* * *` |university lecturer |view all students in a group by typing a command to select a group instead of clicking |have flexibility over input methods"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "E0176882"
        },
        "content": "|`* * *` |university lecturer |send an email to a student, a group of students or students belonging to a group |make module specific announcements"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* * *` |university lecturer |print an attendance sheet of all persons in a specific group |"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* *` |university lecturer |automatically distribute students into groups via criteria-based user options (gender/nationality) |efficiently form random groups"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* *` |university lecturer |filter student contacts by their scores |generate a list of students who need my help"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* *` |university lecturer |automatically add tags for specific student groups |efficiently mark out weak students"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "|`* *` |university lecturer |create a group chat for my students to have an open discussion |efficiently mediate discussions"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "(For all use cases below, the *System* is the `Student management system` and the *Actor* is the `Lecturer`, unless specified otherwise)"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Create Groups"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Lecturer creates a group"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  Student management system confirms that group is created"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. Student management system detects incorrect format of lecturer input (invalid \u0026 missing parameters)."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1b. Student management system detects duplicate group."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1b1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Add Students To Groups"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Student management system has student(s)"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Lecturer adds student(s) to a group"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  AddressBook confirms student(s) are added"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. Student management system detects incorrect format of lecturer input (invalid \u0026 missing parameters)."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1b. Student management system detects student(s) is already in the group."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1b1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Students From Groups"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Student management system has group(s)"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Lecturer deletes student(s) from a group"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  AddressBook confirms student(s) are deleted"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. Student management system detects incorrect format of lecturer input (invalid \u0026 missing parameters)."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1b. Student management system detects student(s) not in the group."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1b1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Groups"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Student management system has group(s)"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Lecturer deletes group"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  Student management system confirms group is deleted"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. Student management system detects incorrect format of lecturer input (invalid \u0026 missing parameters)."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Select Group"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Student management system has group(s)"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Lecturer selects group"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  Student management system confirms group is selected"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "3.  Student management system displays students in group selected on the *students in group panel*"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. Student management system detects incorrect format of lecturer input (invalid \u0026 missing parameters)."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. Student management system rejects command entered with relevant error message."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Grading Filter"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  Student scores exist in the AddressBook"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  User requests AddressBook to generate a list of students that need extra help"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  AddressBook displays standard deviation of marks"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "3.  User enters the filter standard"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "4.  AddressBook outputs results"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. AddressBook detects error in data entered."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. AddressBook rejects command."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 3a. AddressBook detects wrong standard set by user."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 3a1. AddressBook rejects command and displays error message."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Mass Email Communication"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "E0176882"
        },
        "content": "1.  Student(s) or group\u0027s exist in the AddressBook"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "E0176882"
        },
        "content": "1.  User requests to send email with specified content to student(s) or group."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "E0176882"
        },
        "content": "2.  AddressBook sends email with specified content student(s) or group."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* 1a. AddressBook detects subject exceeds imposed word limit."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "E0176882"
        },
        "content": "** 1a1. AddressBook rejects command and displays error message."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* 1b. AddressBook detects email content exceeds size limit of 25mb."
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1b1. AddressBook rejects command and displays error message."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "E0176882"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* 1c. AddressBook detects no login credential found in system."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "E0176882"
        },
        "content": "+"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "E0176882"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "E0176882"
        },
        "content": "** 1c1. AddressBook rejects command and displays error message."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "E0176882"
        },
        "content": "+"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d Use case: Distribution of Students into Groups"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "1.  Student must exist in the AddressBook."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "2.  Number of groups must be less than number of Students."
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "3.  Number of groups to be created must be more than 0."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "4.  Group name specified can only contain alphanumeric characters, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027, and should not be blank."
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "5.  Duplicate group name is invalid."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "6.  Gender flags and Nationality flags must be declared"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "7.  Gender flags and Nationality flags can only accept input such as \u00271\u0027 or \u00270\u0027 or \"true\" or \"false\"."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "1.  User requests to create _n_ groups of students, randomly distributed with balanced gender, with a given specific group name."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "2.  Student Management System creates _n_ groups with the specific group name given, allocates all students into groups with a balanced ratio of gender across all groups."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 1a. Student Management System detects the _n_ groups to be created input is less than or equal to 0."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 1a1. AddressBook rejects command with an error message of \"Invalid command format!\" followed by the instructions of the commands input."
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 2b. Student Management System detects the _n_ groups to be created input is less than total number of students in the system."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 2b1. AddressBook rejects command with an error message of \"Number of groups should not be more than number of students\""
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 3c. Student Management System has 0 number of students in the system."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 3c1. AddressBook rejects command with an error message of \"Number of groups should not be more than number of students\""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 4d. Student Management System detects the group name specified does not fit the Group Naming criteria."
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 4d1. AddressBook rejects command with an error message of \"Group names should only contain alphanumeric characters, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027, and it should not be blank.\"."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 5e. Student Management System detects the group name specified will cause a group to have a duplicate name."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 5e1. AddressBook rejects command with an error message of \"There exist another group with the same name.\"."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 6f. Student Management System detects the command is not properly written. Either Gender or Nationality or both flags are missing."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 6f1. AddressBook rejects command with an error message of \"Invalid command format!\" followed by the instructions of the commands input."
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* 7g. Student Management System detects the command for gender or nationality flag is not properly written. Either Gender or Nationality or both flags have invalid inputs."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "+"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** 7g1. AddressBook rejects command with an error message of \"Gender and Nationality flags only accept \u00271\u0027 or \u00270\u0027 or \"true\" or \"false\"."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Attendance List Creation"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  User has selected a group of students"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  User requests AddressBook to generate Attendance List(.docx) of group"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  AddressBook confirms with user that document has been generated"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. AddressBook detects error in data entered."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. AddressBook rejects command."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 2b. AddressBook detects microsoft Word is not installed in computer."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 2b1. AddressBook outputs Attendance List on GUI."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Create Discussion ChatBox"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  User has selected a group of students"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  User requests AddressBook to open a ChatBox"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  AddressBook opens ChatBox"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* 1a. AddressBook detects error in data entered."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "** 1a1. AddressBook rejects command."
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Adding Multiple Students to Student Management System(SMS)"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User has selected a group of students"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests SMS to use a specific text file to execute multiple add commands"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "2.  SMS open the exact text file and execute all the commands that are in the following text file"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. SMS detects that no such text file is present in default directory and return a error message to the user."
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a. SMS detects that that there are invalid commands contains in the text file and return the line numbers that the"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "add command is not able to run."
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Use case: Automatically Adding/Deleting Tags"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*Precondition*"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  AddressBook has generated a list of students"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "1.  User requests tags to be added"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "2.  AddressBook confirms tags has been added"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".  Should be user friendly and must not require education to use the software"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".  Should work with data provided from excel sheet"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ".  Should work with 128 bit platforms"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "E0176882": 189,
      "novin997": 41,
      "Tsuweiquan": 224,
      "-": 987,
      "rajdeepsh": 382
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 4 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook Level 4 (AB4) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB4 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB4 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "image::Ui.png.jpg[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Creating a group: `creategroup` `cg`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Creates a group in the student management system +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `creategroup n/NAME l/LOCATION [t/TAG] ...`  +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `cg n/NAME l/LOCATION [t/TAG] ...` +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Creates a group with the specified NAME, LOCATION and TAG(s)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* NAME *should only contain alphanumeric characters, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027, and should not be blank*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* LOCATION *should only contain alphanumeric characters and \u0027-\u0027, and should not be blank*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* TAG(s) are optional and *should only contain alphanumeric characters* if used"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* TAG(s) *should not be blank* if used"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* This command is undoable"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `creategroup n/CS2113 l/LT15 t/java`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `cg n/CS2113 l/LT01 t/c t/cpp`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Selecting a group : `selectgroup` `sg`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Selects the group identified by the index number used in the displayed group list. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `selectgroup INDEX` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `sg INDEX`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Selects group and loads the *students in selected group panel* with students of the group at specified `INDEX`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Selects the group and loads the Google search page of the group at the specified `INDEX`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index refers to the index number shown in the displayed group list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* This command is *NOT* undoable"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `selectgroup 2` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Selects the 2nd group in the student management system."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `sg 1` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Selects the 1st group in the student management system."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Add students to a group: `addgroup` `ag`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Adds student(s) to a group in the student management system +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `addgroup g/INDEX p/INDEX ...` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `ag g/INDEX p/INDEX ...` +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Adds student(s) at specified INDEX(s) to group at specified at INDEX."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index refers to the index number shown in the displayed group/student list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* This command is undoable"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `addgroup g/1 p/1`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `ag g/1 p/1 p/2`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Deleting a group: `deletegroup` `dg`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Deletes a group in the student management system +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `deletegroup INDEX`  +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `dg INDEX` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Removes the group with the specified INDEX from the student management systsm"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* This command is undoable"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `deletegroup 1`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `dg 1`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Deleting student(s) from a group: `deletegroupstudents` `dgs` [_Coming in v1.4_]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Deletes students from a group in the student management system +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `deletegroupstudents g/INDEX p/NDEX ...`  +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `dgs g/INDEX p/INDEX ...` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Removes studnets at specifed INDEX(s) from the group at specified INDEX in the student management systsm"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index refers to the index number shown in the displayed group/student in group list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* This command is undoable"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `deletegroupstudents g/1 p/1`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `dgs g/1 p/1 p/2`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003d\u003d\u003d List a group of students: \u0027scorefilter a/56 or b/56\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "List out  students who score above/below certain grade."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "Format: scoreFilter [filter_standard]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "Example: scorefilter a/66"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "This will list all the students who score above 56 in a new grade list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d Distributed all students into _n_ groups with balanced number of Nationality or Gender: `distinto` `di`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "This functionality creates _n_ number of groups determined by the user, with a general group name specified and randomly distribute all students in the system into _n_ groups. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "User must choose to either distribute all students equally via Gender or Nationally or Neither. +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "****"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *Distribution Modes*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/0 nat/0` -\u003e Distribution all students randomly into _n_ groups."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/1 nat/0` -\u003e Distribution all students randomly into _n_ groups with balanced Gender."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/0 nat/1` -\u003e Distribution all students randomly into _n_ groups with balanced Nationality."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/1 nat/1` -\u003e Distribution all students randomly into _n_ groups with balanced Gender and Nationality. (Coming in v1.4)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Format: `distinto NUM_OF_GROUPS n/GROUP_NAME g/true nat/true` +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Shortcut Format: `di NUM_OF_GROUPS n/GROUP_NAME g/1 nat/1` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "\u003d\u003d\u003d\u003d Command Input Guide \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *NUM_OF_GROUPS*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** NUM_OF_GROUPS must be a *positive integer* value and must not be *0*."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** NUM_OF_GROUPS must not be more than the total number of persons in the address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *GROUP_NAME*"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** All _n_ number of groups will have the same GROUP_NAME but every GROUP_NAME will be *concatenated with an index behind it*."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** Index concatenated behind the GROUP_NAME starts from 1."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** GROUP_NAME should only contain alphanumeric characters, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027, and should not be blank"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** Eg: Group name Input: g/CS2113-T13-"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*** 1st Group Name: CS2113-T13-1"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "*** 2nd Group Name: CS2113-T13-2"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *Gender Flag `g/`*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/` is the Gender Prefix which only takes in \u00271\u0027 or \u00270\u0027 or \"true\" or \"false\". It should not be blank."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/1` or `g/true` will trigger the software to distribute all students into groups with balanced genders."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `g/0` or `g/false` will ignore gender field."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *Nationality Flag `nat/`*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `nat/` is the nationality Prefix which only takes in \u00271\u0027 or \u00270\u0027 or \"true\" or \"false\". It should not be blank."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `nat/1` or `nat/true` will trigger the software to distribute all students into groups with balanced nationality."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "** `nat/0` or `nat/false` will ignore nationality field."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `distinto 5 n/CS2113-T13-0 g/true nat/false`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `di 3 n/CS2113-T09- g/1 nat/0`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `di 2 n/CS2113-T14- g/true nat/0`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Entering email credential into the Student Management System: `login`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Enters account credential for sending email +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Format: `login e/EmailAddress pw/Password`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* login e/tsurajovin@hotmail.com pw/password!@#"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176882"
        },
        "content": "For the purpose of user testing, please use the provided email account +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176882"
        },
        "content": "if you do not wish to use your personal account."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Email Address: tsurajovin@hotmail.com +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Password: password!@#"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176882"
        },
        "content": "\u003d\u003d\u003d Sending Email to Single, Multiple or Group of Person(s): `sendmail` `sm`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Sends an email to a single person in list +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Format: `sendmail [Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Shortcut Format: `sm [Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Sends an email to multiple persons in list +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Format: `sendmail [Index],..,[Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Shortcut Format: `sm [Index],..,[Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Sends an email to all persons belonging to a group +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Format: `sendmail g/[Group_Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Shortcut Format: `sm g/[Group_Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176882"
        },
        "content": "Examples: +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* sendmail 1 s/Solution for Assignment m/Hi Bob, solution has been attached. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* sm 1 s/Solution for Assignment m/Hi Bob, solution has been attached. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* sendmail 1,4,6 s/Tutorial Cancelled m/Tutorial class for Friday has been cancelled. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* sm 1,4,6 s/Tutorial Cancelled m/Tutorial Class for Friday has been cancelled. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* sendmail g/2 s/Announcement m/Please bring your calculator tomorrow. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* sm g/2 s/Announcement m/Please bring your calculator tomorrow."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d List a group of students: `scorefilter`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "List out the standard deviation of the score data set from all students +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `scoreFilter [filter_standard]` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* scorefilter 56"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003d\u003d\u003d Summary of students\u0027 grade: \u0027summaryGrade\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "show highest, lowest, mean, median, 25th 75th percentiles, %passes* of certain test."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "Example: summaryGrade"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "Format: summaryGrade"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "Example: summaryGrade"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "show highest, lowest, mean, median, 25th 75th percentiles, %passes* of certain test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003d\u003d\u003d Adding/deleting tags automatically: \u0027addtag/deletetag\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Add/delete certain tags for certain group of people +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `addtag GROUP_NAME  tag/` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `deletetag  GROUP_NAME  tag/` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* addtag TAG_STRING tag/need more attention"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* deletetag TAG_STRING  tag/need more attention"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help` `h`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `h`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add` `a`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Format: `add n/NAME g/GENDER nat/NATIONALITY p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Shortcut Format: `a n/NAME g/GENDER nat/NATIONALITY p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "A person can have any number of tags (including 0) +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "A person gender can only be Male or Female +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "You can use `g/M` or `g/m` or `g/male` to specify a male gender. (Not Case-sensitive)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `add n/John Doe g/M nat/SG p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* `a n/Betsy Crowe g/female nat/MY t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "novin997"
        },
        "content": "\u003d\u003d\u003d Execute multiples of the same Command using text file : `script` `scr`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "novin997"
        },
        "content": "Get all the commands parameters from a text file and execute them +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "novin997"
        },
        "content": "Format: `script txt/TextFile c/CommandType` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "novin997"
        },
        "content": "Shortcut Format: `scr txt/TextFile c/CommandType` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "novin997"
        },
        "content": "* Default scripts folder is located at the /scripts/ where the main program is located at."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "novin997"
        },
        "content": "* If the scripts folder is missing, the program will automatically generate the folder when the program starts"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "novin997"
        },
        "content": "* txt/ is the TextFile Prefix which is used to indicate the following parameter is a TextFile parameter"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "novin997"
        },
        "content": "** TextFile is the text file which contains all the command arguments that you want to execute."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "novin997"
        },
        "content": "** TextFile should consist of the name of the file without the extension E.g \"StudentList\" is a valid TextFile but"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "novin997"
        },
        "content": "\"StudentList.txt\" is also valid TextFile but it will search for \"StudentList.txt.txt\" in the folder."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "novin997"
        },
        "content": "* c/ is the CommandType Prefix which is used to indicate the following parameter is a CommandType parameter"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "novin997"
        },
        "content": "** CommandType is the command that you want to execute E.g add, delete, creategroup, etc"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "novin997"
        },
        "content": "* `script txt/addgroups c/creategroup`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "novin997"
        },
        "content": "* `scr txt/addpersons c/add`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list` `l`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `l`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Editing a student : `edit` `e`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Edits an existing student in the student management system. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "Format: `edit INDEX [n/NAME] [g/GENDER] [nat/NATIONALITY] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG] [g/GRADE]...`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Edits the student at the specified `INDEX`. The index refers to the index number shown in the displayed student list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* You can remove all the student\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Edits the student at specified `INDEX` in all groups which the student is in [_Coming in v1.4_]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `e 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find` `f`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `f KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* `f Betsy Tim John` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete` `d`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Deletes the specified student from the student management system. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `delete INDEX` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `d INDEX`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* Deletes student in all groups [_Coming in v1.4_]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Deletes the 2nd student in the address book."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "`d 1` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Deletes the 1st student in the results of the `find` command."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select` `s`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `select INDEX` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `s INDEX`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "`s 1` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history` `his`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `history` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `his`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` `u`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `undo` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `u`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "`u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` `r`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `redo` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `r`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "`r` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear` `c`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `clear` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `c`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit` `ex`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Format: `exit` +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "Shortcut Format: `ex`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *Add* `add n/NAME g/GENDER nat/NATIONALITY p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "e.g. `add n/James Ho g/M nat/CN p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Create Group* : `creategroup n/NAME l/LOCATION [t/TAG] ...` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "e.g. `creategroup n/CS2040C l/LT15 t/cpp`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Select Group* : `selectgroup INDEX` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "e.g. `selectgroup 1`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Add to Group* : `addgroup g/INDEX p/INDEX ...` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "e.g. `addgroup g/1 p/1 p/2`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Delete Group* : `deletegroup INDEX` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "e.g. `deletegroup 1`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "* *Delete Students in Group* : `deletegroupstudents g/INDEX p/INDEX ...` +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "e.g. `deletegroupstudents g/1 p/1 p/2`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [g/GENDER] [nat/NATIONALITY] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* *Login* : `login e/EmailAddress pw/Password` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "E0176882"
        },
        "content": "e.g. `login e/tsurajovin@hotmail.com pw/password!@#`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* *Send Email (Person)*: `sendmail [Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "E0176882"
        },
        "content": "e.g. `sendmail 1 s/Solution for Assignment m/Hi Bob, solution has been attached.`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* *Send Email (Persons)*: `sendmail [Index],..,[Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "E0176882"
        },
        "content": "e.g. `sendmail 1,4,6 s/Tutorial Cancelled m/Tutorial class for Friday has been cancelled.`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "E0176882"
        },
        "content": "* *Send Email (Group)*: `sendmail g/[Group_Index] s/EMAIL_SUBJECT m/EMAIL MESSAGE` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "E0176882"
        },
        "content": "e.g. `sendmail g/2 s/Announcement m/Please bring your calculator tomorrow.`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "E0176882": 40,
      "clara1234566": 28,
      "novin997": 14,
      "Tsuweiquan": 46,
      "-": 228,
      "rajdeepsh": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.storage.scripts.ScriptSetup;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "    protected ScriptSetup scriptSetup;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "novin997"
        },
        "content": "        scriptSetup \u003d new ScriptSetup();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "        scriptSetup.execute(userPrefs.getScriptFileDirectory());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 5,
      "Tsuweiquan": 1,
      "-": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private String appTitle \u003d \"Student Management System\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_WRONG_COMMAND \u003d \"Wrong Command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_INVALID_MULTIPLE_DISPLAYED_INDEX \u003d \"An index of person provided is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_INVALID_GROUP_DISPLAYED_INDEX \u003d \"The group index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_ADDED_TEST_LIST \u003d \"added Test score\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_UPDATED_TEST_LIST \u003d \"updated Test score\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 1,
      "clara1234566": 2,
      "-": 13,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 (zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return \u0027[\u0027 + Integer.toString(getOneBased()) + \u0027]\u0027;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "rajdeepsh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/GroupPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Represents a selection change in the Group List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Group newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupPanelSelectionChangedEvent(Group newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Group getNewSelection() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToGroupListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Indicates a request to jump to the list of groups"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class JumpToGroupListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public JumpToGroupListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/DistributeUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.stream.Collectors.toMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.CreateGroupCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"There exist another group with the same name.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_INDEX_NEGATIVE \u003d \"Index should be positive.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_MISSING_GROUP \u003d \"Group is not found.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GROUP_LOCATION \u003d \"UNKNOWN\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void setModel(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /** This method in an integration of numberOfDifferentNationality method and paxPerNationality method."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *  The primary function for this method is to create a Map of Nationality as key and Integer as value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param allPerson : Takes in the allPerson list in order to count the number of different nationalities."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return a Map for data processing in the nationality Distribution method."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Map\u003cNationality, Integer\u003e createNationalityMap(LinkedList\u003cPerson\u003e allPerson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e counts \u003d numberOfDifferentNationality(allPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        counts \u003d paxPerNationality(counts);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Integer\u003e nationalityIntegerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (int i \u003d 0; i \u003c counts.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            String[] parseValue \u003d counts.entrySet().toArray()[i].toString().split(\"\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            Nationality nationalityCode \u003d new Nationality(parseValue[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            int numOfSameNationality \u003d Integer.parseInt(parseValue[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            nationalityIntegerMap.put(nationalityCode, numOfSameNationality);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return nationalityIntegerMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method does an exhaustive search in the all person list to find any person with the same nationality"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param key : The nationality to search for in all personlist"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param randomAllPersonArrayList : Holds all person data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return return the Person object when nationality matches."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Person findPerson(Nationality key, LinkedList\u003cPerson\u003e randomAllPersonArrayList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(key, randomAllPersonArrayList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (Person p : randomAllPersonArrayList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            if (p.getNationality().equals(key)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                Person tempPerson \u003d p;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                randomAllPersonArrayList.remove(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                return tempPerson;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function shuffles all the person inside the LinkedList, with a specific seed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param allPerson : Contain all Person list that is not shuffled."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param seed : The seed to perform shuffle. Reason for this is to conduct unit testing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return return a shuffled Person List"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public LinkedList\u003cPerson\u003e shuffle(LinkedList\u003cPerson\u003e allPerson, Random seed) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(allPerson, seed);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Collections.shuffle(allPerson, seed);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return allPerson;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function takes in the list of all person and calculate the total number of different nationalities."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns a integer value which represent the number of different nationalities"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Map\u003cNationality, Long\u003e numberOfDifferentNationality(LinkedList\u003cPerson\u003e allPerson) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(allPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return allPerson.stream().collect(Collectors.groupingBy(e -\u003e e.getNationality(), Collectors.counting()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function will sort the map that holds the number of people with different nationalities."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Map\u003cNationality, Long\u003e paxPerNationality(Map\u003cNationality, Long\u003e numberOfNationality) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(numberOfNationality);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return numberOfNationality.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .collect(toMap(e -\u003e e.getKey(), e -\u003e e.getValue(), (e1, e2) -\u003e e2,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        LinkedHashMap::new));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method does the selective distribution of all person to the group they shall be in."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method does the distribution for Male gender to every group first before repeating the process for female."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param index : The number of group. Acts as a pointer to which group should we add the person into."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param groupArrayList : Acts as a group with each elements are the group. The sub array are the persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param genderLinkList : The list of single-gender person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param loopCounter : A counter to ensure Person are added incrementally to every group."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param personArrayList : A pointer that points to the group element."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param num : A pointer that points to the last index of the sub-arrayList"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void selectiveDistributionByGender(int index, ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                              LinkedList\u003cPerson\u003e genderLinkList,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                              int loopCounter, int num, ArrayList\u003cPerson\u003e personArrayList) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (loopCounter \u003c index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            personArrayList.add(genderLinkList.getLast());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            groupArrayList.add(num, personArrayList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            int z \u003d loopCounter % index;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            personArrayList \u003d groupArrayList.get(num);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            groupArrayList.get(z).add(personArrayList.size() - 1, genderLinkList.getLast());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param index : The number of group. Acts as a pointer to which group should we add the person into."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param groupArrayList : Acts as a group with each elements are the group. The sub array are the persons."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param loopCounter : A counter to ensure Person are added incrementally to every group."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param personArrayList : A pointer that points to the group element."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param p : The person object to add into the sub-array"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void selectiveDistributionByNationality(int index, ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                                   ArrayList\u003cPerson\u003e personArrayList,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                                   int loopCounter, Person p) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (loopCounter \u003c index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            personArrayList.add(p);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            groupArrayList.add(personArrayList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            int z \u003d loopCounter % index;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            ArrayList temp \u003d groupArrayList.get(z);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            groupArrayList.get(z).add(temp.size() - 1, p);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function runs through the allPerson list and add the specific gender required into an LinkedList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param allPerson : The list of allPerson in the addressbook"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void filterGender(LinkedList\u003cPerson\u003e allPerson,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                             LinkedList\u003cPerson\u003e filteredGender, String gender) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(allPerson, filteredGender, gender);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (Person p : allPerson) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            if (p.getGender().toString().equals(gender)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                filteredGender.add(p);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function concatenates the group index count behind the given group name."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Index shown to user will start from 1."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public String groupNameConcatenation (int index, String groupName, Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(index, groupName, model);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new CommandException(MESSAGE_INDEX_NEGATIVE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        index \u003d index + 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        groupName \u003d groupName + String.valueOf(index);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (existDuplicateGroup(groupName, model)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function checks if there is any other groups that have the same name."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param groupName : The string to be check if another groupname string exist."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return false if there is no existing group."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean existDuplicateGroup (String groupName, Model model) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cGroup\u003e allGroups \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(allGroups);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (Group gN : allGroups) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            if (gN.getGroupName().toString().equals(groupName)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This function will check all n number of groupName with the existing address book for existing groups."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param index : Number of groups the user desire."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param groupName : The name of the group the user desire"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws CommandException if there exist a duplicate groupName"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void doesGroupNameExist(int index, String groupName, Model model) throws CommandException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(index, groupName, model);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (int i \u003d index; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            groupNameConcatenation(i, groupName, model);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method will creates a new group with a given groupname."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param toCreateGroupName : The groupName that has been concatenated with index"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return returns the group object that has been created."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Group groupBuilder(String toCreateGroupName) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(toCreateGroupName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        GroupName parseGroupName \u003d new GroupName(toCreateGroupName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        GroupLocation parseGroupLocation \u003d new GroupLocation(GROUP_LOCATION);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new Group(parseGroupName, parseGroupLocation, tags);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /** This method creates a group. However it does not do a commit after addition of group."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param group : Group object to be created."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws CommandException : if there exist another group with the same object."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void createGroupWithoutCommit(Group group, Model model) throws CommandException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(group, model);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        CreateGroupCommand createGroupCommand \u003d new CreateGroupCommand(group);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        createGroupCommand.setShouldCommit(false);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        createGroupCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        createGroupCommand.setShouldCommit(true);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /** This method add a Person into a group. However it does not do a commit after addition into group."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param addGroup : AddGroup Object to be executed."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws CommandException : When there is an Invalid Group or Person Index found."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void addPersonIntoGroupWithoutCommit(AddGroup addGroup, Model model) throws CommandException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(addGroup, model);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddGroupCommand personToAdd \u003d new AddGroupCommand(addGroup);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        personToAdd.setShouldCommit(false);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        personToAdd.execute(model, commandHistory);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        personToAdd.setShouldCommit(true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method returns the index of the particular group in the address book."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param group : The group to search for."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return Return the Index value of the group."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Index returnGroupIndex(Group group, Model model) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(group, model);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cGroup\u003e allGroups \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (int i \u003d 0; i \u003c allGroups.size(); i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            if (group.isSameGroup(allGroups.get(i))) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                return Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This Method Create the require group by the user and add the specific person into the group."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Works for multiple groups."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param groupArrayList : Total number of groups"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param groupName : Groupname set by the User"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws CommandException if Index of a group was return as 0."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void distributeProcess(ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                   String groupName) throws CommandException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allPerson \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (int i \u003d 0; i \u003c groupArrayList.size(); i++) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            String toCreateGroupName \u003d groupNameConcatenation(i, groupName, model);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            Group newGroup \u003d groupBuilder(toCreateGroupName);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            createGroupWithoutCommit(newGroup, model);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            Index groupIndex \u003d returnGroupIndex(newGroup, model);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            if (groupIndex.getOneBased() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                throw new CommandException(MESSAGE_MISSING_GROUP);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            System.out.println(groupIndex.getOneBased());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            System.out.println(toCreateGroupName);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            for (int j \u003d 0; j \u003c groupArrayList.get(i).size(); j++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                System.out.println(groupArrayList.get(i).get(j));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                for (int k \u003d 0; k \u003c allPerson.size(); k++) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    if (allPerson.get(k).equals(groupArrayList.get(i).get(j))) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        Set\u003cIndex\u003e personIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        personIndices.add(Index.fromZeroBased(k));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        AddGroup addSinglePersonIntoGroup \u003d new AddGroup(groupIndex, personIndices);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        addPersonIntoGroupWithoutCommit(addSinglePersonIntoGroup, model);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 310
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/EmailUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.Authenticator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.PasswordAuthentication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.Session;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.Transport;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.internet.InternetAddress;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.internet.MimeMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Domain;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Helper function for sending emails."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String INVALID_DOMAIN \u003d \"This domain is currently not supported\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String MAIL_SMTP_HOST \u003d \"mail.smtp.host\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String MAIL_SMTP_PORT \u003d \"mail.smtp.port\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String MAIL_SMTP_AUTH \u003d \"mail.smtp.auth\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String MAIL_SMTP_STARTTLS \u003d \"mail.smtp.starttls.enable\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String MAIL_SMTP_TRUST \u003d \"mail.smtp.ssl.trust\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static String userEmailAddress \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static String userEmailPassword \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Sets the email address for the email account."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param email the email address of the email account."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static void setUserEmailAddress(String email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        userEmailAddress \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Sets the password for the email account."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param password the password of the email account."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static void setUserEmailPassword(String password) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        userEmailPassword \u003d password;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Sends an email to the recipients with subject and message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param recipient the list of recipient email addresses."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param subject   the subject of the email."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param message   the content of the email."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws MessagingException If an error occurs during message sending."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static void sendEmail(List\u003cPerson\u003e recipient, Subject subject, seedu.address.model.email.Message message)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throws MessagingException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Authenticator auth \u003d new Authenticator() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            public PasswordAuthentication getPasswordAuthentication() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                return new PasswordAuthentication(userEmailAddress, userEmailPassword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Session session \u003d Session.getInstance(setServer(), auth);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Message msg \u003d new MimeMessage(session);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        msg.setFrom(new InternetAddress(userEmailAddress));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        for (Person addressee : recipient) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            InternetAddress[] current \u003d {new InternetAddress(addressee.getEmail().toString())};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            msg.addRecipients(Message.RecipientType.TO, current);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        msg.setSubject(subject.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        msg.setSentDate(new Date());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        msg.setText(message.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Transport.send(msg);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Checks if login credential for email account is provided."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @return true if both userEmailAddress and userEmailPassword is non-empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static boolean hasLoginCredentials() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return (!userEmailAddress.isEmpty()) || (!userEmailPassword.isEmpty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Sets the appropriate SMTP server properties based on {@code userEmailAddress}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @return Properties for sending email via correct SMTP server"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws MessagingException if domain of {@code userEmailAddress} does not exist."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static Properties setServer() throws MessagingException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Properties properties \u003d new Properties();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String mailServerHost;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String mailServerPort;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (userEmailAddress.contains(Domain.GMAIL)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerHost \u003d Domain.GMAIL_HOST;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerPort \u003d Domain.SMTP_PORT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            properties.put(MAIL_SMTP_TRUST, Domain.GMAIL_HOST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (userEmailAddress.contains(Domain.OUTLOOK) || userEmailAddress.contains(Domain.HOTMAIL)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                || userEmailAddress.contains(Domain.LIVE)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerHost \u003d Domain.LIVE_HOST;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerPort \u003d Domain.SMTP_PORT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            properties.put(MAIL_SMTP_TRUST, Domain.LIVE_HOST);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (userEmailAddress.contains(Domain.OFFICE365) || userEmailAddress.contains(Domain.NUS_STUDENT)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerHost \u003d Domain.OFFICE365_HOST;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerPort \u003d Domain.SMTP_PORT;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            properties.put(MAIL_SMTP_TRUST, Domain.OFFICE365_HOST);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (userEmailAddress.contains(Domain.NUS_STAFF)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerHost \u003d Domain.NUS_STAFF_HOST;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerPort \u003d Domain.SMTP_PORT;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            properties.put(MAIL_SMTP_TRUST, Domain.NUS_STAFF_HOST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (userEmailAddress.contains(Domain.SEND_GRID_USERNAME)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerHost \u003d Domain.SEND_GRID_HOST;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            mailServerPort \u003d Domain.SMTP_PORT;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            properties.put(MAIL_SMTP_TRUST, Domain.SEND_GRID_HOST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new MessagingException(INVALID_DOMAIN);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        properties.put(MAIL_SMTP_HOST, mailServerHost);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        properties.put(MAIL_SMTP_PORT, mailServerPort);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        properties.put(MAIL_SMTP_AUTH, \"true\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        properties.put(MAIL_SMTP_STARTTLS, \"true\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return properties;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Path data that has been converted via {@link Paths#get(String)}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getPath(String path) throws InvalidPathException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Paths.get(path);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Returns false if the new folder has been created and return true if the folder is present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Creates all the folder directory if it is missing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static boolean createFolder(Path folder) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "novin997"
        },
        "content": "        if (folder !\u003d null \u0026\u0026 Files.notExists(folder)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "novin997"
        },
        "content": "            Files.createDirectories(folder);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "novin997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Read each of the file and store them into a list of string and return them"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Try-Block is placed within the stream as the #close method is called on it,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise the underlying file handle is never closed until the garbage collector does it later"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://stackoverflow.com/questions/5868369/how-to-read-a-large-text-file-line-by-line-using-java\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *     https://stackoverflow.com/questions/5868369/how-to-read-a-large-text-file-line-by-line-using-java\u003c/a\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cString\u003e readEachLineFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try (Stream\u003cString\u003e stream \u003d Files.lines(file, Charset.defaultCharset())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            stream.forEachOrdered(list::add);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Return the root location folder of the program is located in"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static String getRootLocation() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Path currentRelativePath \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return currentRelativePath.toAbsolutePath().toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Write String to Text File"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @file is the location of the file"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @text is the string to be written to the text file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static void writeToTextFile(File file, String text) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "novin997"
        },
        "content": "        FileUtils.writeStringToFile(file, text, CHARSET);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 31,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of groups */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "rajdeepsh": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return model.getFilteredGroupList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "rajdeepsh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ValidCommandList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": " * It contains all the valid commands of the ."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ValidCommandList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String ADD_COMMAND \u003d \"n/Novin Tong Yong Kang g/M nat/SG p/99999999 \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"e/novin@example.com a/Pasir Ris street 99,#02-25 d/69 t/friends\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/Tsu Wei Quan g/F nat/SG p/66666666 e/tsuTheBoss@gmail.com \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"a/Tampines street 82,#02-33 d/99 t/owesMoney\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/Rajdeep g/M nat/SG p/98743546 e/rajthenewb@gmail.com \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"a/Bedok street 32 d/82 t/rich\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/Joel g/M nat/SG p/9784230 e/JoeltheHacker@gmail.com \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"a/Jurong West Street 52 d/76 t/pro\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String GROUP_COMMAND \u003d \"n/tut[01] l/e1-11-20 t/ma1301\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[02] l/e3-11-20 t/ma1301\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[03] l/e5-11-20 t/ma1301\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[04] l/e11-11-20 t/ma1301\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[05] l/s22-11-20 t/ma1301\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[06] l/as4-11-20 t/ma1301\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[07] l/e9-3-2 t/ma1301\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"n/tut[08] l/e5-1-2 t/ma1301\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static String getAddCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return ADD_COMMAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static String getGroupCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return GROUP_COMMAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NATIONALITY + \"NATIONALITY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_GRADE + \"SCOREGRADE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NATIONALITY + \"SG \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_GRADE + \"69 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 9,
      "-": 69,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Add persons to a group via their respective indexes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroupCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addgroup\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"ag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds persons to a group specified. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_GROUP_INDEX + \"GROUP_INDEX \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_PERSON_INDEX + \"PERSON_INDEX...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_GROUP_INDEX + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_PERSON_INDEX + \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Person index(s) added to group at index %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSONS \u003d \"Person(s) already exist in group\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final AddGroup toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private boolean shouldCommit;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates an AddGroupCommand to add persons to group"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * specified in {@code AddGroup}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public AddGroupCommand(AddGroup toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireAllNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.shouldCommit \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e lastShownGroupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!toAdd.validGroupIndex(lastShownGroupList.size())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        } else if (!toAdd.validPersonIndexSet(lastShownPersonList.size())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        toAdd.setPersonSet(lastShownPersonList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        toAdd.setGroupSet(lastShownGroupList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (model.hasPersonInGroup(toAdd)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSONS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.addGroup(toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (shouldCommit) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof AddGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddGroupCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setShouldCommit(boolean shouldCommit) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.shouldCommit \u003d shouldCommit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTestMarksCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.commands.EditTestMarksCommand.createEditedPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Marks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.TestName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * A command to add person test name and marks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class AddTestMarksCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * A command to add person test name and marks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_testmarks\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"addt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add test and marks to persons whose names\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice cs2113quiz1 67\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TEST \u003d \"This test already exists in the system\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final String testName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final String testMarks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final EditTestMarksCommand.EditPersonDescriptor editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public AddTestMarksCommand(NameContainsKeywordsPredicate predicate, String testName, String testMarks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testName \u003d testName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testMarks \u003d testMarks;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        List\u003cPerson\u003e personListName \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        EditTestMarksCommand.EditPersonDescriptor editPersonDescriptor \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                new EditTestMarksCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Person personToEdit \u003d personListName.get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Test test \u003d new Test(new TestName(testName), new Marks(testMarks));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e testList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (Test t : personToEdit.getTests()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            if (t.getTestName().testName.equals(test.getTestName().testName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_TEST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        testList.addAll(personToEdit.getTests());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        testList.add(test);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        editPersonDescriptor.setTests(testList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                String.format(Messages.MESSAGE_ADDED_TEST_LIST, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                || (other instanceof AddTestMarksCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 predicate.equals(((AddTestMarksCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "rajdeepsh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Creates a group in the AddressBook"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class CreateGroupCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"creategroup\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"cg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new group in the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_NAME + \"GROUP_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_GROUP_LOCATION + \"GROUP_LOCATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_NAME + \"TUT[01] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_GROUP_LOCATION + \"E1-06-01 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_TAG + \"MA1501\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the student management system\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Group toCreate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private boolean shouldCommit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates an CreateGroupCommand to add the specified {@code Group}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CreateGroupCommand(Group group) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.toCreate \u003d group;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.shouldCommit \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (model.hasGroup(toCreate)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.createGroup(toCreate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (shouldCommit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toCreate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof CreateGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 toCreate.equals(((CreateGroupCommand) other).toCreate));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setShouldCommit(boolean shouldCommit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.shouldCommit \u003d shouldCommit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Deletes a group identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class DeleteGroupCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletegroup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"dg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \": Deletes the group identified by the index number used in the displayed group list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public DeleteGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e lastShownList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof DeleteGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DistributeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.Distribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.DistributeAlgorithm;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Distribute will automatically split all persons into n number of groups based on user choice"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Will be able to split into n groups base on gender or nationality or both"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"distinto\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"di\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Distribution Success\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Distribute students equally into N groups.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"Parameters: NUMBER OF GROUPS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NAME + \"GROUP NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_GENDER + \"BALANCED GENDER? \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NATIONALITY + \"BALANCED NATIONALITY?\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"5 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NAME + \"E1-06- \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_GENDER + \"1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NATIONALITY + \"1 \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final Distribute distribute;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeCommand(Distribute dist) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(dist);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distribute \u003d dist;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        new DistributeAlgorithm(model, distribute);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand that \u003d (DistributeCommand) o;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Objects.equals(distribute, that.distribute);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Objects.hash(distribute);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"e\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"[\" + PREFIX_NATIONALITY + \"NATIONALITY] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"[\" + PREFIX_GRADE + \"GRADE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Gender updateGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Nationality updateNationality \u003d editPersonDescriptor.getNationality().orElse(personToEdit.getNationality());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Grade updatedGrade \u003d editPersonDescriptor.getGrade().orElse(personToEdit.getGrade());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e updatedTest \u003d editPersonDescriptor.getTests().orElse(personToEdit.getTests());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new Person(updatedName, updateGender, updateNationality, updatedPhone,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                updatedEmail, updatedAddress, updatedGrade, updatedTags, updatedTest);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        private Nationality nationality;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Grade grade;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Set\u003cTest\u003e test;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            setNationality(toCopy.nationality);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setTests(toCopy.test);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    address, tags, grade);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        public void setNationality(Nationality nationality) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        public Optional\u003cNationality\u003e getNationality() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return Optional.ofNullable(nationality);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setTests(Set\u003cTest\u003e test) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.test \u003d (test !\u003d null) ? new HashSet\u003c\u003e(test) : null;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cSet\u003cTest\u003e\u003e getTests() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return (test !\u003d null) ? Optional.of(Collections.unmodifiableSet(test)) : Optional.empty();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    \u0026\u0026 getNationality().equals(e.getNationality())"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    \u0026\u0026 getGrade().equals(e.getGrade())"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 40,
      "Tsuweiquan": 34,
      "-": 225,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTestMarksCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Marks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.TestName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * A command to edit person test marks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class EditTestMarksCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * A command to edit person test marks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_test\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"et\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add test to persons whose names\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice cs2113quiz1 66\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND_TEST \u003d \"Test Name is not Found please add first.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final String testName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final String testMarks;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public EditTestMarksCommand(NameContainsKeywordsPredicate predicate, String testName, String testMarks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testName \u003d testName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testMarks \u003d testMarks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        List\u003cPerson\u003e personListName \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Person personToEdit \u003d personListName.get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Test test \u003d new Test(new TestName(testName), new Marks(testMarks));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e testList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        testList.addAll(personToEdit.getTests());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        boolean checkExists \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (Test t : personToEdit.getTests()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            if (t.getTestName().testName.equals(test.getTestName().testName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                checkExists \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                testList.remove(t);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                testList.add(test);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!checkExists) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FOUND_TEST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        editPersonDescriptor.setTests(testList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                String.format(Messages.MESSAGE_UPDATED_TEST_LIST, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * createEditedPerson"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Gender updateGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Nationality updateNationality \u003d editPersonDescriptor.getNationality().orElse(personToEdit.getNationality());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Grade updatedGrade \u003d editPersonDescriptor.getGrade().orElse(personToEdit.getGrade());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e updatedTests \u003d editPersonDescriptor.getTests().orElse(personToEdit.getTests());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new Person(updatedName, updateGender, updateNationality, updatedPhone,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                updatedEmail, updatedAddress, updatedGrade, updatedTags, updatedTests);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                || (other instanceof EditTestMarksCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 predicate.equals(((EditTestMarksCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Nationality nationality;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Grade grade;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        private Set\u003cTest\u003e tests;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setNationality(toCopy.nationality);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            setTests(toCopy.tests);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    address, tags, grade, tests);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setNationality(Nationality nationality) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cNationality\u003e getNationality() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(nationality);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public void setTests(Set\u003cTest\u003e tests) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.tests \u003d (tests !\u003d null) ? new HashSet\u003c\u003e(tests) : null;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns an unmodifiable Test set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public Optional\u003cSet\u003cTest\u003e\u003e getTests() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return (tests !\u003d null) ? Optional.of(Collections.unmodifiableSet(tests)) : Optional.empty();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getNationality().equals(e.getNationality())"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getGrade().equals(e.getGrade())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u0026\u0026 getTests().equals(e.getTests());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 287
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EmailCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.model.email.Message.MESSAGE_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.AuthenticationFailedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.MessagingException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import javax.mail.SendFailedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import com.sun.mail.smtp.SMTPSendFailedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.util.EmailUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Sends an email to a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sendmail\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"sm\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sends an email to the recipient identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \"by the index number used in the displayed person list\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \"INDEX (must be a positive integer) or multiple INDEX separated by comma or g/INDEX \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_MESSAGE + \"MESSAGE\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 or 1,2,3 or g/2 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_SUBJECT + \"Tutorial location \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_MESSAGE + \"Dear students, tutorial location has been changed to E01-04\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Email sent\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Send failed\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_INVALID_ADDRESSES \u003d \"Invalid address found\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_NO_RECIPIENT \u003d \"Group contains no recipient\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_NO_LOGIN \u003d \"No login credentials found. Please login using \u0027login\u0027 command\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_AUTHENTICATION_FAIL \u003d \"Invalid login credentials entered\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SMTP_FAIL_EXCEPTION_MESSAGE \u003d \"Unable to send any more emails due to spam\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private boolean isSingleTarget \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private boolean isMultipleTarget \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private boolean isGroupTarget \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Index targetGroup;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private List\u003cIndex\u003e targetMultipleIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private List\u003cPerson\u003e toSend \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Subject toSubject;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Message toMessage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Creates a EmailCommand to add the specified {@code Person} as the recipient"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public EmailCommand(Index targetIndex, Subject subject, Message message) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.toSubject \u003d subject;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.toMessage \u003d message;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.isSingleTarget \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Creates a EmailCommand to add multiple {@code Persons} as the recipient"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public EmailCommand(List\u003cIndex\u003e targetMultipleIndex, Subject subject, Message message) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.targetMultipleIndex \u003d targetMultipleIndex;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.toSubject \u003d subject;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.toMessage \u003d message;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.isMultipleTarget \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Creates a EmailCommand to add multiple {@code Persons} as the recipient"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public EmailCommand(Index targetGroup, Subject subject, Message message, boolean isGroupTarget) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.targetGroup \u003d targetGroup;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.toSubject \u003d subject;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.toMessage \u003d message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.isGroupTarget \u003d isGroupTarget;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!EmailUtil.hasLoginCredentials()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new CommandException(MESSAGE_NO_LOGIN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (isSingleTarget) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            Person personToSend \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            toSend.add(personToSend);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (isMultipleTarget) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            for (Index targetIndex : targetMultipleIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                    Person personToSend \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                    toSend.add(personToSend);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_MULTIPLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (isGroupTarget) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            List\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            if (targetGroup.getZeroBased() \u003e\u003d groupList.size()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            Group groupToSend \u003d groupList.get(targetGroup.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            Set\u003cPerson\u003e personsInGroup \u003d groupToSend.getPersons();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            toSend.addAll(personsInGroup);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            EmailUtil.sendEmail(toSend, toSubject, toMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (AuthenticationFailedException afe) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new CommandException(MESSAGE_AUTHENTICATION_FAIL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (SMTPSendFailedException ssfe) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new CommandException(setErrorMessageForSendFailedException(ssfe.getMessage()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (SendFailedException sfe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new CommandException(setErrorMessageForSendFailedException(sfe.getMessage()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (MessagingException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new CommandException(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSend));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static String setErrorMessageForSendFailedException(String e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (e.contains(\"MessageSubmissionExceededException\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return MESSAGE_FAIL + \": \" + MESSAGE_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (e.contains(\"OutboundSpamException\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return MESSAGE_FAIL + \": \" + SMTP_FAIL_EXCEPTION_MESSAGE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (e.contains(\"Invalid Addresses\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return MESSAGE_FAIL + \": \" + MESSAGE_INVALID_ADDRESSES;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (e.contains(\"No recipient addresses\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return MESSAGE_FAIL + \": \" + MESSAGE_NO_RECIPIENT;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return MESSAGE_FAIL;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 162
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EmailLoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.util.EmailUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Sends an email to a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailLoginCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"log\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters your email credentials into the system \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_EMAIL + \"abc@hotmail.com \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + PREFIX_PASSWORD + \"password123\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Login credentials entered\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private String userEmail;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private String userPassword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public EmailLoginCommand(Email email, String password) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.userEmail \u003d email.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        this.userPassword \u003d password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailAddress(userEmail);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailPassword(userPassword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"ex\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.AttendanceStage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Generate a attendance list for all the people in the address book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GenListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"genlist\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"gl\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_GENERATE_ATTENDANCE_LIST \u003d \"Attendance list has been generated\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"The list is currently empty\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        AttendanceStage stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (lastShownList.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        stage \u003d new AttendanceStage(lastShownList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.generateAttendance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.printResizedTable();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GENERATE_ATTENDANCE_LIST));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GradeSummaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.util.Calculator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.ui.DisplayGrade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * GradeSummary Command for Student"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class GradeSummaryCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"disp\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": display student grades summary \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + PREFIX_MEAN"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + PREFIX_MEAN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Success Showing List\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"ERROR showing List\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final String commandType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public GradeSummaryCommand (String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        commandType \u003d command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Calculator calc \u003d new Calculator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        DisplayGrade gradeDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (\"25\".equals(commandType)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            ArrayList\u003cPerson\u003e studentList \u003d calc.find25th(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            if (studentList.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            gradeDisplay \u003d new DisplayGrade(studentList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            gradeDisplay.generateGradeList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (\"75\".equals(commandType)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            ArrayList\u003cPerson\u003e studentList \u003d calc.find75th(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            if (studentList.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            gradeDisplay \u003d new DisplayGrade(studentList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            gradeDisplay.generateGradeList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (\"H\".equals(commandType)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            int highestScore \u003d calc.findHighest(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return new CommandResult(String.format(\"Highest Score in class is \" + highestScore));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (\"MEAN\".equals(commandType)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            int mean \u003d calc.calculateMean(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return new CommandResult(String.format(\"The mean is \" + mean));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (\"MEDIAN\".equals(commandType)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            int median \u003d calc.calculateMedian(model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return new CommandResult(String.format(\"Median in class is \" + median));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"his\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Lists all groups in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class ListGroupCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listgroup\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"lg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all groups\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScriptCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.CommandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.TextFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Execute multiple same using a text file to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ScriptCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"script\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"scr\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String TEXT_EXTENSION \u003d \".txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String COMMA \u003d \",\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String DEFAULT_FOLDER \u003d \"/scripts/\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \": Run multiple commands based on the text file selected.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"Parameters: TEXTFILE CommandType\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" txt/StudentList c/add\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"Example: \" + COMMAND_WORD_2 + \" txt/Studentlist c/group\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All persons from the text file %s has been added\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_ADD_ERROR \u003d \"Line %s of %s cannot be executed\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_READ_FILE \u003d \"%s is not able to be read\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_FILE_MISSING \u003d \"%s is not present in the folder\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private String textFileName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public ScriptCommand(TextFile fileName, CommandType commandType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(commandType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "        textFileName \u003d fileName.getTextFile() + TEXT_EXTENSION;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String projectLocation \u003d FileUtil.getRootLocation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "        this.path \u003d FileUtil.getPath(projectLocation + DEFAULT_FOLDER + textFileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String multCommandError;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "novin997"
        },
        "content": "        AddressBookParser scriptParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "novin997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "novin997"
        },
        "content": "            List\u003cString\u003e commandArguments \u003d FileUtil.readEachLineFromFile(path);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "novin997"
        },
        "content": "            commandArguments.replaceAll(s -\u003e commandType + SPACE + s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "novin997"
        },
        "content": "            multCommandError \u003d executeMultipleCommand(scriptParser, commandArguments, model, history);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "novin997"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "novin997"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FILE_MISSING, textFileName));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "novin997"
        },
        "content": "        if (!multCommandError.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADD_ERROR, multCommandError , textFileName));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, textFileName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * This method will execute multiple commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public String executeMultipleCommand(AddressBookParser scriptParser, List\u003cString\u003e commandArguments,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "novin997"
        },
        "content": "                                         Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String lineNumbers \u003d new String();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "novin997"
        },
        "content": "        for (String fullCommands : commandArguments) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "novin997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "novin997"
        },
        "content": "                Command command \u003d scriptParser.parseCommand(fullCommands);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "novin997"
        },
        "content": "                command.execute(model, history);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "novin997"
        },
        "content": "            } catch (ParseException | CommandException pe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "novin997"
        },
        "content": "                lineNumbers \u003d lineNumbers + (commandArguments.indexOf(fullCommands) + 1) + COMMA;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "novin997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "novin997"
        },
        "content": "        lineNumbers \u003d lineNumbers.replaceAll(\".$\", \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return lineNumbers;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectGroupCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Selects a group identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class SelectGroupCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectgroup\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"sg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \": Selects the group identified by the index number used in the displayed group list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_SELECT_GROUP_SUCCESS \u003d \"Selected Group: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public SelectGroupCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e filteredGroupList \u003d model.getFilteredGroupList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredGroupList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToGroupListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_GROUP_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof SelectGroupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectGroupCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String COMMAND_WORD_2 \u003d \"u\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_NATIONALITY,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GRADE, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_NATIONALITY,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GRADE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Nationality nationality \u003d ParserUtil.parseNationality(argMultimap.getValue(PREFIX_NATIONALITY).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e testList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Person person \u003d new Person(name, gender, nationality, phone, email, address, grade, tagList, testList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 9,
      "Tsuweiquan": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Parses input arguments and creates a new AddGroupCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * and returns an AddGroupCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public AddGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_GROUP_INDEX, PREFIX_PERSON_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_INDEX, PREFIX_PERSON_INDEX)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Index groupIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_GROUP_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e personIndexList \u003d ParserUtil.parseIndices(argMultimap.getAllValues(PREFIX_PERSON_INDEX));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroup \u003d new AddGroup(groupIndex, personIndexList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new AddGroupCommand(addGroup);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTestMarksCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEST_MARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEST_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.AddTestMarksCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class AddTestMarksCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public AddTestMarksCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTestMarksCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        List\u003cString\u003e nameKeywordsList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEST_NAME, PREFIX_TEST_MARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        nameKeywordsList.remove(PREFIX_TEST_NAME + argMultimap.getValue(PREFIX_TEST_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        nameKeywordsList.remove(PREFIX_TEST_MARK + argMultimap.getValue(PREFIX_TEST_MARK).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new AddTestMarksCommand(new NameContainsKeywordsPredicate(nameKeywordsList),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                argMultimap.getValue(PREFIX_TEST_NAME).get(), argMultimap.getValue(PREFIX_TEST_MARK).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddScriptCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.AddTestMarksCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.CreateGroupCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.DistributeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.EditTestMarksCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.commands.EmailLoginCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.GenListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.GradeSummaryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.commands.ScriptCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.SelectGroupCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case AddCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddScriptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddScriptCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddScriptCommand(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        //@@author rajdeepsh"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case CreateGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case CreateGroupCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new CreateGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case AddGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case AddGroupCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new AddGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case DeleteGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case DeleteGroupCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new DeleteGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case SelectGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case SelectGroupCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new SelectGroupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case EditCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case SelectCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case ClearCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case FindCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        case GenListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case GenListCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GenListCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case EmailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case EmailCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return new EmailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case EmailLoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case EmailLoginCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return new EmailLoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case DistributeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case DistributeCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return new DistributeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case ListCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case ListGroupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case ListGroupCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new ListGroupCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case ExitCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case HelpCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case UndoCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case RedoCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        case GradeSummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        case GradeSummaryCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return new GradeSummaryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        case AddTestMarksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        case AddTestMarksCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return new AddTestMarksCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        case EditTestMarksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        case EditTestMarksCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return new EditTestMarksCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "novin997"
        },
        "content": "        case ScriptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "novin997"
        },
        "content": "        case ScriptCommand.COMMAND_WORD_2:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "novin997"
        },
        "content": "            return new ScriptCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 10,
      "clara1234566": 15,
      "novin997": 5,
      "Tsuweiquan": 6,
      "-": 100,
      "rajdeepsh": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Prefix PREFIX_NATIONALITY \u003d new Prefix(\"nat/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Prefix PREFIX_MESSAGE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Prefix PREFIX_GROUP_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Prefix PREFIX_PERSON_INDEX \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Prefix PREFIX_GROUP_INDEX \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_MEAN \u003d new Prefix(\"mean/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_HIGHEST \u003d new Prefix(\"highest/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_TWENTY_FIVE \u003d new Prefix(\"25/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_SEVENTY_FIVE \u003d new Prefix(\"75/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_MEDIAN \u003d new Prefix(\"median/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_TEST_NAME \u003d new Prefix(\"tn/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final Prefix PREFIX_TEST_MARK \u003d new Prefix(\"tm/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final Prefix PREFIX_TEXT_FILE \u003d new Prefix(\"txt/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final Prefix PREFIX_COMMAND \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 3,
      "clara1234566": 8,
      "novin997": 2,
      "Tsuweiquan": 2,
      "-": 14,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.CreateGroupCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Parses input arguments and creates a new CreateGroupCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class CreateGroupCommandParser implements Parser\u003cCreateGroupCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateGroupCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * and returns an CreateGroupCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public CreateGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GROUP_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GROUP_LOCATION)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupLocation groupLocation \u003d ParserUtil.parseGroupLocation(argMultimap.getValue(PREFIX_GROUP_LOCATION).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new Group(groupName, groupLocation, tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new CreateGroupCommand(group);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Parses input arguments and creates a new DeleteGroupCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * and returns an DeleteGroupCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public DeleteGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new DeleteGroupCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DistributeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.model.distribute.DistributeAlgorithm.MESSAGE_INVALID_SIZE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.DistributeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.Distribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Parses input arguments and creates a new DistributeCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeCommandParser implements Parser\u003cDistributeCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_NATIONALITY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            index \u003d ParserUtil.parseInteger(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new NumberFormatException(MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    DistributeCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_NATIONALITY)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Boolean isSortByGender \u003d ParserUtil.parseIsFlagged(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Boolean isSortByNationality \u003d ParserUtil.parseIsFlagged(argMultimap.getValue(PREFIX_NATIONALITY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute dist \u003d new Distribute(index, groupName, isSortByGender, isSortByNationality);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new DistributeCommand(dist);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                PREFIX_NATIONALITY, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GRADE, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NATIONALITY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            editPersonDescriptor.setNationality(ParserUtil.parseNationality(argMultimap.getValue(PREFIX_NATIONALITY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            editPersonDescriptor.setGrade(ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 2,
      "Tsuweiquan": 14,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTestMarksCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEST_MARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEST_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.EditTestMarksCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class EditTestMarksCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public EditTestMarksCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTestMarksCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        List\u003cString\u003e nameKeywordsList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEST_NAME, PREFIX_TEST_MARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        nameKeywordsList.remove(PREFIX_TEST_NAME + argMultimap.getValue(PREFIX_TEST_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        nameKeywordsList.remove(PREFIX_TEST_MARK + argMultimap.getValue(PREFIX_TEST_MARK).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new EditTestMarksCommand(new NameContainsKeywordsPredicate(nameKeywordsList),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                argMultimap.getValue(PREFIX_TEST_NAME).get(), argMultimap.getValue(PREFIX_TEST_MARK).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EmailCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.commands.EmailCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Parses input arguments and creates a new EmailCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * and returns an EmailCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public EmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT, PREFIX_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SUBJECT, PREFIX_MESSAGE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        boolean isGroupCommand \u003d isGroup(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        boolean isMultipleIndex \u003d isMultipleIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Message message \u003d ParserUtil.parseMessage(argMultimap.getValue(PREFIX_MESSAGE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!isMultipleIndex \u0026\u0026 !isGroupCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return new EmailCommand(index, subject, message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else if (isMultipleIndex \u0026\u0026 !isGroupCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                indexList \u003d ParserUtil.parseMultipleIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return new EmailCommand(indexList, subject, message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                index \u003d ParserUtil.parseGroupIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return new EmailCommand(index, subject, message, isGroupCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns true if index argument contains more than 1 index separated by \",\"."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static boolean isMultipleIndex(String arg) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return (arg.contains(\",\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns true if index argument contains prefix for group."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static boolean isGroup(String arg) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return (arg.contains(PREFIX_GROUP_INDEX.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EmailLoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.commands.EmailLoginCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Parses input arguments and creates a new EmailLoginCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailLoginCommandParser implements Parser\u003cEmailLoginCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EmailLoginCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * and returns an EmailLoginCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public EmailLoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EMAIL, PREFIX_PASSWORD)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailLoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new EmailLoginCommand(email, password);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradeSummaryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HIGHEST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDIAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEVENTY_FIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TWENTY_FIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.commands.GradeSummaryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class GradeSummaryCommandParser implements Parser\u003cGradeSummaryCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public GradeSummaryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TWENTY_FIVE, PREFIX_SEVENTY_FIVE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        PREFIX_HIGHEST, PREFIX_MEAN, PREFIX_MEDIAN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        String commandToRun \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TWENTY_FIVE).isPresent()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            commandToRun \u003d \"25\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEVENTY_FIVE).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            commandToRun \u003d \"75\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HIGHEST).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            commandToRun \u003d \"H\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEAN).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            commandToRun \u003d \"MEAN\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEDIAN).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            commandToRun \u003d \"MEDIAN\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new GradeSummaryCommand(commandToRun);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.model.person.Gender.inputTransform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.DistributeAlgorithm;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.CommandType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.TextFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static String groupName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses {@code oneBasedIndex} containing group prefix and returns the index. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static Index parseGroupIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.replaceAll(\"[g/]\", \"\").trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses multiple {@code oneBasedIndex} into a list of {@code Index} and returns it. Leading and trailing white"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * spaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static List\u003cIndex\u003e parseMultipleIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        List\u003cString\u003e items \u003d Arrays.asList(trimmedIndex.split(\",\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        for (String string : items) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(string)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                indexList.add(Index.fromOneBased(Integer.parseInt(string)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return indexList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e indices} into a {@code Set\u003cIndex\u003e}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndices(Collection\u003cString\u003e indices) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (String i : indices) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            indexSet.add(parseIndex(i));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!Gender.isInputAccepted(trimmedGender)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        trimmedGender \u003d inputTransform(trimmedGender);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(trimmedGender);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Parses a {@code String nationality} into a {@code Nationality}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws ParseException if the given {@code nationality} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static Nationality parseNationality(String countryCode) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(countryCode);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String trimmedCountryCode \u003d countryCode.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!Nationality.isValidCountryCode(trimmedCountryCode)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(Nationality.MESSAGE_NATIONALITY_CONSTRAINT);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new Nationality(trimmedCountryCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses a {@code String password}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static String parsePassword(String password) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return password.trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses a {@code String groupName} into a {@code GroupName}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws ParseException if the given {@code GroupName} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static GroupName parseGroupName(String groupName) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String trimmedGroupName \u003d groupName.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!GroupName.isValidGroupName(trimmedGroupName)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(GroupName.MESSAGE_GROUP_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new GroupName(trimmedGroupName);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses a {@code String groupLocation} into a {@code GroupLocation}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws ParseException if the given {@code GroupLocation} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static GroupLocation parseGroupLocation(String groupLocation) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(groupLocation);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String trimmedGroupLocation \u003d groupLocation.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!GroupLocation.isValidGroupLocation(trimmedGroupLocation)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(GroupLocation.MESSAGE_GROUP_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new GroupLocation(trimmedGroupLocation);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Parses a {@code String Grade} into a {@code Grade}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static Grade parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        String trimmedGrade \u003d grade.trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new Grade(trimmedGrade);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses {@code String subject} into a {@code Subject}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!Subject.isValidSubject(trimmedSubject)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new Subject(trimmedSubject);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Parses {@code String message} into a {@code Message}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @throws ParseException if the given {@code message} is invalid."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static Message parseMessage(String message) throws ParseException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String trimmedMessage \u003d message.trim();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        if (!Message.isValidMessage(trimmedMessage)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(Message.MESSAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new Message(trimmedMessage);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Parses {@code String textFile} into a {@code textFile}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "novin997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @throws ParseException if the given {@code textFile} is invalid."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static TextFile parseTextFile(String textFile) throws ParseException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(textFile);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String trimmedMessage \u003d textFile.trim();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "novin997"
        },
        "content": "        if (!TextFile.isValidTextFile(trimmedMessage)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "novin997"
        },
        "content": "            throw new ParseException(TextFile.MESSAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return new TextFile(trimmedMessage);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Parses {@code String commandType} into a {@code commandType}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "novin997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @throws ParseException if the given {@code commandType} is invalid."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static CommandType parseCommandType(String commandType) throws ParseException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(commandType);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String trimmedMessage \u003d commandType.trim();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "novin997"
        },
        "content": "        if (!CommandType.isValidCommand(trimmedMessage)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "novin997"
        },
        "content": "            throw new ParseException(CommandType.MESSAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return new CommandType(trimmedMessage);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Checks if input value by the user is not Null or not 0"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param value"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static int parseInteger(String value) throws ParseException {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String trimmedInt \u003d value.trim();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedInt)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Integer.parseInt(trimmedInt);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Conducts the check of flags during user command input"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Accepts \"true\" or \u00271\u0027 to assert true"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Accepts \"false\" or \u00270\u0027 to assert false"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param isFlagged"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static Boolean parseIsFlagged(String isFlagged) throws ParseException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(isFlagged);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String trimmedFlaggedValue \u003d isFlagged.trim().toLowerCase();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        switch (trimmedFlaggedValue) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case \"false\":"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            trimmedFlaggedValue \u003d \"false\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case \"true\":"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            trimmedFlaggedValue \u003d \"true\";"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new ParseException(DistributeAlgorithm.MESSAGE_FLAG_ERROR);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Boolean flag \u003d Boolean.valueOf(trimmedFlaggedValue);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0176882": 81,
      "clara1234566": 16,
      "novin997": 32,
      "Tsuweiquan": 110,
      "-": 125,
      "rajdeepsh": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScriptCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TEXT_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.commands.ScriptCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.CommandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.TextFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Parses input arguments and creates a new ScriptCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ScriptCommandParser implements Parser\u003cScriptCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScriptCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * and returns an ScriptCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public ScriptCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TEXT_FILE, PREFIX_COMMAND);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TEXT_FILE, PREFIX_COMMAND)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScriptCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "        TextFile textFile \u003d ParserUtil.parseTextFile(argMultimap.getValue(PREFIX_TEXT_FILE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandType commandType \u003d ParserUtil.parseCommandType(argMultimap.getValue(PREFIX_COMMAND).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return new ScriptCommand(textFile, commandType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectGroupCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.SelectGroupCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Parses input arguments and creates a new SelectGroupCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class SelectGroupCommandParser implements Parser\u003cSelectGroupCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectGroupCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * and returns an SelectGroupCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public SelectGroupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new SelectGroupCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectGroupCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.UniqueGroupList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final UniqueGroupList groups;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */ {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groups \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates an AddressBook using the Persons and Groups in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Replaces the contents of the group list with {@code groups}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groups.setGroups(groups);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        setGroups(newData.getGroupList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    //// person and group - level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if a group with the same fields except its persons"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * as {@code group} exists in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groups.contains(group);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates a group in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * The group must not already exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void createGroup(Group g) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groups.createGroup(g);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds persons to a group in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * The persons must not already exist in the group."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup(AddGroup aG) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groups.addGroup(aG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void removeGroup(Group key) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groups.remove(key);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Return true if a person with the same identity is already in the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * specified group."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean hasPersonInGroup(AddGroup aG) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groups.contains(aG);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + groups.asUnmodifiableObservableList().size() + \" groups\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groups.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons) \u0026\u0026 groups.equals(((AddressBook) other).groups));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 6,
      "-": 109,
      "rajdeepsh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    Predicate\u003cGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    //@@author rajdeepsh"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates the given group."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code group} must not already exist in the system."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    void createGroup(Group group);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if a group with the same identity fields and tag as {@code group} exists in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    boolean hasGroup(Group group);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds persons to the given group."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code addGroup} persons must not already exist in the group."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    void addGroup(AddGroup addGroup);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Return true if a person  with the same identity fields exist in the group."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    boolean hasPersonInGroup(AddGroup addGroup);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Deletes the given group."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * The group must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    void deleteGroup(Group target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns an unmodifiable view of the filtered group list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    ObservableList\u003cGroup\u003e getFilteredGroupList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Updates the filter of the filtered group list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 15,
      "-": 73,
      "rajdeepsh": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final FilteredList\u003cGroup\u003e filteredGroups;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        filteredGroups \u003d new FilteredList\u003c\u003e(versionedAddressBook.getGroupList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return versionedAddressBook.hasGroup(group);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void createGroup(Group group) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        versionedAddressBook.createGroup(group);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(addGroup);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        versionedAddressBook.addGroup(addGroup);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean hasPersonInGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(addGroup);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return versionedAddressBook.hasPersonInGroup(addGroup);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        versionedAddressBook.removeGroup(target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Group List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Group} backed by the internal list of"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredGroups);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        filteredGroups.setPredicate(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 filteredGroups.equals(other.filteredGroups);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 7,
      "-": 148,
      "rajdeepsh": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns an unmodifiable view of the persons and groups list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * This list will not contain any duplicate persons or groups."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    ObservableList\u003cGroup\u003e getGroupList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 1,
      "-": 16,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private String scriptFileDirectory \u003d \"/scripts/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public String getScriptFileDirectory() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return scriptFileDirectory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void setScriptFileDirectory(String scriptFileDirectory) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "        this.scriptFileDirectory \u003d scriptFileDirectory;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "novin997"
        },
        "content": "        sb.append(\"\\nLocal Scripts file location : \" + scriptFileDirectory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 10,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/distribute/Distribute.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.model.distribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Represent the auto-distribution process of students in the addressbook."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class Distribute {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final GroupName groupName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final Boolean gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final Boolean nationality;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Distribute(int index, GroupName groupName, Boolean gender, Boolean nationality) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireAllNonNull(index, groupName, gender, nationality);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public GroupName getGroupName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Boolean getGender() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Boolean getNationality() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return nationality;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute that \u003d (Distribute) o;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return index \u003d\u003d that.index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 Objects.equals(groupName, that.groupName)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 Objects.equals(gender, that.gender)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 Objects.equals(nationality, that.nationality);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Objects.hash(index, groupName, gender, nationality);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        builder.append(getIndex())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(\"Group Name: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(getGroupName().toString())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(\"Sort By Gender: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(\"Sort By Nationality: \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(getNationality());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/distribute/DistributeAlgorithm.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.model.distribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.model.person.Gender.VALID_GENDER_FEMALE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.model.person.Gender.VALID_GENDER_MALE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.commons.util.DistributeUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * DistributeAlgorithm class contains all the algorithm that is based on distinto command flags"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * This will contain 4 different types of Algorithm."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * First - normalDistribution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Second - genderDistribution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Third - nationalityDistribution"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Forth - Gender \u0026 Nationality Distribution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeAlgorithm {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_INVALID_SIZE \u003d \"Number of Groups should not be more than Number of Persons\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_FLAG_ERROR \u003d \"Gender and Nationality flags only accept \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + \"\u00271\u0027 or \u00270\u0027 or \\\"true\\\" or \\\"false\\\"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private DistributeUtil distUtil \u003d new DistributeUtil();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeAlgorithm(Model model, Distribute dist) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(dist);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.setModel(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        int numOfGroups \u003d dist.getIndex();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String groupName \u003d dist.getGroupName().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        boolean genderFlag \u003d dist.getGender();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        boolean nationalityFlag \u003d dist.getNationality();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Get all person data via ObservableList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allPerson \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(allPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Checks if numOfGroups intended to be created is \u003e number of people"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (allPerson.size() \u003c numOfGroups) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.doesGroupNameExist(numOfGroups, groupName, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Convert ObservableList into ArrayList to use Randomizer via Collections"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e personLinkedList \u003d new LinkedList\u003c\u003e(allPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Randomizer function"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Instant instant \u003d Instant.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.shuffle(personLinkedList, new Random(instant.getEpochSecond()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!genderFlag \u0026\u0026 !nationalityFlag) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            normalDistribution(numOfGroups, groupArrayList, personLinkedList, groupName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } else if (!genderFlag \u0026\u0026 nationalityFlag) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            nationalityDistribution(numOfGroups, groupArrayList, personLinkedList, groupName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } else if (genderFlag \u0026\u0026 !nationalityFlag) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            genderDistribution(numOfGroups, groupArrayList, personLinkedList, groupName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            strictDistribution(numOfGroups, groupArrayList, personLinkedList, groupName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This Method distribute all students into n number of groups"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Distribution is random."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private void normalDistribution(int index, ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                    LinkedList\u003cPerson\u003e personLinkedList,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                    String groupName) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (int i \u003d index; i \u003e 0; i--) { //number of groups to add into the groupArrayList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            ArrayList\u003cPerson\u003e addPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            int paxInAGroup \u003d personLinkedList.size() / i;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            while (paxInAGroup \u003e 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                addPerson.add(personLinkedList.getLast());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                personLinkedList.removeLast();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                paxInAGroup--;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            groupArrayList.add(addPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.distributeProcess(groupArrayList, groupName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        groupArrayList.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This Method distribute all students into n number of groups."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Distribution will try to achieve an balance number of gender in a group."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Distribution is Random"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private void genderDistribution(int index, ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                    LinkedList\u003cPerson\u003e allPersonLinkList, String groupName)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e maleLinkList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e femaleLinkList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        int loopCounter \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        int num \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.filterGender(allPersonLinkList, maleLinkList, VALID_GENDER_MALE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.filterGender(allPersonLinkList, femaleLinkList, VALID_GENDER_FEMALE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        while (maleLinkList.size() !\u003d 0 || femaleLinkList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            if (loopCounter % index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                num \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            while (num \u003c index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                if (maleLinkList.size() \u003d\u003d 0 \u0026\u0026 femaleLinkList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                ArrayList\u003cPerson\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                if (maleLinkList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    distUtil.selectiveDistributionByGender(index, groupArrayList, maleLinkList, loopCounter, num, temp);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    maleLinkList.removeLast();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                } else if (femaleLinkList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    distUtil.selectiveDistributionByGender(index, groupArrayList, femaleLinkList, loopCounter, num,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                            temp);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    femaleLinkList.removeLast();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                loopCounter++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.distributeProcess(groupArrayList, groupName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        groupArrayList.clear();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This Method distribute all students into n number of groups."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Distribution will try to achieve multi-national students in a group."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Distribution is Random."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private void nationalityDistribution(int index, ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                         LinkedList\u003cPerson\u003e personLinkedList, String groupName)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Integer\u003e nationalityMap \u003d distUtil.createNationalityMap(personLinkedList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        int loopCounter \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        for (Map.Entry\u003cNationality, Integer\u003e entry : nationalityMap.entrySet()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            for (int x \u003d 0; x \u003c entry.getValue(); x++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                ArrayList\u003cPerson\u003e personArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                Person p \u003d distUtil.findPerson(entry.getKey(), personLinkedList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                distUtil.selectiveDistributionByNationality(index, groupArrayList, personArrayList, loopCounter, p);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                loopCounter++;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.distributeProcess(groupArrayList, groupName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        groupArrayList.clear();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This Method distribute all students into n number of groups"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Distribution will try to include balanced gender and include multi-national students."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private void strictDistribution(int index, ArrayList\u003cArrayList\u003cPerson\u003e\u003e groupArrayList,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                                    LinkedList\u003cPerson\u003e personLinkedList, String groupName)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        System.out.println(\"Gender \u0026 Nationality Distribution\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 169
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Domain.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Represents a the collection of Strings for EmailUtil."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class Domain {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String GMAIL \u003d \"@gmail\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String GMAIL_HOST \u003d \"smtp.gmail.com\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String OUTLOOK \u003d \"@outlook\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String HOTMAIL \u003d \"@hotmail\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String LIVE \u003d \"@live\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String LIVE_HOST \u003d \"smtp.live.com\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String NUS_STUDENT \u003d \"@u.nus.edu\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String OFFICE365 \u003d \"@office365\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String OFFICE365_HOST \u003d \"smtp.office365.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String NUS_STAFF \u003d \"nus.edu.sg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String NUS_STAFF_HOST \u003d \"smtp.nus.edu.sg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SEND_GRID_USERNAME \u003d \"apikey\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SEND_GRID_PASSWORD \u003d \"SG.cHETjiQoQhWgouRC7tXIGg\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \".YwZytONXZ-ENlV8fY6yjJkK6eZLHCInF9BTH3FAzo5Q\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SEND_GRID_HOST \u003d \"smtp.sendgrid.net\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SMTPS_PORT \u003d \"465\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SMTP_PORT \u003d \"587\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Message.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Represents a email message for EmailUtil."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMessage(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            \"Message can only be 25MB in size (Gmail).\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_VALIDATION_REGEX \u003d \"^.{0,25000000}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Constructs a {@code Message}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param message A valid message body."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public Message(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        checkArgument(isValidMessage(message), MESSAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        value \u003d message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns true if a given string is a valid message."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static boolean isValidMessage(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return test.matches(MESSAGE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                || (other instanceof Message // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                \u0026\u0026 value.equals(((Message) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Represents a email subject for EmailUtil."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            \"Email subject has no character limit (RFC 2822), \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                    + \"however to prevent folding of subject, 78 characters is enforced.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final String SUBJECT_VALIDATION_REGEX \u003d \"^.{0,78}$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Constructs a {@code Subject}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @param subject A valid subject title."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public Subject(String subject) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        value \u003d subject;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns true if a given string is a valid subject header."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static boolean isValidSubject(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return test.matches(SUBJECT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                \u0026\u0026 value.equals(((Subject) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grade/Marks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Represents a Marks in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMarks(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class Marks {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_MARKS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \"marks should be \u003e\u003d0 \u0026\u0026 \u003c\u003d 100\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MARKS_VALIDATION_REGEX \u003d \"^([0-9]|[1-9][0-9]|100)$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs a {@code marks}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @param mark A valid number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Marks(String mark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(mark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        checkArgument(isValidMarks(mark), MESSAGE_MARKS_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        value \u003d mark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns true if a given string is a valid mark number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static boolean isValidMarks(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return test.matches(MARKS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                || (other instanceof Marks // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 value.equals(((Marks) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grade/ScoreList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Represents a scoreList in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class ScoreList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final Set\u003cTest\u003e scoreList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public ScoreList(Set\u003cTest\u003e scoreList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireAllNonNull(scoreList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.scoreList.addAll(scoreList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Set\u003cTest\u003e getScoreList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return Collections.unmodifiableSet(scoreList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean isSameList(ScoreList otherList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (otherList \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return otherList !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 otherList.getScoreList().equals(getScoreList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns true if both tests have the same identity and data fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!(other instanceof ScoreList)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ScoreList otherList \u003d (ScoreList) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return otherList.getScoreList().equals(getScoreList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return Objects.hash(scoreList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        builder.append(\" Score List \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        getScoreList().forEach(builder::append);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grade/Test.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Represents a Test in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class Test {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final TestName testName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final Marks marks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Test(TestName testName, Marks marks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireAllNonNull(testName, marks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testName \u003d testName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public TestName getTestName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return testName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Marks getMarks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return marks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean isSameTest(Test otherTest) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (otherTest \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return otherTest !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 otherTest.getTestName().equals(getTestName())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 (otherTest.getMarks().equals(getMarks()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns true if both groups have the same identity and data fields."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!(other instanceof Test)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Test otherTest \u003d (Test) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return otherTest.getTestName().equals(getTestName())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 otherTest.getMarks().equals(getMarks());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return Objects.hash(testName, marks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        builder.append(getTestName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .append(\" Test Name: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .append(getMarks())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .append(\" Marks: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/grade/TestName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.grade;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Represents a TestName in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class TestName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_TEST_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \" Test names should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            + \"certain characters such as \u0027[\u0027, \u0027]\u0027 and \u0027-\u0027 and should it not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String TEST_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public final String testName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs a {@code TestName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @param testName A valid number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public TestName(String testName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(testName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        checkArgument(isValidTestName(testName), MESSAGE_TEST_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testName \u003d testName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns true if a given string is a valid test name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static boolean isValidTestName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return test.matches(TEST_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return testName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                || (other instanceof TestName // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 testName.equals(((TestName) other).testName)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return testName.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/AddGroup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Represents persons to be added to a group in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroup {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String COLON_SEPARATOR \u003d \" : \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Index groupIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Set\u003cIndex\u003e personIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    //Data Fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Set\u003cGroup\u003e groupSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public AddGroup(Index groupIndex, Set\u003cIndex\u003epersonIndices) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireAllNonNull(groupIndex, personIndices);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupIndex \u003d groupIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.personIndices.addAll(personIndices);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Group getGroup() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupSet.iterator().next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Set\u003cPerson\u003e getPersonSet() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return personSet;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setGroupSet(List\u003cGroup\u003e group) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(group);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupSet.add(group.get(groupIndex.getZeroBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setPersonSet(List\u003cPerson\u003e person) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Index i : personIndices) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            personSet.add(person.get(i.getZeroBased()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Check if person index input by user is in range of what"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * is displayed on the person list panel."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param size"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean validPersonIndexSet(int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Index i : personIndices) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            if (i.getZeroBased() \u003e\u003d size) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Check if group index input by user is in range of what"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * is displayed on the group list panel."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param size"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean validGroupIndex(int size) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (groupIndex.getZeroBased() \u003e\u003d size) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof AddGroup // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 groupIndex.equals(((AddGroup) other).groupIndex) // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 personIndices.equals(((AddGroup) other).personIndices)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 personSet.equals(((AddGroup) other).personSet));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(groupIndex)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(COLON_SEPARATOR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        personIndices.forEach(builder::append);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/Group.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Represents a Group in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class Group {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String AT_LOCATION \u003d \" at location \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String WITH_TAGS \u003d \" with tags: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final GroupName groupName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final GroupLocation groupLocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    //Data Fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Set\u003cPerson\u003e persons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Group(GroupName groupName, GroupLocation groupLocation, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireAllNonNull(groupName, groupLocation, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupLocation \u003d groupLocation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupName getGroupName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupLocation getGroupLocation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupLocation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns an immutable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Set\u003cPerson\u003e getPersons() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return Collections.unmodifiableSet(persons);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds a single person"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param persons"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons(Person persons) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(persons);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.persons.add(persons);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds multiple persons"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param persons"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons(Set\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(persons);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if both groups of the same name, location and tags."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * This defines a weaker notion of equality between two groups."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean isSameGroup(Group otherGroup) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (otherGroup \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return otherGroup !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 otherGroup.getGroupName().equals(getGroupName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 otherGroup.getGroupLocation().equals(getGroupLocation())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 otherGroup.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if both groups have the same identity and data fields."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!(other instanceof Group)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group otherGroup \u003d (Group) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return otherGroup.getGroupName().equals(getGroupName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 otherGroup.getGroupLocation().equals(getGroupLocation())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 otherGroup.getTags().equals(getTags())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 otherGroup.getPersons().equals(getPersons());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(groupName)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(AT_LOCATION)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(groupLocation)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(WITH_TAGS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupLocation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Represents a Group\u0027s location in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGroupLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class GroupLocation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_GROUP_LOCATION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \"Group locations should only contain alphanumeric characters and \u0027-\u0027, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Allow user to input \u0027-\u0027 and alphanumeric characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String LOCATION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}\\\\-][\\\\p{Alnum}\\\\-]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public final String groupLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Constructs a {@code GroupLocation}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param groupLocation A valid group location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public GroupLocation(String groupLocation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(groupLocation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        checkArgument(isValidGroupLocation(groupLocation), MESSAGE_GROUP_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupLocation \u003d groupLocation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static boolean isValidGroupLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return test.matches(LOCATION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                || (other instanceof GroupLocation // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 groupLocation.equals(((GroupLocation) other).groupLocation)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 38,
      "rajdeepsh": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Represents a Group\u0027s Name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGroupName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class GroupName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_GROUP_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \"Group names should only contain alphanumeric characters, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Allows user to input alphanumeric, \u0027-\u0027, \u0027[\u0027 and \u0027]\u0027 characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GROUP_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}\\\\-\\\\[\\\\]][\\\\p{Alnum}\\\\-\\\\[\\\\]]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public final String groupName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Constructs a {@code GroupName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param groupName A valid group name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public GroupName(String groupName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(groupName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        checkArgument(isValidGroupName(groupName), MESSAGE_GROUP_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if a given string is a valid group name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static boolean isValidGroupName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return test.matches(GROUP_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                || (other instanceof GroupName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 groupName.equals(((GroupName) other).groupName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 43,
      "rajdeepsh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/GroupNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Tests that a {@code Group}\u0027s {@code GroupName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupNameContainsKeywordsPredicate implements Predicate\u003cGroup\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean test(Group group) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(group.getGroupName().groupName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof GroupNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 keywords.equals(((GroupNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/UniqueGroupList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * A list of groups that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * A group is considered unique by comparing using {@code Group#isSameGroup(Group)}. As such, adding and updating of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * groups uses Group#isSameGroup(Group) for equality so as to ensure that the group being added or updated is"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * unique in terms of all fields except its persons in the UniqueGroupList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * However, the removal of a Group uses Group#equals(Object) so"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * as to ensure that the group with exactly the same fields will be removed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * @see Group#isSameGroup(Group)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class UniqueGroupList implements Iterable\u003cGroup\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if the internal list contains an equivalent group as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean contains(Group toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameGroup);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if a specific group in the internal list contains at least one same person as the persons in the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * given argument."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean contains(AddGroup toCheck) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Group g : internalList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            if (g.isSameGroup(toCheck.getGroup())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                return contains(g, toCheck);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if the group in the given argument contains least one"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * same person as the persons in the given argument."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean contains(Group group, AddGroup toCheck) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireAllNonNull(group, toCheck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Person p : group.getPersons()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            for (Person p2 : toCheck.getPersonSet()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                if (p.equals(p2)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates a group in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * The group must not already exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void createGroup(Group toCreate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(toCreate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (contains(toCreate)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        internalList.add(toCreate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Removes the equivalent group from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * The group must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void remove(Group toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds persons to a group in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup(AddGroup toAdd) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addPersons(toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds persons to group in list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons(AddGroup toAdd) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group target \u003d toAdd.getGroup();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedGroup \u003d createEditedGroup(target, toAdd.getPersonSet());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new GroupNotFoundException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        internalList.set(index, editedGroup);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates a new group object to replace existing group"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param target Group object to be replaced"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param personSet"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Group createEditedGroup(Group target, Set\u003cPerson\u003e personSet) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireAllNonNull(target, personSet);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cTag\u003e editedGroupTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroupTagSet.addAll(target.getTags());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedGroup \u003d new Group (new GroupName(target.getGroupName().groupName),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new GroupLocation(target.getGroupLocation().groupLocation), editedGroupTagSet);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup.addPersons(target.getPersons());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup.addPersons(personSet);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return editedGroup;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Replaces the contents of this list with {@code groups}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code groups} must not contain duplicate groups."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setGroups(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        requireAllNonNull(groups);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!groupsAreUnique(groups)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new DuplicateGroupException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        internalList.setAll(groups);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ObservableList\u003cGroup\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Iterator\u003cGroup\u003e iterator() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                || (other instanceof UniqueGroupList // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueGroupList) other).internalList)); // state check"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if {@code groups} contains only unique groups."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private boolean groupsAreUnique(List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.size() - 1; i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c groups.size(); j++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                if (groups.get(i).isSameGroup(groups.get(j))) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Signals that the operation will result in duplicate Groups (Groups are considered duplicates if they have the same"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * fields with the exceptions of persons in group)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class DuplicateGroupException extends RuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public DuplicateGroupException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        super(\"Operation would result in duplicate groups\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Signals that the operation is unable to find the specified group."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Represents a Person\u0027s Gender in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isInputAccepted(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            \"Gender can input as \u0027M\u0027 or \\\"Male\\\" for Male and \u0027F\u0027 or \\\"Female\\\" for Female.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"It is not case sensitive but it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_MALE \u003d \"MALE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_FEMALE \u003d \"FEMALE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_ABBREVIATION_MALE \u003d \"M\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_ABBREVIATION_FEMALE \u003d \"F\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public final String gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Conducts an input check {@link #isInputAccepted(String)}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param gender A valid gender"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        checkArgument(isInputAccepted(gender), MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        gender \u003d inputTransform(gender);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Accepted Valid Strings are : \"MALE\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *                              \"FEMALE\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *                              \"M\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *                              \"F\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static boolean isInputAccepted(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String testInput \u003d input.toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        switch (testInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_MALE :"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_FEMALE :"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_ABBREVIATION_MALE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_ABBREVIATION_FEMALE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns a static string for the program to register Male or Female"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Program will determine Male via \"MALE\" string"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Program will determine Female via \"FEMALE\" string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static String inputTransform(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        input \u003d input.toUpperCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_MALE :"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_ABBREVIATION_MALE:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return VALID_GENDER_MALE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_FEMALE :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        case VALID_GENDER_ABBREVIATION_FEMALE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return VALID_GENDER_FEMALE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 gender.equals(((Gender) other).gender)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return gender.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Grade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \"grade should be \u003c\u003d 100\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String GRADE_VALIDATION_REGEX \u003d \"^([0-9]|[1-9][0-9]|100)$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs a {@code grade}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @param grade A valid grade number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        value \u003d grade;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns true if a given string is a valid grade number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return test.matches(GRADE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                || (other instanceof Grade // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 value.equals(((Grade) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Nationality.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Represents a Person\u0027s Nationality in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCountryCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class Nationality {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String MESSAGE_NATIONALITY_CONSTRAINT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            \"Country Code should only contain 2 UPPERCASE characters and valid. It should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * The regex follow closely to the ISO 3166-1 alpha-2 Country Code"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * It contain all the valid country code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String COUNTRY_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            \"^(AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    + \"ZM|ZW)$\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public final String nationality;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Constructs a {@code Nationality}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @param nationality A valid country."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Nationality(String nationality) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        requireNonNull(nationality);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        checkArgument(isValidCountryCode(nationality), MESSAGE_NATIONALITY_CONSTRAINT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Returns true if a given string is a valid nationality."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static boolean isValidCountryCode(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return input.matches(COUNTRY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return nationality;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                || (other instanceof Nationality // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 nationality.equals(((Nationality) other).nationality)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return nationality.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final Nationality nationality;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private final Grade grade;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final Map\u003cString, String\u003e scoresList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final Set\u003cTest\u003e testList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Person(Name name, Gender gender, Nationality nationality, Phone phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                  Email email, Address address, Grade grade, Set\u003cTag\u003e tags, Set\u003cTest\u003e testList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        requireAllNonNull(name, gender, nationality, phone, email, address, grade, tags, testList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testList.addAll(testList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Nationality getNationality() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return nationality;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Map\u003cString, String\u003e getScoresList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return Collections.unmodifiableMap(scoresList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Set\u003cTest\u003e getTests() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return Collections.unmodifiableSet(testList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(getGender())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 otherPerson.getNationality().equals(getNationality())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 otherPerson.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 otherPerson.getTests().equals(getTests());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return Objects.hash(name, gender, nationality, phone, email, address, grade, tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(\" Nationality: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(getNationality())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .append(\" Grade: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .append(getGrade())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 31,
      "Tsuweiquan": 25,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/scorelist/exceptions/DuplicateScoreException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.scorelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Signals that the operation will result in duplicate SCORES (Scores are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class DuplicateScoreException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public DuplicateScoreException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        super(\"Operation would result in duplicate scores\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/scorelist/exceptions/ScoreNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.scorelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * Signals that the operation is unable to find the specified score."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class ScoreNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/script/CommandType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.model.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Represents a CommandType."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCommand(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class CommandType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "            \"Command string is not valid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_VALIDATION_REGEX \u003d \"^(add|a|addgroup|addgrp|add_testmarks|addt|clear|c|\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"creategroup|cg|delete|d|distinto|di|edit|e|edit_test|et|sendmail|sm|exit|ex|find|f|genlist|\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": "            + \"gl|display|disp|help|h|history|his|list|l|listgroup|lg|redo|r|select|s|undo|u)$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Constructs a {@code CommandType}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @param commandType A type of command to be executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public CommandType(String commandType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(commandType);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "        checkArgument(isValidCommand(commandType), MESSAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "        value \u003d commandType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Returns true if a given string is a valid message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static boolean isValidCommand(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return test.matches(MESSAGE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "                || (other instanceof CommandType // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "                \u0026\u0026 value.equals(((CommandType) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/script/TextFile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.model.script;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Represents a text file name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTextFile(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class TextFile {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_MESSAGE_CONSTRAINTS \u003d \"Text file name contains invalid characters\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String MESSAGE_VALIDATION_REGEX \u003d \"^[^\\\"\u003c\u003e?/:*\\\\s]+$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Constructs a {@code TextFile}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @param textFile A command to be executed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public TextFile(String textFile) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "        requireNonNull(textFile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "        checkArgument(isValidTextFile(textFile), MESSAGE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "        value \u003d textFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Returns true if a given string is a valid text file name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static boolean isValidTextFile(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return test.matches(MESSAGE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public String getTextFile() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "                || (other instanceof TextFile // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "                \u0026\u0026 value.equals(((TextFile) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Calculator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import static java.lang.Math.max;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * calculate the values we used for gradesummary and scorefilter command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class Calculator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * calculate the mean values of student\u0027s scores."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int calculateMean(ObservableList\u003cPerson\u003e personList) { //calculate the mean score of a test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            sum +\u003d Integer.parseInt(personList.get(i).getGrade().value); //string to integer then calculate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int mean \u003d sum / personList.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return mean;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * find the highest score from student\u0027s scores."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int findHighest(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int maximum \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            int currentVal \u003d Integer.parseInt(personList.get(i).getGrade().value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            maximum \u003d max(currentVal, maximum);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return maximum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * find the top 25 percent student\u0027s name and scores."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public ArrayList\u003cPerson\u003e find25th(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e sortedList \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                new ArrayList\u003cPerson\u003e(SortGrade.bubbleSort(personList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        personList.size()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e theList \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int getListSize \u003d sortedList.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        double get25th \u003d getListSize * 0.75;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int person25th \u003d (int) Math.floor(get25th);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(\"25TH\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(sortedList.get(person25th));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (int i \u003d person25th; i \u003c sortedList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            theList.add(sortedList.get(i));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            System.out.println(sortedList.get(i).getName() + \" \" + sortedList.get(i).getGrade());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(\"TheList\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(theList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return theList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * find the last 25 percent student\u0027s name and scores."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public ArrayList\u003cPerson\u003e find75th(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e sortedList \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                new ArrayList\u003cPerson\u003e(SortGrade.bubbleSort(personList, personList.size()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e theList \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int getListSize \u003d sortedList.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        double get75th \u003d getListSize * 0.25;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int person75th \u003d (int) Math.floor(get75th);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(\"75TH\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(sortedList.get(person75th));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (int i \u003d 0; i \u003c person75th; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            theList.add(sortedList.get(i));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            System.out.println(sortedList.get(i).getName() + \" \" + sortedList.get(i).getGrade());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(\"TheList\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(theList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return theList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * find the median of student\u0027s scores."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public int calculateMedian(ObservableList\u003cPerson\u003e personList) { //calculate the mean score of a test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int median \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e sortedList \u003d new ArrayList\u003cPerson\u003e(SortGrade"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .bubbleSort(personList, personList.size()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int size \u003d sortedList.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int index \u003d (size / 2) - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (size % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            median \u003d (Integer.parseInt(sortedList.get(index).getGrade().value)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    + Integer.parseInt(sortedList.get(index + 1).getGrade().value)) / 2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            median \u003d Integer.parseInt(sortedList.get(index + 1).getGrade().value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        System.out.println(median);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return median;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Marks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.TestName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e test \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        test.add(new Test(new TestName(\"a\"), new Marks(\"1\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Gender(\"Male\"), new Nationality(\"SG\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Grade(\"100\"), getTagSet(\"friends\"), test),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Gender(\"Female\"), new Nationality(\"SG\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Grade(\"100\"), getTagSet(\"colleagues\", \"friends\"), test),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Gender(\"F\"), new Nationality(\"AU\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Grade(\"100\"), getTagSet(\"neighbours\"), test),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            new Person(new Name(\"David Li\"), new Gender(\"M\"), new Nationality(\"CN\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Address(\"Blk 436 Seran\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                            + \"on Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Grade(\"100\"), getTagSet(\"family\"), test),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahi\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    + \"m\"), new Gender(\"Male\"), new Nationality(\"MY\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Grade(\"100\"), getTagSet(\"classmates\"), test),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Gender(\"M\"), new Nationality(\"IN\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    new Grade(\"100\"), getTagSet(\"colleagues\"), test)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static Group[] getSampleGroups() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new Group[] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"CS2113\"), new GroupLocation(\"LT15\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"java\", \"friday\", \"4pm\", \"afternoon\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"CS2040C\"), new GroupLocation(\"LT15\"), getTagSet(\"cpp\", \"tuesday\", \"5pm\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"MA1508\"), new GroupLocation(\"E1-01-01\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"maths\", \"linear\", \"wednesday\", \"2pm\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"CG2027\"), new GroupLocation(\"E2-02-02\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"circuits\", \"monday\", \"12pm\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"TUT[01]\"), new GroupLocation(\"E3-03-03\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"MA1501\", \"monday\", \"6pm\", \"night\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"TUT[02]\"), new GroupLocation(\"LT12\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"physics\", \"thursday\", \"8am\", \"morning\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"TUT[03]\"), new GroupLocation(\"LT12\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"physics\", \"thursday\", \"10am\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"TUT[04]\"), new GroupLocation(\"LT12\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"physics\", \"thursday\", \"12pm\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new Group(new GroupName(\"TUT[05]\"), new GroupLocation(\"LT12\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    getTagSet(\"physics\", \"thursday\", \"4pm\")),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Group sampleGroup : getSampleGroups()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            sampleAb.createGroup(sampleGroup);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns a person set containing the list of person given."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static Set\u003cPerson\u003e getPersonSet(Person... persons) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Person p : persons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            personSet.add(p);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return personSet;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Returns a test set containing the list of test given."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static Set\u003cTest\u003e getTestsSet(Test... tests) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Set\u003cTest\u003e testSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (Test t : tests) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            testSet.add(t);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return testSet;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 34,
      "Tsuweiquan": 16,
      "-": 50,
      "rajdeepsh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SortGrade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "//import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "//import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * sort student in ascending order by scores."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class SortGrade { //from lowest to highest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * sort student in ascending order by their scores."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public ArrayList\u003cPerson\u003e sortingFromLowesttoHighest(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e pList \u003d new ArrayList\u003c\u003e(bubbleSort(personList, personList.size()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        //System.out.println(pList.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return pList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * implement bubblesort function."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static ArrayList\u003cPerson\u003e bubbleSort(ObservableList\u003cPerson\u003e list, int n) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        ArrayList\u003cPerson\u003e personList \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (int i \u003d 0; list.size() \u003e i; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            personList.add(list.get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Person temp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (i \u003d 0; i \u003c n - 1; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            //swapped \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            for (j \u003d 0; j \u003c n - i - 1; j++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                if (Integer.parseInt(personList.get(j).getGrade().value)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        \u003e Integer.parseInt(personList.get(j + 1).getGrade().value)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    // swap arr[j] and arr[j+1]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    temp \u003d personList.get(j);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    personList.set(j, personList.get(j + 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    personList.set(j + 1, temp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    // swapped \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            // if (swapped \u003d\u003d false)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            //     break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return personList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 65,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedGroup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * JAXB-friendly version of the Group."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class XmlAdaptedGroup {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private String groupName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private String groupLocation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Constructs an XmlAdaptedGroup."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public XmlAdaptedGroup() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Constructs an {@code XmlAdaptedGroup} with the given group details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public XmlAdaptedGroup(String groupName, String groupLocation,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                           List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupLocation \u003d groupLocation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (persons !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            this.persons \u003d new ArrayList\u003c\u003e(persons);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Converts a given group into this class for JAXB use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedGroup"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public XmlAdaptedGroup(Group source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupName \u003d source.getGroupName().groupName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupLocation \u003d source.getGroupLocation().groupLocation;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        persons \u003d source.getPersons().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(XmlAdaptedPerson::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Converts this jaxb-friendly adapted group object into the model\u0027s Group object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted group"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Group toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final List\u003cTag\u003e groupTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final List\u003cPerson\u003e groupPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (XmlAdaptedPerson person : persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupPersons.add(person.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (groupName \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    GroupName.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!GroupName.isValidGroupName(groupName)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new IllegalValueException(GroupName.MESSAGE_GROUP_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final GroupName modelGroupName \u003d new GroupName(groupName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (groupLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    GroupLocation.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!GroupLocation.isValidGroupLocation(groupLocation)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new IllegalValueException(GroupLocation.MESSAGE_GROUP_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final GroupLocation modelGroupLocation \u003d new GroupLocation(groupLocation);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(groupTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final Set\u003cPerson\u003e modelPersons \u003d new HashSet\u003c\u003e(groupPersons);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new Group(modelGroupName, modelGroupLocation, modelTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.addPersons(modelPersons);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!(other instanceof XmlAdaptedGroup)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup otherGroup \u003d (XmlAdaptedGroup) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return Objects.equals(groupName, otherGroup.groupName)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 Objects.equals(groupLocation, otherGroup.groupLocation)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 tagged.equals(otherGroup.tagged)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 persons.equals(otherGroup.persons);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private String nationality;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @XmlElementWrapper(name \u003d \"scoreList\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @XmlElement(name \u003d \"test\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private List\u003cXmlAdaptedTest\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedPerson(String name, String gender, String nationality, String phone, String email, String address,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                            String grade, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedTest\u003e tests) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationality \u003d nationality;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (tests !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.tests \u003d new ArrayList\u003c\u003e(tests);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        gender \u003d source.getGender().gender;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        nationality \u003d source.getNationality().nationality;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        grade \u003d source.getGrade().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        tests \u003d source.getTests().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .map(XmlAdaptedTest::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!Gender.isInputAccepted(gender)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        final Gender modelGender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (nationality \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                    Nationality.class.getSimpleName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        if (!Nationality.isValidCountryCode(nationality)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new IllegalValueException(Nationality.MESSAGE_NATIONALITY_CONSTRAINT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        final Nationality modelNationality \u003d new Nationality(nationality);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (grade \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!Grade.isValidGrade(grade)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final Grade modelGrade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final List\u003cTest\u003e personTests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (XmlAdaptedTest test : tests) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            personTests.add(test.toModelType());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final Set\u003cTest\u003e modelTests \u003d new HashSet\u003c\u003e(personTests);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new Person(modelName, modelGender, modelNationality, modelPhone,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                modelEmail, modelAddress, modelGrade, modelTags, modelTests);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 Objects.equals(gender, otherPerson.gender)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 Objects.equals(nationality, otherPerson.nationality)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                \u0026\u0026 Objects.equals(grade, otherPerson.grade)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 tests.equals(otherPerson.tests);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 36,
      "Tsuweiquan": 37,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedScoreList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.ScoreList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * JAXB-friendly version of the test scores."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class XmlAdaptedScoreList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private List\u003cXmlAdaptedTest\u003e scoreList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs an XmlAdaptedscoreList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedScoreList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs a {@code XmlAdaptedscoreList} with the given {@code tagName}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedScoreList(List\u003cXmlAdaptedTest\u003e testList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (testList !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            this.scoreList \u003d new ArrayList\u003c\u003e(testList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Converts a given scoreList into this class for JAXB use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedScoreList(ScoreList source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        scoreList \u003d source.getScoreList().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .map(XmlAdaptedTest::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public ScoreList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final List\u003cTest\u003e scoreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        for (XmlAdaptedTest test : scoreList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            scoreListTest.add(test.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        final Set\u003cTest\u003e modelTest \u003d new HashSet\u003c\u003e(scoreListTest);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new ScoreList(modelTest);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!(other instanceof XmlAdaptedScoreList)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return scoreList.equals(((XmlAdaptedScoreList) other).scoreList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public XmlAdaptedTag() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Marks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.TestName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * JAXB-friendly version of the test scores."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class XmlAdaptedTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Score\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private String testName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private String marks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs an XmlAdaptedTest."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Constructs an {@code XmlAdaptedGroup} with the given group details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedTest(String testname, String scores) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.testName \u003d testname;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.marks \u003d scores;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Converts a given group into this class for JAXB use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedGroup"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public XmlAdaptedTest(Test source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        testName \u003d source.getTestName().testName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        marks \u003d source.getMarks().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Converts this jaxb-friendly adapted Test object into the model\u0027s Test object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted group"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public Test toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (testName \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    TestName.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!TestName.isValidTestName(testName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new IllegalValueException(TestName.MESSAGE_TEST_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        TestName modelTestName \u003d new TestName(testName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (marks \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    Marks.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!Marks.isValidMarks(marks)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            throw new IllegalValueException(Marks.MESSAGE_MARKS_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        Marks modelMarks \u003d new Marks(marks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new Test(modelTestName, modelMarks);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        if (!(other instanceof XmlAdaptedTest)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        XmlAdaptedTest otherTest \u003d (XmlAdaptedTest) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return Objects.equals(testName, otherTest.testName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 Objects.equals(marks, otherTest.marks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Groups list contains duplicate groups(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private List\u003cXmlAdaptedGroup\u003e groups;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groups.addAll(src.getGroupList().stream().map(XmlAdaptedGroup::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code XmlAdaptedPerson} or {@code XmlAdaptedGroup}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (XmlAdaptedGroup g : groups) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            Group group \u003d g.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            if (addressBook.hasGroup(group)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            addressBook.createGroup(group);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 groups.equals(((XmlSerializableAddressBook) other).groups);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 69,
      "rajdeepsh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/scripts/ScriptSetup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.storage.scripts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.ValidCommandList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Load the and add default scripts into in the default directory of the Application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ScriptSetup {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String ADD_GROUPS_FILE \u003d \"AddGroups.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String ADD_PERSONS_FILE \u003d \"AddPersons.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ScriptSetup.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private String defaultLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public ScriptSetup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "        this.defaultLocation \u003d FileUtil.getRootLocation();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Creates a script folder and add some sample text files if folder is missing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * @param scriptFolder is the directory of the script folder"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void execute(String scriptFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Path scriptPath \u003d FileUtil.getPath(defaultLocation + scriptFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "        boolean isScriptFolderPresent \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "            isScriptFolderPresent \u003d FileUtil.createFolder(scriptPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "            logger.info(scriptPath + \" is not a valid directory \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "                    + \"and a default script folder will be automatically generated\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "        if (!isScriptFolderPresent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "            addSampleTextFiles(scriptFolder, defaultLocation);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "     * Add some sample text files"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void addSampleTextFiles(String scriptFolder, String defaultLocation) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "        File file \u003d new File(defaultLocation + scriptFolder + ADD_PERSONS_FILE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "        File file2 \u003d new File(defaultLocation + scriptFolder + ADD_GROUPS_FILE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "            FileUtil.writeToTextFile(file, ValidCommandList.getAddCommand());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "            FileUtil.writeToTextFile(file2, ValidCommandList.getGroupCommand());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": "            logger.info(\"Sample Text cannot be created\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public String getDefaultLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "novin997"
        },
        "content": "        return this.defaultLocation;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void loadGroupPage(Group group) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + group.getGroupName().groupName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void handleGroupPanelSelectionChangedEvent(GroupPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        loadGroupPage(event.getNewSelection());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "rajdeepsh": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayGrade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " * The UI Component to the Attendance List."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "public class DisplayGrade extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private static final String FXML \u003d \"DisplayGrade.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private ObservableList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private TableView\u003cPerson\u003e personTable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private TableColumn\u003cPerson, String\u003e nameColumn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private TableColumn\u003cPerson, String\u003e gradeColumn;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Create list to display person and grades."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public DisplayGrade(ArrayList\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        this.persons \u003d FXCollections.observableArrayList(persons); //convert arraylist to observableArraylist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Setup the Stage for grade List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public DisplayGrade(Stage newStage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        super(FXML, newStage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        newStage.setMaximized(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        newStage.show();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     * Using ObservableList to generate the grade List."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public void generateGradeList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        personTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        // Initialize the person table with all the data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"name\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        gradeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"grade\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        personTable.setItems(persons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * An UI component that displays information of a {@code Group}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String FXML \u003d \"GroupListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public final Group group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Label groupName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Label groupLocation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupCard(Group group, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.group \u003d group;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupName.setText(group.getGroupName().groupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupLocation.setText(group.getGroupLocation().groupLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        initTags(group);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Creates the tag labels for {@code group}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void initTags(Group group) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!(other instanceof GroupCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCard card \u003d (GroupCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 group.equals(card.group);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Panel containing the list of groups."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String FXML \u003d \"GroupListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private ListView\u003cGroup\u003e groupListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        setConnections(groupList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void setConnections(ObservableList\u003cGroup\u003e groupList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListView.setItems(groupList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        raise(new GroupPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Scrolls to the {@code GroupCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void handleJumpToGroupListRequestEvent(JumpToGroupListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Group} using a {@code GroupCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    class GroupListViewCell extends ListCell\u003cGroup\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        protected void updateItem(Group group, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            super.updateItem(group, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            if (empty || group \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                setGraphic(new GroupCard(group, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/GroupPersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Panel containing the list of persons in groups."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupPersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String FXML \u003d \"GroupPersonListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GroupPersonListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private ListView\u003cPerson\u003e groupPersonListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupPersonListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Displays list of person(s) in group selected"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @param group"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void loadGroupPersons(Group group) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ObservableList\u003cPerson\u003e personObservableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Person p: group.getPersons()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            personObservableList.add(p);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupPersonListView.setItems(personObservableList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupPersonListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void handleGroupPanelSelectionChangedEvent(GroupPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        loadGroupPersons(event.getNewSelection());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private GroupListPanel groupListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private GroupPersonListPanel groupPersonListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private StackPane groupListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private StackPane groupPersonListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupPersonListPanel \u003d new GroupPersonListPanel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupPersonListPanelPlaceholder.getChildren().add(groupPersonListPanel.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                logic.getFilteredPersonList().size(), logic.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupListPanel getGroupListPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupListPanel;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupPersonListPanel getGroupPersonListPanel() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupPersonListPanel;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 2,
      "-": 202,
      "rajdeepsh": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Label nationality;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        gender.setText(person.getGender().gender);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        nationality.setText(person.getNationality().nationality);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        grade.setText(person.getGrade().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Creates the tag labels for {@code person}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 22,
      "clara1234566": 3,
      "Tsuweiquan": 7,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String LIST_ORDER \u003d \"panel order: students  |  groups  |  students in selected group\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String TOTAL_PERSONS_GROUPS_STATUS \u003d \"%d student(s) total  |  %d group(s) total    \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private StatusBar listOrder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private StatusBar totalPersonsGroupsStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public StatusBarFooter(Path saveLocation, int totalPersons, int totalGroups) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        setListOrder(LIST_ORDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        setTotalPersonsGroups(totalPersons, totalGroups);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void setListOrder(String listOrder) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Platform.runLater(() -\u003e this.listOrder.setText(listOrder));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void setTotalPersonsGroups(int totalPersons, int totalGroups) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Platform.runLater(() -\u003e totalPersonsGroupsStatus"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .setText(String.format(TOTAL_PERSONS_GROUPS_STATUS, totalPersons, totalGroups)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        setTotalPersonsGroups(abce.data.getPersonList().size(), abce.data.getGroupList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 4,
      "-": 81,
      "rajdeepsh": 16
    }
  },
  {
    "path": "src/main/resources/view/AttendanceStage.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root maximized\u003d\"false\" title\u003d\"Attendance List\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cAnchorPane id\u003d\"AnchorPane\" maxHeight\u003d\"1000\" maxWidth\u003d\"1000\" minHeight\u003d\"200\" minWidth\u003d\"200\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                        prefHeight\u003d\"288.0\" prefWidth\u003d\"293.0\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cTableView fx:id\u003d\"personTable\" layoutX\u003d\"35.0\" layoutY\u003d\"28.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"227.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                               AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"200\" text\u003d\"Name\" fx:id\u003d\"nameColumn\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"300\" text\u003d\"Address\" fx:id\u003d\"addressColumn\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"300\" text\u003d\"Email\" fx:id\u003d\"emailColumn\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"100\" text\u003d\"Phone\" fx:id\u003d\"phoneColumn\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"200\" text\u003d\"attendance\" fx:id\u003d\"attendance\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/columns\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0176882"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 40,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/DisplayGrade.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003cfx:root maximized\u003d\"false\" title\u003d\"grade table\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003cAnchorPane id\u003d\"AnchorPane\" maxHeight\u003d\"1000\" maxWidth\u003d\"1000\" minHeight\u003d\"200\" minWidth\u003d\"200\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        prefHeight\u003d\"288.0\" prefWidth\u003d\"293.0\" xmlns:fx\u003d\"http:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        //javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u003cTableView fx:id\u003d\"personTable\" layoutX\u003d\"35.0\" layoutY\u003d\"28.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"227.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                               AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"300\" text\u003d\"Name\" fx:id\u003d\"nameColumn\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                            \u003cTableColumn prefWidth\u003d\"300\" text\u003d\"scores\" fx:id\u003d\"gradeColumn\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                        \u003c/columns\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "clara1234566": 32
    }
  },
  {
    "path": "src/main/resources/view/GroupListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u003cLabel fx:id\u003d\"groupName\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cLabel fx:id\u003d\"groupLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$groupLocation\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 33
    }
  },
  {
    "path": "src/main/resources/view/GroupListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cListView fx:id\u003d\"groupListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 7
    }
  },
  {
    "path": "src/main/resources/view/GroupPersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cListView fx:id\u003d\"groupPersonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "          \u003cVBox fx:id\u003d\"groupList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cStackPane fx:id\u003d\"groupListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "          \u003cVBox fx:id\u003d\"groupPersonList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            \u003cStackPane fx:id\u003d\"groupPersonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "rajdeepsh": 16
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "      \u003cLabel fx:id\u003d\"nationality\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nationality\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "      \u003cLabel fx:id\u003d\"grade\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$grade\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 1,
      "Tsuweiquan": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"listOrder\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"totalPersonsGroupsStatus\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"3\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidGroupAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c!-- Valid Group --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged isPrivate\u003d\"false\"\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c!-- Group with invalid groupLocation field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1/01/01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged isPrivate\u003d\"false\"\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 15
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidGroupAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c!-- Group with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]*\u003c/groupName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged isPrivate\u003d\"false\"\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 9
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateGroupAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged isPrivate\u003d\"false\"\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c!-- Group with same identity as TUT[1] --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged isPrivate\u003d\"false\"\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 4,
      "-": 20,
      "rajdeepsh": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidGroupAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c!-- Group with an invalid groupLocation field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation\u003eE1/01/01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 9
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 10,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalGroupsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003emorning\u003c/tagged\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eCS1010\u003c/groupName\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation\u003eVCR\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003enight\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[2]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation\u003eE2-02-02\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[3]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation\u003eE3-03-03\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003eafternoon\u003c/tagged\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[4]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation\u003eE4-04-04\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003emorning\u003c/tagged\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003eafternoon\u003c/tagged\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 28
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eMY\u003c/nationality\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e1\u003c/grade\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e22\u003c/grade\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e30\u003c/grade\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e42\u003c/grade\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e99\u003c/grade\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 14,
      "-": 50,
      "rajdeepsh": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidGroupField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c!-- Group with an invalid groupLocation field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003cgroups\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroupLocation\u003eE1-01-01*\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003ctagged\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgender\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/groups\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 17
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    \u003cnationality\u003eUK\u003c/nationality\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003cscoreList\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003ctest\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003ctestName\u003eCS2113quiz\u003c/testName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003cmarks\u003e77\u003c/marks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003c/test\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003c/scoreList\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 6,
      "Tsuweiquan": 2,
      "-": 9,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingGroupField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c!-- Group with an missing groupName field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003cgroups\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroupLocation\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003ctagged\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgender\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/groups\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 16
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    \u003cnationality\u003eUK\u003c/nationality\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003cscoreList\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003ctest\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003ctestName\u003eCS2113quiz\u003c/testName\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003cmarks\u003e77\u003c/marks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003c/test\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003c/scoreList\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 6,
      "Tsuweiquan": 2,
      "-": 8,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e10\u003c/grade\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e1\u003c/grade\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e20\u003c/grade\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e22\u003c/grade\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e33\u003c/grade\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e44\u003c/grade\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e56\u003c/grade\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        \u003cnationality isPrivate\u003d\"false\"\u003eUS\u003c/nationality\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade isPrivate\u003d\"false\"\u003e99\u003c/grade\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[2]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE2-02-02\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eTUT[3]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE3-03-03\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eCS1010\u003c/groupName\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eSchoolOfComputing\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroups\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupName\u003eMA1501\u003c/groupName\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgroupLocation isPrivate\u003d\"false\"\u003eE1-01-03\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/groups\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 18,
      "-": 57,
      "rajdeepsh": 29
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validGroup.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003cgroups\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroupName\u003eTUT[1]\u003c/groupName\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgroupLocation\u003eE1-01-01\u003c/groupLocation\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003ctagged\u003emaths\u003c/tagged\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgender\u003eFEMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cnationality\u003eSG\u003c/nationality\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c/groups\u003e"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 16
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    \u003cgender\u003eMALE\u003c/gender\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    \u003cnationality\u003eUK\u003c/nationality\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    \u003cgrade\u003e100\u003c/grade\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003cscoreList\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003ctest\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003ctestName\u003eCS2113quiz\u003c/testName\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            \u003cmarks\u003e77\u003c/marks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        \u003c/test\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    \u003c/scoreList\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 6,
      "Tsuweiquan": 2,
      "-": 8,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GroupCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Provides a handle to a group card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String GROUP_NAME_FIELD_ID \u003d \"#groupName\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String GROUP_LOCATION_FIELD_ID \u003d \"#groupLocation\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Label groupNameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final Label groupLocationLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupNameLabel \u003d getChildNode(GROUP_NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupLocationLabel \u003d getChildNode(GROUP_LOCATION_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String getGroupName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupNameLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String getGroupLocation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupLocationLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if this handle contains {@code group}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean equals(Group group) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getGroupName().equals(group.getGroupName().groupName)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 getGroupLocation().equals(group.getGroupLocation().groupLocation)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(group.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 80
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GroupListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Provides a handle for {@code GroupListPanel} containing the list of {@code GroupCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupListPanelHandle extends NodeHandle\u003cListView\u003cGroup\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_LIST_VIEW_ID \u003d \"#groupListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Optional\u003cGroup\u003e lastRememberedSelectedGroupCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupListPanelHandle(ListView\u003cGroup\u003e groupListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        super(groupListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns a handle to the selected {@code GroupCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e selectedGroupList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (selectedGroupList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"Group list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(GroupCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedGroupList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Navigates the listview to display {@code group}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void navigateToCard(Group group) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (!getRootNode().getItems().contains(group)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new IllegalArgumentException(\"Group does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            getRootNode().scrollTo(group);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Selects the {@code GroupCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the group card handle of a group associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupCardHandle getGroupCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(GroupCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .filter(handle -\u003e handle.equals(getGroup(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Group getGroup(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Remembers the selected {@code GroupCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void rememberSelectedGroupCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            lastRememberedSelectedGroupCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            lastRememberedSelectedGroupCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if the selected {@code GroupCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean isSelectedGroupCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return lastRememberedSelectedGroupCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return !lastRememberedSelectedGroupCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    || !lastRememberedSelectedGroupCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 160
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final GroupListPanelHandle groupListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListPanel \u003d new GroupListPanelHandle(getChildNode(GroupListPanelHandle.GROUP_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupListPanelHandle getGroupListPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return groupListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "rajdeepsh": 6
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private static final String GRADE_FIELD_ID \u003d \"#grade\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private final Label gradeLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        gradeLabel \u003d getChildNode(GRADE_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return gradeLabel.getText();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                .collect(Collectors.toList())))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                \u0026\u0026 getGrade().equals(person.getGrade().value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 10,
      "clara1234566": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String TOTAL_PERSONS_GROUPS_STATUS_ID \u003d \"#totalPersonsGroupsStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final StatusBar totalPersonsGroupsStatusNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private String lastRememberedTotalPersonsGroupsStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        totalPersonsGroupsStatusNode \u003d getChildNode(TOTAL_PERSONS_GROUPS_STATUS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the text of the \u0027total persons and total groups\u0027 portion of the status bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public String getTotalPersonsGroupsStatus() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return totalPersonsGroupsStatusNode.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Remembers the content of the \u0027total persons and total groups\u0027 portion of the status bar."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void rememberTotalPersonsGroupsStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        lastRememberedTotalPersonsGroupsStatus \u003d getTotalPersonsGroupsStatus();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns true if the current content of the \u0027total persons and total groups\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * is different from the value remembered by the most"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * recent {@code rememberTotalPersonsGroupsStatus()} call."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public boolean isTotalPersonsGroupsStatusChanged() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return !lastRememberedTotalPersonsGroupsStatus.equals(getTotalPersonsGroupsStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 12,
      "-": 72,
      "rajdeepsh": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Student Management System\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String expected \u003d Index.fromOneBased(5).toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String actual \u003d \"[5]\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String actual2 \u003d \"[6]\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same string (\u003d)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different string (!\u003d)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertNotEquals(expected, actual2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final Index sixthPersonIndex \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e expected \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e actual \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e actual2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expected.add(fifthPersonIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expected.add(sixthPersonIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        actual.add(fifthPersonIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        actual.add(sixthPersonIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same set"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different set"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertNotEquals(expected, actual2);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "rajdeepsh": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/DistributeUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.util.DistributeUtil.GROUP_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_FLAG_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_FEMALE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.model.person.Gender.VALID_GENDER_MALE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersonNationalityMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeUtilTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private ObservableList\u003cPerson\u003e allPersons \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private DistributeUtil distUtil \u003d new DistributeUtil();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private ObservableList\u003cPerson\u003e setUpObservableListStub() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddressBook stubAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        UserPrefs stubUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Model model \u003d new ModelManager(stubAddressBook, stubUserPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allPersonStub \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return allPersonStub;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void shuffleTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Random stubSeed \u003d new Random(96259561);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e allPersonList \u003d new LinkedList\u003c\u003e(allPersons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Collections.shuffle(allPersonList, stubSeed);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertTrue(distUtil.shuffle(allPersonList, stubSeed).equals(allPersonList));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Test when the seed is null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.shuffle(allPersonList, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Test when LinkList is null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.shuffle(null, stubSeed));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //if the allperson list is empty"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        allPersonList.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Collections.shuffle(allPersonList, stubSeed);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertTrue(distUtil.shuffle(allPersonList, stubSeed).equals(allPersonList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void createNationalityMapTest() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //create a stub"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void findPersonTest() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allPersonsStub \u003d setUpObservableListStub();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e allPersonLlStub \u003d new LinkedList\u003c\u003e(allPersonsStub);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Nationality sgNationality \u003d new Nationality(\"SG\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Person actualPerson \u003d distUtil.findPerson(sgNationality, allPersonLlStub);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Testing if nationality is null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.findPerson(null, allPersonLlStub));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Testing if LinkedList is null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.findPerson(sgNationality, null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // testing if it return the first person it found with SG nationality"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(ALICE, actualPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // testing that it should not be equal since daniel is the 2nd person with SG"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertNotEquals(DANIEL, actualPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //remove ALICE and check if it is able to find DANIEL now."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        allPersonLlStub.removeFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        actualPerson \u003d distUtil.findPerson(sgNationality, allPersonLlStub);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(DANIEL, actualPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // testing if there is no person with SK nationality is not found"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Nationality skNationality \u003d new Nationality(\"SK\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        actualPerson \u003d distUtil.findPerson(skNationality, allPersonLlStub);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertNull(actualPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void numberOfDifferentNationalityTest() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allPersonsStub \u003d setUpObservableListStub();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e allPersonLlStub \u003d new LinkedList\u003c\u003e(allPersonsStub);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e actualMap \u003d distUtil.numberOfDifferentNationality(allPersonLlStub);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e expectedMap \u003d getTypicalPersonNationalityMap();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Testing if LinkList is null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.numberOfDifferentNationality(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Comparing both object are the same."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedMap, actualMap);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //reduce SG nationality counter by 1."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e unexpectedMap \u003d expectedMap;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        unexpectedMap.replace(new Nationality(\"SG\"), Long.parseLong(\"3\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertNotEquals(unexpectedMap, actualMap);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Comparing Map value is different when there is and extra person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        unexpectedMap.replace(new Nationality(\"SG\"), Long.parseLong(\"4\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        unexpectedMap.put(new Nationality(\"IN\"), Long.parseLong(\"1\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertNotEquals(unexpectedMap, actualMap);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //empty person list which creates a empty map"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        allPersonLlStub.clear();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        actualMap \u003d distUtil.numberOfDifferentNationality(allPersonLlStub);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        expectedMap.clear();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedMap, actualMap);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void paxPerNationalityTest() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allPersonsStub \u003d setUpObservableListStub();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e allPersonLlStub \u003d new LinkedList\u003c\u003e(allPersonsStub);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e differentNationalityMap \u003d distUtil.numberOfDifferentNationality(allPersonLlStub);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e actualSortedMap \u003d distUtil.paxPerNationality(differentNationalityMap);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedResult \u003d \"{SG\u003d4, US\u003d2, MY\u003d1}\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Testing if Map is null"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.paxPerNationality(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //expects the map to be sorted in value order."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedResult, actualSortedMap.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Comparing the 2 map which are sorted by value. actual is sorted by value. unexpected is not sorted."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e unexpectedMap \u003d getTypicalPersonNationalityMap();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertNotEquals(unexpectedMap.toString(), actualSortedMap.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //empty person list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        allPersonLlStub.clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        differentNationalityMap \u003d distUtil.numberOfDifferentNationality(allPersonLlStub);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e actualEmptyMap \u003d distUtil.paxPerNationality(differentNationalityMap);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        expectedResult \u003d \"{}\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedResult, actualEmptyMap.toString());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void selectiveDistributionByGenderTest() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void selectiveDistributionByNationalityTest() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void filterGenderTest() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        ObservableList\u003cPerson\u003e allStubPerson \u003d setUpObservableListStub();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e allPerson \u003d new LinkedList\u003c\u003e(allStubPerson);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e actualGenderPersons \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.filterGender(allPerson, actualGenderPersons, VALID_GENDER_MALE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if LinkList for allPerson is null"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.filterGender(null,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                actualGenderPersons, VALID_GENDER_MALE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if LinkList for filteredGender is null"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.filterGender(allPerson,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                null, VALID_GENDER_MALE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if Gender String is null"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.filterGender(allPerson,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                actualGenderPersons, null));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //checks object if similar LinkList of all male persons"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(TypicalPersons.allMalePerson(), actualGenderPersons);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //checks object if similar LinkList of all female persons"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        actualGenderPersons.clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.filterGender(allPerson, actualGenderPersons, VALID_GENDER_FEMALE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(TypicalPersons.allFemalePerson(), actualGenderPersons);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Invalid Gender Parameter"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        actualGenderPersons.clear();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.filterGender(allPerson, actualGenderPersons, INVALID_GENDER_FLAG_WORD);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e expectedOutput \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedOutput, actualGenderPersons);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //empty person list with male filter"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        allPerson.clear();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.filterGender(allPerson, actualGenderPersons, VALID_GENDER_MALE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedOutput, actualGenderPersons);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void existDuplicateGroupTest() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void groupNameConcatenationTest() throws CommandException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedGroupName \u003d \"T13-04-04\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String actualGroupName \u003d distUtil.groupNameConcatenation(3, \"T13-04-0\", model);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // checks if the actual process will return me the same expectedGN"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedGroupName, actualGroupName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if group is null"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.groupNameConcatenation(1,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                null, model));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if model is null"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.groupNameConcatenation(1,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                expectedGroupName, null));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if index is negative"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        thrown.expectMessage(DistributeUtil.MESSAGE_INDEX_NEGATIVE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        distUtil.groupNameConcatenation(-1, expectedGroupName, model);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void doesGroupNameExistTest() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void groupBuilderTest() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if groupName is null"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.groupBuilder(null));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if creation of group is same as expected"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String groupName \u003d \"CS2113-T13-04\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group actualGroup \u003d distUtil.groupBuilder(groupName);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group expectedGroup \u003d new Group(new GroupName(groupName), new GroupLocation(GROUP_LOCATION), tags);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(expectedGroup, actualGroup);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void createGroupWithoutCommitTest() throws CommandException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if Group is null"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.createGroupWithoutCommit(null, model));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if model is null"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group expectedGroup \u003d new Group(new GroupName(\"TestGroup\"), new GroupLocation(\"UNKNOWN\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.createGroupWithoutCommit(expectedGroup, null));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void addPersonIntoGroupWithoutCommitTest() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if addGroup is null"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.addPersonIntoGroupWithoutCommit(null, model));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if model is null"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Group newGroup \u003d distUtil.groupBuilder();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //AddGroup expectedGroup \u003d new AddGroup(distUtil.returnGroupIndex(newGroup, model)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // , new HashSet\u003c\u003e().add(Index.fromZeroBased(3)));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e distUtil"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // .addPersonIntoGroupWithoutCommit(expectedGroup, null));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void returnGroupIndexTest() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if group is null"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.returnGroupIndex(null, model));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if model is null"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group testGroup \u003d distUtil.groupBuilder(\"testGroup\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e distUtil.returnGroupIndex(testGroup, null));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check is Index match with stub address book"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder().withGroupName(\"TUT[1]\").withGroupLocation(\"E1-01-01\")"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .withTags(\"morning\").build();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(distUtil.returnGroupIndex(expectedGroup, model), expectedIndex);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //check if index is 0 if no group is found."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        expectedIndex \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group missingGroup \u003d new GroupBuilder().withGroupName(\"TUT[1]\").withGroupLocation(\"E1-01-01\")"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .withTags(\"morning\").build();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(distUtil.returnGroupIndex(missingGroup, model), expectedIndex);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void distributeProcessTest() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 321
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.storage.ScriptSetupTest.SCRIPTS_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String TestMessage \u003d \"HelloWorld\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String helloWorldText \u003d \"HelloWorld\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String ReadOnlyFile \u003d \"ReadOnly\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String HelloWorldTest \u003d \"ScriptFiles/HelloWorld.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String TextExtension \u003d \".txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void writeToTextFile_success() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "        //By checking with a text file in another location, there seems to be a difference in length of the files"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "        //File helloWorldTestFile \u003d new File(classLoader.getResource(ScriptSetupTest.TEST_FILES_LOCATION"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // + helloWorldText + TextExtension).getFile());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "        File helloWorldTestFile \u003d new File(FileUtil.getRootLocation()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + SCRIPTS_LOCATION + helloWorldText + TextExtension);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "        File helloWorldFile \u003d new File(FileUtil.getRootLocation()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + SCRIPTS_LOCATION + helloWorldText + TextExtension);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "        FileUtil.writeToTextFile(helloWorldFile, TestMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "        boolean isTwoEqual \u003d FileUtils.contentEquals(helloWorldFile, helloWorldTestFile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(isTwoEqual, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void writeToTextFile_fail_throwException() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": "        File readOnlyFile \u003d new File(FileUtil.getRootLocation()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + TEST_FILES_LOCATION + ReadOnlyFile + TextExtension);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "novin997"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "novin997"
        },
        "content": "        thrown.expectMessage(\"File \u0027\" + readOnlyFile + \"\u0027 cannot be written to\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "novin997"
        },
        "content": "        FileUtil.writeToTextFile(readOnlyFile, TestMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 41,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.storage.XmlAdaptedGroup;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.storage.XmlAdaptedTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path MISSING_GROUP_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingGroupField.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path INVALID_GROUP_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGroupField.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path VALID_GROUP_FILE \u003d TEST_DATA_FOLDER.resolve(\"validGroup.xml\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_GROUP_LOCATION \u003d \"E1-01-01*\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final String VALID_GENDER \u003d \"MALE\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final String VALID_NATIONALITY \u003d \"UK\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GRADE \u003d \"100\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GROUP_NAME \u003d \"TUT[1]\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GROUP_LOCATION \u003d \"E1-01-01\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_GROUP_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"maths\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final List\u003cXmlAdaptedPerson\u003e VALID_PERSONS \u003d Collections.singletonList(new XmlAdaptedPerson(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private static final List\u003cXmlAdaptedTest\u003e VALID_TEST \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            Collections.singletonList(new XmlAdaptedTest(\"CS2113quiz\", \"77\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(5, dataFromFile.getGroupList().size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                null, VALID_GENDER, VALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TEST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_NATIONALITY, INVALID_PHONE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TEST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TEST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void xmlAdaptedGroupFromFile_fileWithMissingGroupField_validResult() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup actualGroup \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                MISSING_GROUP_FIELD_FILE, XmlAdaptedGroupWithRootElement.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup expectedGroup \u003d new XmlAdaptedGroup("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                null, VALID_GROUP_LOCATION, VALID_GROUP_TAGS, VALID_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroup, actualGroup);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void xmlAdaptedGroupFromFile_fileWithInvalidGroupField_validResult() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup actualGroup \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                INVALID_GROUP_FIELD_FILE, XmlAdaptedGroupWithRootElement.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup expectedGroup \u003d new XmlAdaptedGroup("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                VALID_GROUP_NAME, INVALID_GROUP_LOCATION, VALID_GROUP_TAGS, VALID_PERSONS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroup, actualGroup);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void xmlAdaptedGroupFromFile_fileWithValidGroup_validResult() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup actualGroup \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                VALID_GROUP_FILE, XmlAdaptedGroupWithRootElement.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup expectedGroup \u003d new XmlAdaptedGroup("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                VALID_GROUP_NAME, VALID_GROUP_LOCATION, VALID_GROUP_TAGS, VALID_PERSONS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroup, actualGroup);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedGroup}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @XmlRootElement(name \u003d \"groups\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static class XmlAdaptedGroupWithRootElement extends XmlAdaptedGroup {}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 6,
      "Tsuweiquan": 5,
      "-": 142,
      "rajdeepsh": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 175,
      "rajdeepsh": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/DeleteGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GROUP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Contains integration tests (interaction with Model) and unit tests for DeleteGroupCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class DeleteGroupCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_nullDeleteGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        new DeleteGroupCommand(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_nullModel_throwsException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        deleteGroupCommand.execute(null, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidGroupIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(INDEX_SECOND_GROUP);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommandTest.ModelStub modelStub \u003d new DeleteGroupCommandTest"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .ModelStubWithGroup(getTut1());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        deleteGroupCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(INDEX_FIRST_GROUP.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, commandHistory, MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupToDelete \u003d model.getFilteredGroupList().get(INDEX_FIRST_GROUP.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.deleteGroup(groupToDelete);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showNoGroup(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(deleteGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_GROUP;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandFailure(deleteGroupCommand, model, commandHistory, MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupFirstCommand \u003d new DeleteGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupSecondCommand \u003d new DeleteGroupCommand(INDEX_SECOND_GROUP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(deleteGroupFirstCommand.equals(deleteGroupFirstCommand));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand deleteGroupFirstCommandCopy \u003d new DeleteGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(deleteGroupFirstCommand.equals(deleteGroupFirstCommandCopy));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(deleteGroupFirstCommand.equals(1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(deleteGroupFirstCommand.equals(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(deleteGroupFirstCommand.equals(deleteGroupSecondCommand));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void showNoGroup(Model model) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.updateFilteredGroupList(g -\u003e false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(model.getFilteredGroupList().isEmpty());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void createGroup(Group createGroup) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasGroup(Group checkGroup) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPersonInGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A Model stub that contains a single group."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStubWithGroup extends DeleteGroupCommandTest.ModelStub {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            ObservableList\u003cGroup\u003e group \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            group.add(getTut1());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return group;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 276
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_validListCommand_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_validGroupListCommand_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String listGroupCommand \u003d ListGroupCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(listGroupCommand, ListGroupCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertHistoryCorrect(listGroupCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        logic.getFilteredGroupList().remove(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "rajdeepsh": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        public void createGroup(Group createGroup) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        public boolean hasGroup(Group checkGroup) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPersonInGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 11,
      "-": 206,
      "rajdeepsh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup3;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddGroupCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroupCommandIntegrationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ab.addPerson(ALICE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ab.createGroup(getTut1());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model \u003d new ModelManager(ab, new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook abCopy \u003d new AddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        abCopy.addPerson(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        abCopy.createGroup(getTut1());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel \u003d new ModelManager(abCopy, new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_addGroup_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup validAddGroup \u003d getAddGroup3();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup validAddGroupCopy \u003d getAddGroup3();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cPerson\u003e person \u003d expectedModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e group \u003d expectedModel.getFilteredGroupList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        validAddGroup.setGroupSet(group);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        validAddGroup.setPersonSet(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.addGroup(validAddGroup);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(new AddGroupCommand(validAddGroupCopy), model, commandHistory,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(AddGroupCommand.MESSAGE_SUCCESS, validAddGroup), expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsWithPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for AddGroupCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroupCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_nullAddGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        new AddGroupCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void execute_nullModel_throwsException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(getAddGroup1());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addGroupCommand.execute(null, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidPersonIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(getAddGroup1());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommandTest.ModelStub modelStub \u003d new AddGroupCommandTest"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .ModelStubWithPersonInGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addGroupCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidGroupIndex_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(getAddGroup2());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommandTest.ModelStub modelStub \u003d new AddGroupCommandTest"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .ModelStubWithPersonInGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addGroupCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_hasPersonInGroup_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroupCommand \u003d new AddGroupCommand(getAddGroup3());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommandTest.ModelStub modelStub \u003d new AddGroupCommandTest"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .ModelStubWithPersonInGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expectMessage(AddGroupCommand.MESSAGE_DUPLICATE_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addGroupCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroupCommand1 \u003d new AddGroupCommand(getAddGroup1());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroupCommand2 \u003d new AddGroupCommand(getAddGroup2());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addGroupCommand1.equals(addGroupCommand1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand addGroup1CommandCopy \u003d new AddGroupCommand(getAddGroup1());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addGroupCommand1.equals(addGroup1CommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroupCommand1.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroupCommand1.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different param -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroupCommand1.equals(addGroupCommand2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void createGroup(Group createGroup) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasGroup(Group checkGroup) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPersonInGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A Model stub that contains a single group with one person in it."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStubWithPersonInGroup extends AddGroupCommandTest.ModelStub {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ModelStubWithPersonInGroup(Group group) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            ObservableList\u003cPerson\u003e person \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            person.add(ALICE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return person;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            ObservableList\u003cGroup\u003e group \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            group.add(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return group;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPersonInGroup(AddGroup toAdd) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            for (Person p : group.getPersons()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                for (Person p2 : toAdd.getPersonSet()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    if (p.equals(p2)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 252
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GRADE_BOB \u003d \"100\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GRADE_AMY \u003d \"99\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_NAME_TUT_1 \u003d \"TUT[1]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_NAME_CS1010 \u003d \"CS1010\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_LOCATION_TUT_1 \u003d \"E1-01-01\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_LOCATION_CS1010 \u003d \"VCR\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_TAG_TUT_1 \u003d \"morning\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_TAG_CS1010 \u003d \"night\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_MALE \u003d \"MALE\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_FEMALE \u003d \"FEMALE\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_ABBREVIATION_MALE \u003d \"M\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_ABBREVIATION_FEMALE \u003d \"F\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_NATIONALITY_SG \u003d \"SG\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_NATIONALITY_CN \u003d \"CN\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_PERSON_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_PERSON_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_PERSON_INDEX_3 \u003d \"3\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_NUMBER_OF_GROUPS \u003d \"5\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_FLAG_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_GENDER_FLAG_FALSE \u003d \"false\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_NATIONALITY_FLAG_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_NATIONALITY_FLAG_FALSE \u003d \"false\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_FLAG_0 \u003d \"0\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String VALID_FLAG_1 \u003d \"1\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_GENDER_FLAG_NUMBER \u003d \"4\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_GENDER_FLAG_WORD \u003d \"alsfe\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_NATIONALITY_FLAG_NUMBER \u003d \"6\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_NATIONALITY_FLAG_WORD \u003d \"eurt\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_FEMALE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_MALE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_ABBREVIATION_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_ABBREVIATION_FEMALE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_ABBREVIATION_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_ABBREVIATION_MALE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_DESC_AMY \u003d \" \" + PREFIX_NATIONALITY + VALID_NATIONALITY_SG;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_DESC_BOB \u003d \" \" + PREFIX_NATIONALITY + VALID_NATIONALITY_CN;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GRADE_DESC_BOB \u003d \" \" + PREFIX_GRADE + VALID_GRADE_BOB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GRADE_DESC_AMY \u003d \" \" + PREFIX_GRADE + VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String PERSON_INDEX_DESC_1 \u003d \" \" + PREFIX_PERSON_INDEX + VALID_PERSON_INDEX_1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String PERSON_INDEX_DESC_2 \u003d \" \" + PREFIX_PERSON_INDEX + VALID_PERSON_INDEX_2;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String PERSON_INDEX_DESC_3 \u003d \" \" + PREFIX_PERSON_INDEX + VALID_PERSON_INDEX_3;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_INDEX_DESC_1 \u003d \" \" + PREFIX_GROUP_INDEX + VALID_GROUP_INDEX_1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_INDEX_DESC_2 \u003d \" \" + PREFIX_GROUP_INDEX + VALID_GROUP_INDEX_2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_NAME_DESC_TUT_1 \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_TUT_1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_NAME_DESC_CS1010 \u003d \" \" + PREFIX_NAME + VALID_GROUP_NAME_CS1010;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_LOCATION_DESC_TUT_1 \u003d \" \" + PREFIX_GROUP_LOCATION + VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_LOCATION_DESC_CS1010 \u003d \" \" + PREFIX_GROUP_LOCATION + VALID_GROUP_LOCATION_CS1010;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_TAG_DESC_TUT_1 \u003d \" \" + PREFIX_TAG + VALID_GROUP_TAG_TUT_1;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String GROUP_TAG_DESC_CS1010 \u003d \" \" + PREFIX_TAG + VALID_GROUP_TAG_CS1010;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NUMBER_OF_GROUPS \u003d \" \" + VALID_NUMBER_OF_GROUPS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_FLAG_FALSE \u003d \" \" + PREFIX_GENDER + VALID_GENDER_FLAG_FALSE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_FLAG_TRUE \u003d \" \" + PREFIX_GENDER + VALID_GENDER_FLAG_TRUE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_FLAG_FALSE \u003d \" \" + PREFIX_NATIONALITY + VALID_NATIONALITY_FLAG_FALSE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_FLAG_TRUE \u003d \" \" + PREFIX_NATIONALITY + VALID_NATIONALITY_FLAG_TRUE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_FLAG_BOOLEAN_FALSE \u003d \" \" + PREFIX_GENDER + VALID_FLAG_0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_FLAG_BOOLEAN_TRUE \u003d \" \" + PREFIX_GENDER + VALID_FLAG_1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_FLAG_BOOLEAN_FALSE \u003d \" \" + PREFIX_NATIONALITY + VALID_FLAG_0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_FLAG_BOOLEAN_TRUE \u003d \" \" + PREFIX_NATIONALITY + VALID_FLAG_1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_FLAG_INVALID_NUMBER \u003d \" \" + PREFIX_GENDER + INVALID_GENDER_FLAG_NUMBER;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String GENDER_FLAG_INVALID_WORD \u003d \" \" + PREFIX_GENDER + INVALID_GENDER_FLAG_WORD;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_FLAG_INVALID_NUMBER \u003d \" \" + PREFIX_NATIONALITY"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + INVALID_NATIONALITY_FLAG_NUMBER;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String NATIONALITY_FLAG_INVALID_WORD \u003d \" \" + PREFIX_NATIONALITY + INVALID_NATIONALITY_FLAG_WORD;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"Male1\"; // \u00271\u0027 not allowed in Gender"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_GENDER_ABBREVIATED_DESC \u003d \" \" + PREFIX_GENDER + \"A\"; // \u00271\u0027 not allowed in Gender"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_NATIONALITY_DESC \u003d \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            + PREFIX_NATIONALITY + \"SG1\"; // \u00271\u0027 not allowed in Nationality"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE + \"10*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String INVALID_PERSON_INDEX_DESC \u003d \" \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_PERSON_INDEX + \"10*\"; // \u0027*\u0027 not allowed in person index"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String INVALID_GROUP_INDEX_DESC \u003d \" \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_GROUP_INDEX + \"10*\"; // \u0027*\u0027 not allowed in group index"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String INVALID_GROUP_NAME_DESC \u003d \" \" + PREFIX_NAME + \"TUT1*\"; // \u0027*\u0027 not allowed in group names"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String INVALID_GROUP_LOCATION_DESC \u003d \" \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            + PREFIX_GROUP_LOCATION + \"E1/01/01\"; // \u0027/\u0027 not allowed in group names"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String INVALID_GROUP_TAG_DESC \u003d \" \" + PREFIX_TAG + \"morning*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_GROUP_NUMBER_DESC \u003d \" \" + \"0\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_GROUP_NUMBER_STRING_DESC \u003d \" a\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String INVALID_MAX_GROUP_NUMBER_DESC \u003d \" \" + \"9223372036854775808\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t \\r \\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .withGender(VALID_GENDER_FEMALE).withNationality(VALID_NATIONALITY_SG)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .withGender(VALID_GENDER_MALE).withNationality(VALID_NATIONALITY_CN)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the group at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static void showGroupAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d model.getFilteredGroupList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String[] splitGroupName \u003d group.getGroupName().groupName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model.updateFilteredGroupList(new GroupNameContainsKeywordsPredicate(Arrays.asList(splitGroupName[0])));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(1, model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 54,
      "-": 145,
      "rajdeepsh": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateGroupCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code CreateGroupCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class CreateGroupCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_newGroup_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.createGroup(validGroup);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(new CreateGroupCommand(validGroup), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(CreateGroupCommand.MESSAGE_SUCCESS, validGroup), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupInList \u003d model.getAddressBook().getGroupList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandFailure(new CreateGroupCommand(groupInList), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                CreateGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class CreateGroupCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        new CreateGroupCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommandTest.ModelStubAcceptingGroupCreated modelStub \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new CreateGroupCommandTest.ModelStubAcceptingGroupCreated();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CommandResult commandResult \u003d new CreateGroupCommand(validGroup).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(String.format(CreateGroupCommand.MESSAGE_SUCCESS, validGroup), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(Arrays.asList(validGroup), modelStub.groupsCreated);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_duplicateGroup_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group validGroup \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommand createGroupCommand \u003d new CreateGroupCommand(validGroup);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommandTest.ModelStub modelStub \u003d new CreateGroupCommandTest.ModelStubWithGroup(validGroup);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expectMessage(CreateGroupCommand.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        createGroupCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group tut1 \u003d new GroupBuilder().withGroupName(\"TUT[1]\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group tut2 \u003d new GroupBuilder().withGroupName(\"TUT[2]\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommand createTut1Command \u003d new CreateGroupCommand(tut1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommand createTut2Command \u003d new CreateGroupCommand(tut2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(createTut1Command.equals(createTut1Command));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommand createTut1CommandCopy \u003d new CreateGroupCommand(tut1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(createTut1Command.equals(createTut1CommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(createTut1Command.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(createTut1Command.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(createTut1Command.equals(createTut2Command));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void createGroup(Group createGroup) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasGroup(Group checkGroup) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void addGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasPersonInGroup(AddGroup addGroup) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void deleteGroup(Group target) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A Model stub that contains a single group."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStubWithGroup extends CreateGroupCommandTest.ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        private final Group group;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ModelStubWithGroup(Group group) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            this.group \u003d group;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return this.group.isSameGroup(group);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * A Model stub that always accept the group being added."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private class ModelStubAcceptingGroupCreated extends CreateGroupCommandTest.ModelStub {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final ArrayList\u003cGroup\u003e groupsCreated \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public boolean hasGroup(Group group) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return groupsCreated.stream().anyMatch(group::isSameGroup);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void createGroup(Group group) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            requireNonNull(group);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupsCreated.add(group);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            // called by {@code CreateGroupCommand#execute()}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 240
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DistributeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.commons.util.DistributeUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.Distribute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.testutil.DistributeBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void constructor_nullDistribute_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        new DistributeCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void execute_distributeBalancedAcceptedByModel_distributeSuccessful()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws ParseException, CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddressBook stubAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        UserPrefs stubUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Model modelStub \u003d new ModelManager(stubAddressBook, stubUserPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute validDistributeCommand \u003d new DistributeBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        CommandResult commandResult \u003d new DistributeCommand(validDistributeCommand).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(String.format(DistributeCommand.MESSAGE_SUCCESS, validDistributeCommand),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void execute_distributeByGenderAcceptedByModel_distributeSuccessful()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws ParseException, CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddressBook stubAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        UserPrefs stubUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Model modelStub \u003d new ModelManager(stubAddressBook, stubUserPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute validDistributeCommand \u003d new DistributeBuilder().setGenderFlag(\"true\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        CommandResult commandResult \u003d new DistributeCommand(validDistributeCommand).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(String.format(DistributeCommand.MESSAGE_SUCCESS, validDistributeCommand),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void execute_distributeByNationalityAcceptedByModel_distributeSuccessful()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws ParseException, CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddressBook stubAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        UserPrefs stubUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Model modelStub \u003d new ModelManager(stubAddressBook, stubUserPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute validDistributeCommand \u003d new DistributeBuilder().setNationalityFlag(\"true\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        CommandResult commandResult \u003d new DistributeCommand(validDistributeCommand).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(String.format(DistributeCommand.MESSAGE_SUCCESS, validDistributeCommand),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void execute_distributeByGenderAndNationalityAcceptedByModel_distributeSuccessful()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            throws ParseException, CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddressBook stubAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        UserPrefs stubUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Model modelStub \u003d new ModelManager(stubAddressBook, stubUserPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute validDistributeCommand \u003d new DistributeBuilder().setNationalityFlag(\"true\").setGenderFlag(\"true\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        CommandResult commandResult \u003d new DistributeCommand(validDistributeCommand).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(String.format(DistributeCommand.MESSAGE_SUCCESS, validDistributeCommand),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void execute_duplicateGroupFound_throwsCommandException() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        AddressBook stubAddressBook \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Group stubGroup \u003d new GroupBuilder().withGroupName(\"CS2113-T13-1\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        stubAddressBook.createGroup(stubGroup);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        UserPrefs stubUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Model modelStub \u003d new ModelManager(stubAddressBook, stubUserPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute validDistributeCommand \u003d new DistributeBuilder().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        thrown.expectMessage(DistributeUtil.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        new DistributeCommand(validDistributeCommand).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void equals() throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute distributeIntoThree \u003d new DistributeBuilder().build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute differentIndexDistribution \u003d new DistributeBuilder().setIndex(\"4\").build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute differentGroupNameDistribution \u003d new DistributeBuilder().setGroupName(\"Different-Group\").build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute differentGenderFlagDistribution \u003d new DistributeBuilder().setGenderFlag(\"true\").build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute differentNationalityFlagDistribution \u003d new DistributeBuilder().setNationalityFlag(\"true\").build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute allDifferent \u003d new DistributeBuilder().setIndex(\"6\").setGroupName(\"New-Group\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .setGenderFlag(\"true\").setNationalityFlag(\"true\").build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand distributeFirstCommand \u003d new DistributeCommand(distributeIntoThree);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand differentIndexCommand \u003d new DistributeCommand(differentIndexDistribution);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand differentGroupNameCommand \u003d new DistributeCommand(differentGroupNameDistribution);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand differentGenderFlagCommand \u003d new DistributeCommand(differentGenderFlagDistribution);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand differentNationalityFlagCommand \u003d new DistributeCommand(differentNationalityFlagDistribution);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand allDifferentCommand \u003d new DistributeCommand(allDifferent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertTrue(distributeFirstCommand.equals(distributeFirstCommand));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand differentIndexCommandCopy \u003d new DistributeCommand(differentIndexDistribution);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertTrue(differentIndexCommandCopy.equals(differentIndexCommand));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // different Index"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertFalse(distributeFirstCommand.equals(differentIndexCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // different GroupName"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertFalse(distributeFirstCommand.equals(differentGroupNameCommand));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // different GenderFlag"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertFalse(distributeFirstCommand.equals(differentGenderFlagCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // different NationalityFlag"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertFalse(distributeFirstCommand.equals(differentNationalityFlagCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertFalse(distributeFirstCommand.equals(null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertFalse(distributeFirstCommand.equals(allDifferentCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void toStringTest() throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute validDistributeCommand \u003d new DistributeBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedMessage \u003d \"3Group Name: CS2113-T13-Sort By Gender: falseSort By Nationality: false\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String unexpectedMessage \u003d \"8Group Name: CS2113-T13-Sort By Gender: falseSort By Nationality: false\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertEquals(expectedMessage, validDistributeCommand.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertNotEquals(unexpectedMessage, validDistributeCommand.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EmailCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getGroupTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getMultipleTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getSingleTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.commons.util.EmailUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Domain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final Subject VALID_SUBJECT \u003d new Subject(\"This is a valid subject\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final Message VALID_MESSAGE \u003d new Message(\"This is a valid message\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String TEST_MESSAGE_CONTAINS_SUBMISSION_EXCEEDED \u003d \"ThisIsATestMessage\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \".MessageSubmissionExceededException.MessageIsATest\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String TEST_MESSAGE_CONTAINS_OUTBOUND_SPAM \u003d \"ThisIsATestMessage\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \".OutboundSpamException.MessageIsATest\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String TEST_MESSAGE_CONTAINS_NO_RECIPIENT \u003d \"ThisIsATestMessage\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \".No recipient addresses.MessageIsATest\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String TEST_MESSAGE_CONTAINS_INVALID_ADDRESS \u003d \"ThisIsATestMessage\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            + \".Invalid Addresses.MessageIsATest\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String TEST_MESSAGE_GENERAL_FAIL \u003d \"ThisIsAFailMessage\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Model modelSingle \u003d new ModelManager(getSingleTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Model modelMultiple \u003d new ModelManager(getMultipleTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Model modelGroup \u003d new ModelManager(getGroupTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private List\u003cIndex\u003e indexList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToSinglePersonSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setValidLogin();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(index, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelSingle, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(EmailCommand.MESSAGE_SUCCESS), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToMultiplePersonSuccessful() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setValidLogin();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            indexList \u003d ParserUtil.parseMultipleIndex(\"1,2,3,4,5\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(indexList, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelMultiple, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(EmailCommand.MESSAGE_SUCCESS), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToGroupSuccessful() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setValidLogin();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            index \u003d ParserUtil.parseGroupIndex(\"g/1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(index, VALID_SUBJECT, VALID_MESSAGE, true)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelGroup, commandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(EmailCommand.MESSAGE_SUCCESS), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailUnsuccessfulDueToNoLogin() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setNoLogin();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expectMessage(EmailCommand.MESSAGE_NO_LOGIN);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(index, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelSingle, commandHistory);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(EmailCommand.MESSAGE_NO_LOGIN), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToSinglePersonUnsuccessfulDueToInvalidLogin() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setInvalidLogin();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            index \u003d ParserUtil.parseIndex(\"1\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expectMessage(EmailCommand.MESSAGE_AUTHENTICATION_FAIL);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(index, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelSingle, commandHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(EmailCommand.MESSAGE_AUTHENTICATION_FAIL), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToMultiplePersonUnsuccessfulDueToInvalidLogin() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setInvalidLogin();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            indexList \u003d ParserUtil.parseMultipleIndex(\"1,2,3,4,5\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expectMessage(EmailCommand.MESSAGE_AUTHENTICATION_FAIL);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(indexList, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelMultiple, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(EmailCommand.MESSAGE_AUTHENTICATION_FAIL), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToSinglePersonUnsuccessfulDueToInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setValidLogin();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            index \u003d ParserUtil.parseIndex(\"2\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(index, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelSingle, commandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToMultiplePersonsUnsuccessfulDueToInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setValidLogin();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            indexList \u003d ParserUtil.parseMultipleIndex(\"1,2,3,4,5,6\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_MULTIPLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(indexList, VALID_SUBJECT, VALID_MESSAGE)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelMultiple, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_INVALID_MULTIPLE_DISPLAYED_INDEX), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_sendEmailToGroupUnsuccessfulDueToInvalidIndex() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        setValidLogin();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            index \u003d ParserUtil.parseGroupIndex(\"g/2\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        thrown.expectMessage(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        CommandResult commandResult \u003d new EmailCommand(index, VALID_SUBJECT, VALID_MESSAGE, true)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .execute(modelGroup, commandHistory);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(String.format(Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void setErrorMessageForSendFailedExceptionTest() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String messageConstraint \u003d EmailCommand.MESSAGE_FAIL + \": \" + Message.MESSAGE_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String messageFailException \u003d EmailCommand.MESSAGE_FAIL + \": \" + EmailCommand.SMTP_FAIL_EXCEPTION_MESSAGE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String messageFailExceptionNoRecipient \u003d EmailCommand.MESSAGE_FAIL + \": \" + EmailCommand.MESSAGE_NO_RECIPIENT;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String messageFailExceptionInvalidAddress \u003d EmailCommand.MESSAGE_FAIL + \": \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                + EmailCommand.MESSAGE_INVALID_ADDRESSES;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String messageGenericFail \u003d EmailCommand.MESSAGE_FAIL;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(EmailCommand.setErrorMessageForSendFailedException(TEST_MESSAGE_CONTAINS_SUBMISSION_EXCEEDED),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                messageConstraint);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(EmailCommand.setErrorMessageForSendFailedException(TEST_MESSAGE_CONTAINS_OUTBOUND_SPAM),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                messageFailException);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(EmailCommand.setErrorMessageForSendFailedException(TEST_MESSAGE_CONTAINS_INVALID_ADDRESS),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                messageFailExceptionInvalidAddress);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(EmailCommand.setErrorMessageForSendFailedException(TEST_MESSAGE_CONTAINS_NO_RECIPIENT),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                messageFailExceptionNoRecipient);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(EmailCommand.setErrorMessageForSendFailedException(TEST_MESSAGE_GENERAL_FAIL),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                messageGenericFail);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Method to set valid email account for sending emails."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void setValidLogin() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailAddress(Domain.SEND_GRID_USERNAME);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailPassword(Domain.SEND_GRID_PASSWORD);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Method to set invalid email account for sending emails."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void setInvalidLogin() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailAddress(\"stubEmail123@hotmail.com\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailPassword(\"stubPassword123\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Method to set no login in EmailUtil."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void setNoLogin() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailAddress(\"\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        EmailUtil.setUserEmailPassword(\"\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 229
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EmailLoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0176882"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0176882"
        },
        "content": "public class EmailLoginCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public void execute_login_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String expectedMessage \u003d String.format(EmailLoginCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        Email validEmail \u003d new Email(\"stubEmail@stubEmail.com\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String password \u003d \"stubPassword123\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertCommandSuccess(new EmailLoginCommand(validEmail, password), model, commandHistory, expectedMessage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0176882"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.TypicalGroups;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class ListGroupCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        model \u003d new ModelManager(TypicalGroups.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                commandHistory, ListGroupCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(new ListGroupCommand(), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                commandHistory, ListGroupCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ScriptCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.CommandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.TextFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": " * Contains tests for ScriptCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ScriptCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private Person novin \u003d new PersonBuilder().withName(\"Novin Tong Yong Kang\").withGender(\"M\").withNationality(\"SG\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "            .withAddress(\"Pasir Ris street 99,#02-25\").withEmail(\"novin@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "            .withGrade(\"69\").withPhone(\"99999999\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private Person weiQuan \u003d new PersonBuilder().withName(\"Tsu Wei Quan\").withGender(\"F\").withNationality(\"SG\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "            .withAddress(\"Tampines street 82,#02-33\").withEmail(\"TsuTheBoss@gmail.com\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "            .withGrade(\"99\").withPhone(\"66666666\").withTags(\"owesMoney\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String validAddTextFile \u003d \"ValidAddScriptCommand\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String missingTextFile \u003d \"MissingTextFile\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String testFilesLocation \u003d \"/src/test/data/ScriptCommandTest/\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String scriptsFolder \u003d \"/scripts/\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String invalidLinesNumbers \u003d \"1,2\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String addCommand \u003d AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private final String deleteCommand \u003d DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "        FileUtils.copyDirectory(new File(FileUtil.getRootLocation() + testFilesLocation),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "                new File(FileUtil.getRootLocation() + scriptsFolder));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void execute_scriptAddCommand_successful() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String validFileName \u003d validAddTextFile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String expectedMessage \u003d String.format(ScriptCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "novin997"
        },
        "content": "                validAddTextFile + ScriptCommand.TEXT_EXTENSION);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "novin997"
        },
        "content": "        expectedModel.addPerson(novin);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "novin997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "novin997"
        },
        "content": "        expectedModel.addPerson(weiQuan);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "novin997"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertCommandSuccess(new ScriptCommand(new TextFile(validFileName), new CommandType(addCommand)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "novin997"
        },
        "content": "                model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void execute_fileMissing_throwsIoException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String expectedMessage \u003d String.format(ScriptCommand.MESSAGE_FILE_MISSING,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "novin997"
        },
        "content": "                missingTextFile + ScriptCommand.TEXT_EXTENSION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ScriptCommand scriptCommand \u003d new ScriptCommand(new TextFile(missingTextFile), new CommandType(addCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandResult commandResult \u003d scriptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(commandResult.feedbackToUser, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void execute_wrongCommand_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String expectedMessage \u003d String.format(ScriptCommand.MESSAGE_ADD_ERROR,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "novin997"
        },
        "content": "                invalidLinesNumbers, validAddTextFile + ScriptCommand.TEXT_EXTENSION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ScriptCommand scriptCommand \u003d new ScriptCommand(new TextFile(validAddTextFile), new CommandType(deleteCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandResult commandResult \u003d scriptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(commandResult.feedbackToUser, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void execute_fileMissing_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String expectedMessage \u003d String.format(ScriptCommand.MESSAGE_ADD_ERROR,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "novin997"
        },
        "content": "                invalidLinesNumbers, validAddTextFile + ScriptCommand.TEXT_EXTENSION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ScriptCommand scriptCommand \u003d new ScriptCommand(new TextFile(validAddTextFile), new CommandType(deleteCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandResult commandResult \u003d scriptCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(commandResult.feedbackToUser, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ScriptCommand validScriptCommand \u003d new ScriptCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "novin997"
        },
        "content": "                new TextFile(validAddTextFile), new CommandType(addCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ScriptCommand invalidScriptCommmamd \u003d new ScriptCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "novin997"
        },
        "content": "                new TextFile(validAddTextFile), new CommandType(deleteCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(validScriptCommand.equals(validScriptCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(validAddTextFile.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(validAddTextFile.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(validAddTextFile.equals(invalidScriptCommmamd));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectGroupCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showGroupAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GROUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_GROUP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectGroupCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class SelectGroupCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Index lastGroupIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_GROUP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertExecutionSuccess(lastGroupIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredGroupList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(expectedModel, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(model, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        showGroupAtIndex(expectedModel, INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_GROUP;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getGroupList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_GROUP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        SelectGroupCommand selectFirstCommand \u003d new SelectGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        SelectGroupCommand selectSecondCommand \u003d new SelectGroupCommand(INDEX_SECOND_GROUP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        SelectGroupCommand selectFirstCommandCopy \u003d new SelectGroupCommand(INDEX_FIRST_GROUP);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Executes a {@code SelectGroupCommand} with the given {@code index},"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * and checks that {@code JumpToGroupListRequestEvent}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        SelectGroupCommand selectGroupCommand \u003d new SelectGroupCommand(index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(SelectGroupCommand.MESSAGE_SELECT_GROUP_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandSuccess(selectGroupCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        JumpToGroupListRequestEvent lastEvent \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                (JumpToGroupListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Executes a {@code SelectGroupCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        SelectGroupCommand selectGroupCommand \u003d new SelectGroupCommand(index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCommandFailure(selectGroupCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_ABBREVIATION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_ABBREVIATION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_ABBREVIATED_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NATIONALITY_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_MALE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NATIONALITY_CN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //One gender - gender input string is non abbreviated"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //One gender - gender input string is abbreviated"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_ABBREVIATION_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //multiple gender - last gender accepted (both are non abbreviation)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //multiple gender - last gender accepted (both are abbreviation)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_ABBREVIATION_DESC_AMY + GENDER_ABBREVIATION_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //multiple gender - last gender accepted (first is non abbreviated, seconds is abbreviated)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_AMY + GENDER_ABBREVIATION_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //multiple gender - last gender accepted (first is abbreviated, seconds is non abbreviated)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_ABBREVIATION_DESC_AMY + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Single Nationality"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Multiple Nationality - last nationality accepted"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GRADE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // multiple grades - last grade accepted"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GRADE_DESC_AMY + GRADE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GRADE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //missing gender prefix"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_GENDER_MALE + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //missing nationality prefix"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + VALID_NATIONALITY_CN"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_GENDER_MALE + VALID_NATIONALITY_CN"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + GRADE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //invalid gender non abbreviated \"Male1\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_GENDER_DESC + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + GRADE_DESC_BOB, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //invalid gender abbreviated \"A\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_GENDER_ABBREVIATED_DESC + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + GRADE_DESC_BOB, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //invalid nationality \"SG1\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + INVALID_NATIONALITY_DESC"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + GRADE_DESC_BOB, Nationality.MESSAGE_NATIONALITY_CONSTRAINT);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + GRADE_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GRADE_DESC_BOB + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid grade"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + INVALID_GRADE_DESC + TAG_DESC_HUSBAND, Grade.MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + GRADE_DESC_BOB,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GRADE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 131,
      "-": 110,
      "rajdeepsh": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_INDEX_DESC_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_INDEX_DESC_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_INDEX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PERSON_INDEX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_INDEX_DESC_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_INDEX_DESC_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PERSON_INDEX_DESC_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_INDEX_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PERSON_INDEX_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroupCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GROUP_INDEX_DESC_1 + PERSON_INDEX_DESC_1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new AddGroupCommand(getAddGroup3()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // multiple group indices - last group name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, GROUP_INDEX_DESC_2 + GROUP_INDEX_DESC_1 + PERSON_INDEX_DESC_1,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new AddGroupCommand(getAddGroup3()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // multiple person indices - all accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, GROUP_INDEX_DESC_1 + PERSON_INDEX_DESC_1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        + PERSON_INDEX_DESC_2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        + PERSON_INDEX_DESC_3,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new AddGroupCommand(getAddGroup1()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_INDEX_1 + PERSON_INDEX_DESC_1,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // missing person index prefix"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, GROUP_INDEX_DESC_1 + VALID_PERSON_INDEX_1,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_INDEX_1 + VALID_PERSON_INDEX_1,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid group index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_INDEX_DESC + PERSON_INDEX_DESC_1,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid person index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, GROUP_INDEX_DESC_1 + INVALID_PERSON_INDEX_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_INDEX_DESC + INVALID_PERSON_INDEX_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GROUP_INDEX_DESC_1 + PERSON_INDEX_DESC_1,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_FALSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_NAME_DESC_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_FALSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NUMBER_OF_GROUPS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.VALID_GROUP_INDEX_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.VALID_PERSON_INDEX_1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.VALID_PERSON_INDEX_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.VALID_PERSON_INDEX_3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.AddGroupCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.CreateGroupCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.DistributeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.ListGroupCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.commands.ScriptCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.SelectGroupCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.Distribute;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Command to create a group"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseCommand_group() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        CreateGroupCommand command \u003d (CreateGroupCommand) parser.parseCommand(GroupUtil.getCreateGroupCommand(group));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(new CreateGroupCommand(group), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Command to add persons to a group"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseCommand_addGroup() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroupCommand command \u003d (AddGroupCommand) parser.parseCommand(AddGroupCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + PREFIX_GROUP_INDEX + VALID_GROUP_INDEX_1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + \" \" + PREFIX_PERSON_INDEX + VALID_PERSON_INDEX_1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + \" \" + PREFIX_PERSON_INDEX + VALID_PERSON_INDEX_2"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + \" \" + PREFIX_PERSON_INDEX + VALID_PERSON_INDEX_3);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(new AddGroupCommand(getAddGroup1()), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Command to delete a group"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseCommand_deleteGroup() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                DeleteGroupCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GROUP.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(new DeleteGroupCommand(INDEX_FIRST_GROUP), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Command to list all groups"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseCommand_listGroup() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(parser.parseCommand(ListGroupCommand.COMMAND_WORD) instanceof ListGroupCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(parser.parseCommand(ListGroupCommand.COMMAND_WORD + \" 3\") instanceof ListGroupCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseCommand_selectGroup() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        SelectGroupCommand command \u003d (SelectGroupCommand) parser.parseCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                SelectGroupCommand.COMMAND_WORD + \" \" + INDEX_FIRST_GROUP.getOneBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(new SelectGroupCommand(INDEX_FIRST_GROUP), command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void parseCommand_distribute() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute descriptor \u003d new Distribute(5, new GroupName(\"CS1010\"), false, false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        DistributeCommand command \u003d (DistributeCommand) parser.parseCommand(DistributeCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "               + NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_FALSE + NATIONALITY_FLAG_FALSE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        System.out.println(command.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertEquals(new DistributeCommand(descriptor), command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseCommand_script() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String validAddTextFile \u003d \"ValidAddScriptCommand\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String missingTextFile \u003d \"MissingTextFile\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(parser.parseCommand(ScriptCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_TEXT_FILE"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "novin997"
        },
        "content": "                        + validAddTextFile + \" \" + CliSyntax.PREFIX_COMMAND"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "novin997"
        },
        "content": "                        + AddCommand.COMMAND_WORD) instanceof ScriptCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "novin997"
        },
        "content": "                ScriptCommand.COMMAND_WORD + \" \" + CliSyntax.PREFIX_TEXT_FILE"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "novin997"
        },
        "content": "                        + missingTextFile + \" \" + CliSyntax.PREFIX_COMMAND"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "novin997"
        },
        "content": "                        + AddCommand.COMMAND_WORD) instanceof ScriptCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 14,
      "Tsuweiquan": 16,
      "-": 143,
      "rajdeepsh": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_GROUP_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_PERSON_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_PERSON_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String VALID_PERSON_INDEX_3 \u003d \"3\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "rajdeepsh": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CreateGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_LOCATION_DESC_CS1010;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_LOCATION_DESC_TUT_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_NAME_DESC_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_NAME_DESC_TUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_TAG_DESC_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_TAG_DESC_TUT_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_LOCATION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_TUT_1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_CS1010;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_TUT_1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.TUT_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.CreateGroupCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class CreateGroupCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private CreateGroupCommandParser parser \u003d new CreateGroupCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder(TUT_1).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + GROUP_TAG_DESC_TUT_1, new CreateGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // multiple group names - last group name accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, GROUP_NAME_DESC_CS1010 + GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + GROUP_TAG_DESC_TUT_1, new CreateGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // multiple group locations - last location accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_CS1010 + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + GROUP_TAG_DESC_TUT_1, new CreateGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group expectedGroupMultipleTags \u003d new GroupBuilder(TUT_1).withTags(VALID_GROUP_TAG_TUT_1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                VALID_GROUP_TAG_CS1010).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + GROUP_TAG_DESC_TUT_1 + GROUP_TAG_DESC_CS1010, new CreateGroupCommand(expectedGroupMultipleTags));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group expectedGroup \u003d new GroupBuilder(TUT_1).withTags().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_TUT_1,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new CreateGroupCommand(expectedGroup));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateGroupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_TUT_1 + GROUP_LOCATION_DESC_TUT_1,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // missing group location prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, GROUP_NAME_DESC_TUT_1 + VALID_GROUP_LOCATION_TUT_1,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, VALID_GROUP_NAME_TUT_1 + VALID_GROUP_LOCATION_TUT_1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid group name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_NAME_DESC + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + GROUP_TAG_DESC_TUT_1 + GROUP_TAG_DESC_CS1010, GroupName.MESSAGE_GROUP_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid group location"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, GROUP_NAME_DESC_TUT_1 + INVALID_GROUP_LOCATION_DESC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + GROUP_TAG_DESC_TUT_1 + GROUP_TAG_DESC_CS1010, GroupLocation.MESSAGE_GROUP_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + INVALID_GROUP_TAG_DESC + VALID_GROUP_TAG_TUT_1, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_NAME_DESC + INVALID_GROUP_LOCATION_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                GroupName.MESSAGE_GROUP_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GROUP_NAME_DESC_TUT_1 + GROUP_LOCATION_DESC_TUT_1"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        + GROUP_TAG_DESC_TUT_1 + GROUP_TAG_DESC_CS1010,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.DeleteGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Test different boundary values of DeleteGroupCommandParser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class DeleteGroupCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private DeleteGroupCommandParser parser \u003d new DeleteGroupCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_validArgs_returnsDeleteGroupCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteGroupCommand(INDEX_FIRST_GROUP));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, DeleteGroupCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DistributeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_BOOLEAN_FALSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_BOOLEAN_TRUE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_FALSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_INVALID_NUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_INVALID_WORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_FLAG_TRUE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_NAME_DESC_CS1010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GROUP_NAME_DESC_TUT_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_NUMBER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_NUMBER_STRING_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_BOOLEAN_FALSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_BOOLEAN_TRUE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_FALSE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_INVALID_NUMBER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_INVALID_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_FLAG_TRUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NUMBER_OF_GROUPS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_FLAG_FALSE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_CS1010;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NATIONALITY_FLAG_FALSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_GROUPS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.commands.DistributeCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.Distribute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.DistributeAlgorithm;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private DistributeCommandParser parser \u003d new DistributeCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        GroupName groupName \u003d new GroupName(\"CS1010\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Distribute expectedDistribution \u003d new Distribute(5, groupName, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_FLAG_FALSE + NATIONALITY_FLAG_FALSE, new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // multiple group names - last groupname accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_TUT_1 + GROUP_NAME_DESC_CS1010"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_FLAG_FALSE + NATIONALITY_FLAG_FALSE, new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // multiple gender flag - last gender flag is accepted (both flags in word)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_TRUE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_FLAG_FALSE + NATIONALITY_FLAG_FALSE, new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // multiple gender flag - last gender flag is accepted (both flags in boolean)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_BOOLEAN_TRUE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_FLAG_BOOLEAN_FALSE + NATIONALITY_FLAG_BOOLEAN_FALSE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // multiple nationality flag - last nationality flag is accepted (both flags in word)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_TRUE + NATIONALITY_FLAG_FALSE, new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // multiple gender flag - last nationality flag is accepted (both flags in boolean"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_BOOLEAN_FALSE"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_BOOLEAN_TRUE + NATIONALITY_FLAG_BOOLEAN_FALSE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Different types of flag input. Gender flag in boolean, Nationality flag in Word"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_BOOLEAN_FALSE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE, new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //Different types of flag input. Gender flag in Word, Nationality flag in boolean"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseSuccess(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_BOOLEAN_FALSE, new DistributeCommand(expectedDistribution));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistributeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // missing group name prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GENDER_FLAG_FALSE + NATIONALITY_FLAG_FALSE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // missing gender flag prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + NATIONALITY_FLAG_FALSE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // missing nationality flag prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_FALSE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // missing all prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, VALID_NUMBER_OF_GROUPS + VALID_GROUP_NAME_CS1010"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + VALID_GENDER_FLAG_FALSE + VALID_NATIONALITY_FLAG_FALSE, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // first input arg is a letter instead of an digit"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_NUMBER_STRING_DESC + VALID_GROUP_NAME_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + NATIONALITY_FLAG_FALSE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                DistributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid numberOfGroups Eg. 0"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_NUMBER_DESC + VALID_GROUP_NAME_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid numberOfGroups Eg. out of range or larger than number of person"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_NUMBER_DESC + VALID_GROUP_NAME_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid group name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + INVALID_GROUP_NAME_DESC + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE, GroupName.MESSAGE_GROUP_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid gender flag (boolean that are not 1 or 0)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_INVALID_NUMBER"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE, DistributeAlgorithm.MESSAGE_FLAG_ERROR);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid gender flag (word that is not true or false)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_INVALID_WORD"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE, DistributeAlgorithm.MESSAGE_FLAG_ERROR);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid nationality flag (boolean that are not 1 or 0)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_INVALID_NUMBER, DistributeAlgorithm.MESSAGE_FLAG_ERROR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // invalid nationality flag (word that is not true or false)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010 + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_INVALID_WORD, DistributeAlgorithm.MESSAGE_FLAG_ERROR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, INVALID_GROUP_NUMBER_DESC + INVALID_GROUP_NAME_DESC + GENDER_FLAG_FALSE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_FLAG_FALSE,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NUMBER_OF_GROUPS + GROUP_NAME_DESC_CS1010"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                        + GENDER_FLAG_FALSE + NATIONALITY_FLAG_FALSE,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistributeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 152
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.CommandType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.TextFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_GROUP_NAME \u003d \"TUT/1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_GROUP_LOCATION \u003d \"E1/01/01\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GROUP_NAME \u003d \"TUT[1]\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GROUP_LOCATION \u003d \"E1-01-01\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String VALID_TEXT_FILE \u003d \"StudentList\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String INVALID_TEXT_FILE \u003d \"\\\"StudentList\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String VALID_COMMAND_TYPE \u003d \"add\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private static final String INVALID_COMMAND_TYPE \u003d \"abc\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseIndices_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ParserUtil.parseIndices(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseIndices_collectionWithInvalidIndices_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ParserUtil.parseIndices(Arrays.asList(VALID_INDEX_1, INVALID_INDEX));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseIndices_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(ParserUtil.parseIndices(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseIndices_collectionWithValidIndices_returnsIndexSet() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e actualIndexSet \u003d ParserUtil.parseIndices(Arrays.asList(VALID_INDEX_1, VALID_INDEX_2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e expectedIndexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedIndexSet.add(Index.fromOneBased(Integer.valueOf(VALID_INDEX_1)));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedIndexSet.add(Index.fromOneBased(Integer.valueOf(VALID_INDEX_2)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedIndexSet, actualIndexSet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGroupName((String) null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseGroupName(INVALID_GROUP_NAME));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupName expectedGroupName \u003d new GroupName(VALID_GROUP_NAME);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroupName, ParserUtil.parseGroupName(VALID_GROUP_NAME));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String groupNameWithWhitespace \u003d WHITESPACE + VALID_GROUP_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupName expectedGroupName \u003d new GroupName(VALID_GROUP_NAME);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroupName, ParserUtil.parseGroupName(groupNameWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGroupLocation((String) null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupLocation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseGroupLocation(INVALID_GROUP_LOCATION));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupLocation_validValueWithoutWhitespace_returnsGroupLocation() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupLocation expectedGroupLocation \u003d new GroupLocation(VALID_GROUP_LOCATION);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroupLocation, ParserUtil.parseGroupLocation(VALID_GROUP_LOCATION));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parseGroupLocation_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String groupLocationWithWhitespace \u003d WHITESPACE + VALID_GROUP_LOCATION + WHITESPACE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupLocation expectedGroupLocation \u003d new GroupLocation(VALID_GROUP_LOCATION);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroupLocation, ParserUtil.parseGroupLocation(groupLocationWithWhitespace));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseTextFile_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTextFile((String) null));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseTextFile_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "novin997"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ParserUtil.parseTextFile(INVALID_TEXT_FILE);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseTextFile_validValue_returnTextFile() throws Exception {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "novin997"
        },
        "content": "        TextFile expectedTextFile \u003d new TextFile(VALID_TEXT_FILE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(expectedTextFile, ParserUtil.parseTextFile(VALID_TEXT_FILE));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseTextFile_validValueWithWhiteSpace_returnTextFile() throws Exception {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String textFileWithSpace \u003d WHITESPACE + VALID_TEXT_FILE + WHITESPACE;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "novin997"
        },
        "content": "        TextFile expectedTextFile \u003d new TextFile(VALID_TEXT_FILE);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(expectedTextFile, ParserUtil.parseTextFile(textFileWithSpace));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseCommandType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCommandType((String) null));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseCommandType_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "novin997"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ParserUtil.parseCommandType(INVALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseCommandType_validValue_returnCommandType() throws Exception {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandType expectedCommandType \u003d new CommandType(VALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(expectedCommandType, ParserUtil.parseCommandType(VALID_COMMAND_TYPE));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void parseCommandType_validValueWithWhiteSpace_returnCommandType() throws Exception {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String commandTypeWithSpace \u003d WHITESPACE + VALID_COMMAND_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandType expectedTextFile \u003d new CommandType(VALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(expectedTextFile, ParserUtil.parseCommandType(commandTypeWithSpace));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 57,
      "-": 207,
      "rajdeepsh": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectGroupCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.SelectGroupCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class SelectGroupCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private SelectGroupCommandParser parser \u003d new SelectGroupCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_validArgs_returnsSelectGroupCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectGroupCommand(INDEX_FIRST_GROUP));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectGroupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_TUT_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroupWithGroupAndPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.TUT_1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsWithPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getGroupList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e newGroups \u003d Arrays.asList(TUT_1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newGroups);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void resetData_withDuplicateGroups_throwsDuplicateGroupException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Two groups with the same identity fields"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedTut1 \u003d new GroupBuilder(TUT_1).withGroupLocation(VALID_GROUP_LOCATION_TUT_1)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withTags(VALID_GROUP_TAG_TUT_1)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e newGroups \u003d Arrays.asList(TUT_1, editedTut1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newGroups);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DuplicateGroupException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.hasGroup(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addressBook.hasGroup(TUT_1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_groupInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(TUT_1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addressBook.hasGroup(TUT_1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_groupWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(TUT_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedTut1 \u003d new GroupBuilder(TUT_1)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withGroupLocation(VALID_GROUP_LOCATION_TUT_1)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withTags(VALID_GROUP_TAG_TUT_1)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addressBook.hasGroup(editedTut1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void removeGroup_groupInAddressBook_removesGroup() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook expected \u003d new AddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTut1());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.removeGroup(getTut1());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, addressBook);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void removeGroup_groupNotInAddressBook_throwsGroupNotFoundException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(GroupNotFoundException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.removeGroup(getTut1());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasPersonInGroup_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addressBook.hasPersonInGroup(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasPersonInGroup_groupAlreadyHasPerson_returnsTrue() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addressBook.hasPersonInGroup(getAddGroupWithGroupAndPerson()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasPersonInGroup_groupDoesNotHavePerson_returnsFalse() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTut1());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addressBook.hasPersonInGroup(getAddGroupWithGroupAndPerson()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.addGroup(null);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_personAlreadyInGroup_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.addGroup(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_personNotAlreadyInGroup_addsPersonToGroup() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(getTut1());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.addGroup(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void getGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.getGroupList().remove(0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            this.groups.setAll(groups);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        public ObservableList\u003cGroup\u003e getGroupList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return groups;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 112,
      "rajdeepsh": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_GROUPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroupWithGroupAndPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.TUT_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsWithPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.hasGroup(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_groupNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(modelManager.hasGroup(getTut1()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasGroup_groupInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.createGroup(getTut1());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(modelManager.hasGroup(getTut1()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void deleteGroup_groupInAddressBook_deletesGroup() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ModelManager expected \u003d new ModelManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.createGroup(getTut1());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.deleteGroup(getTut1());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, modelManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void deleteGroup_groupNotInAddressBook_throwsGroupNotFoundException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(GroupNotFoundException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.deleteGroup(getTut1());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasPersonInGroup_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.hasPersonInGroup(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasPersonInGroup_personIsAlreadyInGroup_returnTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(modelManager.hasPersonInGroup(getAddGroupWithGroupAndPerson()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void hasPersonInGroup_personIsNotAlreadyInGroup_returnFalse() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.createGroup(getTut1());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(modelManager.hasPersonInGroup(getAddGroupWithGroupAndPerson()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_personAlreadyInGroup_throwsDuplicatePersonsException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.addGroup(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_personNotInGroup_addPersonToGroup() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.createGroup(getTut1());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.addGroup(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void getFilteredGroupList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.getFilteredGroupList().remove(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withPerson(BENSON).withGroup(getTut1())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withGroup(CS1010).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String[] keywordsGroup \u003d TUT_1.getGroupName().groupName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.updateFilteredGroupList(new GroupNameContainsKeywordsPredicate(Arrays.asList(keywordsGroup)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        modelManager.updateFilteredGroupList(PREDICATE_SHOW_ALL_GROUPS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "rajdeepsh": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/AddGroupTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroupWithGroupAndPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.getSingleTypicalPersonIndicesSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.getTypicalPersonIndicesSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class AddGroupTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new AddGroup(null, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_invalidIndex_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String invalidGroupIndex \u003d \"0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new AddGroup(Index.fromOneBased(Integer.parseInt(invalidGroupIndex)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                getSingleTypicalPersonIndicesSet()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_invalidIndex_throwsNumberFormatException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String invalidGroupIndex \u003d \"e\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NumberFormatException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new AddGroup(Index.fromOneBased(Integer.parseInt(invalidGroupIndex)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                getSingleTypicalPersonIndicesSet()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_personSetIsSet_isSet() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup actual \u003d getAddGroup3();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e(Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        actual.setPersonSet(personList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(getAddGroupWithGroupAndPerson().getPersonSet(), actual.getPersonSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_groupSetIsSet_isSet() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup actual \u003d getAddGroup3();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e(Arrays.asList(getTut1()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        actual.setGroupSet(groupList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(getAddGroupWithGroupAndPerson().getGroup(), actual.getGroup());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_validPersonIndexSet_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(getAddGroup3().validPersonIndexSet(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_invalidPersonIndexSet_returnsFalse() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(getAddGroup3().validPersonIndexSet(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_validGroupIndex_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(getAddGroup3().validGroupIndex(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_invalidGroupIndex_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(getAddGroup3().validGroupIndex(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroup \u003d getAddGroup1();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroupCopy \u003d new AddGroup(INDEX_FIRST_GROUP, getTypicalPersonIndicesSet());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addGroup.equals(addGroupCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(addGroup.equals(addGroup));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroup.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroup.equals(5));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different addGroup -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroup.equals(getAddGroup3()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group index -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroup.equals(getAddGroup2()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different person indices -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(addGroup.equals(getAddGroup3()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(INDEX_FIRST_GROUP.toString())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(\" : \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(INDEX_FIRST_GROUP.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expected \u003d builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String actual \u003d getAddGroup3().toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupLocationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupLocationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new GroupLocation(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_invalidGroupLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String invalidGroupLocation \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new GroupLocation(invalidGroupLocation));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void isValidGroupLocation() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null group location"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e GroupLocation.isValidGroupLocation(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid group location"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(GroupLocation.isValidGroupLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(GroupLocation.isValidGroupLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // valid group location"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupLocation.isValidGroupLocation(\"E1-01-01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupLocation.isValidGroupLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupLocation expected \u003d group.getGroupLocation();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(expected.equals(expected));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupLocation actual \u003d new GroupLocation(VALID_GROUP_LOCATION_TUT_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(expected.equals(actual));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(expected.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(expected.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group location -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupLocation actual2 \u003d new GroupLocation(\"stub\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(expected.equals(actual2));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expected \u003d VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String actual \u003d group.getGroupLocation().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertNotEquals(expected, \" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new GroupNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new GroupNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new GroupNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_groupNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new GroupNameContainsKeywordsPredicate(Collections.singletonList(\"CS1010\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        predicate \u003d new GroupNameContainsKeywordsPredicate(Arrays.asList(\"CS1010\", \"LT15\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").withGroupLocation(\"LT15\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        predicate \u003d new GroupNameContainsKeywordsPredicate(Arrays.asList(\"CS1010\", \"LT15\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        predicate \u003d new GroupNameContainsKeywordsPredicate(Arrays.asList(\"cS1010\", \"lT15\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void test_groupNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupNameContainsKeywordsPredicate predicate \u003d new GroupNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        predicate \u003d new GroupNameContainsKeywordsPredicate(Arrays.asList(\"LT15\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // Keywords match groupLocation but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        predicate \u003d new GroupNameContainsKeywordsPredicate(Arrays.asList(\"LT15\", \"MA1501\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(predicate.test(new GroupBuilder().withGroupName(\"CS1010\").withGroupLocation(\"LT15\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_TUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupNameTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_invalidGroupName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String invalidGroupName \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new GroupName(invalidGroupName));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void isValidGroupName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null group name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e GroupName.isValidGroupName(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // invalid group name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(GroupName.isValidGroupName(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(GroupName.isValidGroupName(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(GroupName.isValidGroupName(\"/\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(GroupName.isValidGroupName(\"TUT[1]*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // valid group name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupName.isValidGroupName(\"computing\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupName.isValidGroupName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupName.isValidGroupName(\"cs1010\")); // alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupName.isValidGroupName(\"MathsTutorial\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(GroupName.isValidGroupName(\"MathsTutorialForWeakStudents\")); // long names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupName expected \u003d group.getGroupName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(expected.equals(expected));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupName actual \u003d new GroupName(VALID_GROUP_NAME_TUT_1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(expected.equals(actual));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(expected.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(expected.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group name -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupName actual2 \u003d new GroupName(\"stub\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(expected.equals(actual2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expected \u003d VALID_GROUP_NAME_TUT_1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String actual \u003d group.getGroupName().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertNotEquals(expected, \" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/GroupTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.CS1010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsWithPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.getTags().remove(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.getPersons().remove(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void constructor_nullParameters_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new Group(null, null, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons_addPersonSetWithPerson_personSetModified() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group expected \u003d getTypicalGroupsWithPersons();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group actual \u003d getTut1();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        actual.addPersons(ALICE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons_addPersonSetWithPersonSet_personSetModified() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group expected \u003d getTypicalGroupsWithPersons();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expected.addPersons(AMY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group actual \u003d getTut1();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cPerson\u003e personSet \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE, AMY));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        actual.addPersons(personSet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void isSameGroup() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(group.isSameGroup(group));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.isSameGroup(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group location -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedGroup \u003d new GroupBuilder(group).withGroupLocation(VALID_GROUP_LOCATION_CS1010).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.isSameGroup(editedGroup));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group name -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup \u003d new GroupBuilder(group).withGroupName(VALID_GROUP_NAME_CS1010).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.isSameGroup(editedGroup));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same group name, same location, different tags -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup \u003d new GroupBuilder(group).withTags(VALID_GROUP_TAG_CS1010).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.isSameGroup(editedGroup));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupCopy \u003d new GroupBuilder(group).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(group.equals(groupCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(group.equals(group));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(CS1010));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedGroup \u003d new GroupBuilder(group).withGroupName(VALID_GROUP_NAME_CS1010).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(editedGroup));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group location -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup \u003d new GroupBuilder(group).withGroupLocation(VALID_GROUP_LOCATION_CS1010).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(editedGroup));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup \u003d new GroupBuilder(group).withTags(VALID_GROUP_TAG_CS1010).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(editedGroup));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        //different persons -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        editedGroup \u003d getTypicalGroupsWithPersons();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(editedGroup));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d getTut1();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(group.getGroupName())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(\" at location \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(group.getGroupLocation())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .append(\" with tags: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String expected \u003d builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String actual \u003d group.toString();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final String invalid \u003d \"[6]\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same string (\u003d)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different string (!\u003d)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertNotEquals(expected, invalid);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/model/group/UniqueGroupListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.model.group;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_TUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroup1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalAddGroups.getAddGroupWithGroupAndPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.CS1010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsWithPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.DuplicateGroupException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.exceptions.GroupNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class UniqueGroupListTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private final UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void contains_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.contains((Group) null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.contains((AddGroup) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.contains(null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void contains_groupNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(uniqueGroupList.contains(getTut1()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void contains_personNotInGroup_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(uniqueGroupList.contains(getAddGroup1()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(uniqueGroupList.contains(getTut1(), getAddGroup1()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void contains_groupInList_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(uniqueGroupList.contains(getTut1()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(uniqueGroupList.contains(getAddGroupWithGroupAndPerson()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void contains_groupWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group editedTut1 \u003d new GroupBuilder(getTut1())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withGroupLocation(VALID_GROUP_LOCATION_TUT_1)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withTags(VALID_GROUP_TAG_TUT_1)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(uniqueGroupList.contains(editedTut1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void add_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void create_duplicateGroup_throwsDuplicateGroupException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DuplicateGroupException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void create_createGroup_addGroupToList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ObservableList\u003cGroup\u003e expectedUniqueGroupList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedUniqueGroupList.add(getTut1());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.addGroup(null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_duplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.addGroup(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addGroup_addPersonToGroup_addPersonToGroupInList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.addGroup(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ObservableList\u003cGroup\u003e expectedUniqueGroupList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedUniqueGroupList.add(getTypicalGroupsWithPersons());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons_nullParameter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.addPersons(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void addPersons_noGroup_throwsGroupNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(GroupNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.addPersons(getAddGroupWithGroupAndPerson());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void createEditedGroup_nullParameter_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createEditedGroup(null, null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void remove_nullGroup_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.remove(null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void remove_groupDoesNotExist_throwsGroupNotFoundException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(GroupNotFoundException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.remove(getTut1());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void remove_existingGroup_removesGroup() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.remove(getTut1());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        UniqueGroupList expectedUniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setGroups_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.setGroups((List\u003cGroup\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setGroups_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.createGroup(getTut1());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e groupList \u003d Collections.singletonList(CS1010);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.setGroups(groupList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        UniqueGroupList expectedUniqueGroupList \u003d new UniqueGroupList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedUniqueGroupList.createGroup(CS1010);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedUniqueGroupList, uniqueGroupList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void setGroups_listWithDuplicateGroups_throwsDuplicateGroupException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e listWithDuplicateGroups \u003d Arrays.asList(getTut1(), getTut1());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DuplicateGroupException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.setGroups(listWithDuplicateGroups);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uniqueGroupList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/model/scripts/CommandTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.model.scripts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.CommandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class CommandTypeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CommandType(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void constructor_invalidCommandType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String invalidCommandType \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CommandType(invalidCommandType));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void isValidCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // null command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CommandType.isValidCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // blank command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // invalid commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\"abc\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\"efg\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\"@2123\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\"123\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(CommandType.isValidCommand(\"novin\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // valid commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"add\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"a\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"addgroup\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"addgrp\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"add_testmarks\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"addt\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"clear\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"c\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"creategroup\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"cg\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"delete\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"d\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"distinto\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"di\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"edit\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"e\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"edit_test\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"et\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"sendmail\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"sm\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"exit\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"ex\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"find\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"f\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"genlist\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"gl\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"display\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"disp\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"help\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"h\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"history\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"his\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"list\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"l\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"listgroup\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"lg\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"redo\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"r\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"select\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"s\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"undo\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(CommandType.isValidCommand(\"u\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void test_hashcode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandType commandType1 \u003d new CommandType(\"add\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "novin997"
        },
        "content": "        CommandType commandType2 \u003d new CommandType(\"undo\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(commandType1.hashCode() \u003d\u003d commandType2.hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/scripts/TextFileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.model.scripts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.script.TextFile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class TextFileTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TextFile(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void constructor_invalidCommandType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "        String invalidTextFile \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TextFile(invalidTextFile));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void isValidTextFile() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // null command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TextFile.isValidTextFile(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // blank command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // invalid commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"abc:\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"/efg\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"*123\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"?123\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"\u003c123\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"\u003e123\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertFalse(TextFile.isValidTextFile(\"\\\"123\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "        // valid commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"studentlist\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"mutipleGroup.abc\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"studentlist@\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"addgroup#\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"addgroup$\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"addgroup%\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"addgroup^\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertTrue(TextFile.isValidTextFile(\"addgroup\u0026\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/ScriptSetupTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.storage.scripts.ScriptSetup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ScriptSetupTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String TEST_FILES_LOCATION \u003d \"ScriptFiles/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String SCRIPTS_LOCATION \u003d \"/scripts/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private File addGroupsFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private File addPersonsFile;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private File testAddGroupsFile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private File testAddPersonsFile;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "novin997"
        },
        "content": "    private ScriptSetup scriptSetup;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "novin997"
        },
        "content": "        userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "novin997"
        },
        "content": "        scriptSetup \u003d new ScriptSetup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "novin997"
        },
        "content": "        testAddGroupsFile \u003d new File(scriptSetup.getDefaultLocation() + userPrefs.getScriptFileDirectory()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_GROUPS_FILE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "novin997"
        },
        "content": "        testAddPersonsFile \u003d new File(scriptSetup.getDefaultLocation() + userPrefs.getScriptFileDirectory()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_PERSONS_FILE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "novin997"
        },
        "content": "        /* There is error comparing the text file in another folder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "novin997"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "novin997"
        },
        "content": "        testAddGroupsFile \u003d new File(classLoader.getResource(TEST_FILES_LOCATION"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_GROUPS_FILE).getFile());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "novin997"
        },
        "content": "        testAddPersonsFile \u003d new File(classLoader.getResource(TEST_FILES_LOCATION"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_PERSONS_FILE).getFile());*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "novin997"
        },
        "content": "        /*Remove the scripts directory"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "novin997"
        },
        "content": "        File dir \u003d new File(scriptSetup.getDefaultLocation() + SCRIPTS_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "novin997"
        },
        "content": "        for (File file:dir.listFiles()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "novin997"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "novin997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "novin997"
        },
        "content": "        dir.delete();*/"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void execute_success() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "novin997"
        },
        "content": "        scriptSetup.execute(userPrefs.getScriptFileDirectory());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "novin997"
        },
        "content": "        addGroupsFile \u003d new File(scriptSetup.getDefaultLocation() + userPrefs.getScriptFileDirectory()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_GROUPS_FILE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "novin997"
        },
        "content": "        addPersonsFile \u003d new File(scriptSetup.getDefaultLocation() + userPrefs.getScriptFileDirectory()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_PERSONS_FILE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "novin997"
        },
        "content": "        boolean isTwoEqual \u003d FileUtils.contentEquals(addGroupsFile, testAddGroupsFile)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "novin997"
        },
        "content": "                \u0026\u0026 FileUtils.contentEquals(addPersonsFile, testAddPersonsFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(isTwoEqual, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "novin997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public void addSampleTextFile_success() throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "novin997"
        },
        "content": "        scriptSetup.addSampleTextFiles(userPrefs.getScriptFileDirectory(), scriptSetup.getDefaultLocation());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "novin997"
        },
        "content": "        addGroupsFile \u003d new File(scriptSetup.getDefaultLocation() + userPrefs.getScriptFileDirectory()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_GROUPS_FILE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "novin997"
        },
        "content": "        addPersonsFile \u003d new File(scriptSetup.getDefaultLocation() + userPrefs.getScriptFileDirectory()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "novin997"
        },
        "content": "                + scriptSetup.ADD_PERSONS_FILE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "novin997"
        },
        "content": "        boolean isTwoEqual \u003d FileUtils.contentEquals(addGroupsFile, testAddGroupsFile)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "novin997"
        },
        "content": "                \u0026\u0026 FileUtils.contentEquals(addPersonsFile, testAddPersonsFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "novin997"
        },
        "content": "        assertEquals(isTwoEqual, true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "novin997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedGroupTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.storage.XmlAdaptedGroup.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.TUT_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsWithPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class XmlAdaptedGroupTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_GROUP_NAME \u003d \"M@ths\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_GROUP_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_GROUP_TAG \u003d \"\u0026\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GROUP_NAME \u003d TUT_1.getGroupName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String VALID_GROUP_LOCATION \u003d TUT_1.getGroupLocation().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_GROUP_TAGS \u003d TUT_1.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final List\u003cXmlAdaptedPerson\u003e VALID_GROUP_PERSONS \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            getTypicalGroupsWithPersons().getPersons().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .map(XmlAdaptedPerson::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_validGroupDetails_returnsGroup() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(TUT_1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(TUT_1, group.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_invalidGroupName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new XmlAdaptedGroup(INVALID_GROUP_NAME, VALID_GROUP_LOCATION, VALID_GROUP_TAGS, VALID_GROUP_PERSONS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d GroupName.MESSAGE_GROUP_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_nullGroupName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(null, VALID_GROUP_LOCATION, VALID_GROUP_TAGS, VALID_GROUP_PERSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GroupName.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_invalidGroupLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new XmlAdaptedGroup(VALID_GROUP_NAME, INVALID_GROUP_LOCATION, VALID_GROUP_TAGS, VALID_GROUP_PERSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d GroupLocation.MESSAGE_GROUP_LOCATION_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_nullGroupLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(VALID_GROUP_NAME, null, VALID_GROUP_TAGS, VALID_GROUP_PERSONS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GroupLocation.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_invalidGroupTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidGroupTags \u003d new ArrayList\u003c\u003e(VALID_GROUP_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        invalidGroupTags.add(new XmlAdaptedTag(INVALID_GROUP_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                new XmlAdaptedGroup(VALID_GROUP_NAME, VALID_GROUP_LOCATION, invalidGroupTags, VALID_GROUP_PERSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, group::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(TUT_1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlAdaptedGroup groupCopy \u003d new XmlAdaptedGroup(TUT_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(group.equals(group));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(group.equals(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different object same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(group.equals(groupCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"Shemale\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final String INVALID_NATIONALITY \u003d \"SF\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final String INVALID_TAG \u003d \"\u0026\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private static final String VALID_NATIONALITY \u003d BENSON.getNationality().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_GRADE \u003d BENSON.getGrade().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private static final List\u003cXmlAdaptedTest\u003e VALID_TESTS \u003d BENSON.getTests().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            .map(XmlAdaptedTest::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(INVALID_NAME, VALID_GENDER, VALID_NATIONALITY,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_GENDER, VALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY, INVALID_PHONE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY, null,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    //TEST FOR INVALID GENDER"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, INVALID_GENDER, VALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_GENDER_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    //TEST FOR NULL GENDER"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    //TEST FOR INVALID NATIONALITY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void toModelType_invalidNationality_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, INVALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedMessage \u003d Nationality.MESSAGE_NATIONALITY_CONSTRAINT;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    //TEST FOR NULL NATIONALITY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public void toModelType_nullNationality_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, null, VALID_PHONE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nationality.class.getSimpleName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY, VALID_PHONE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                INVALID_EMAIL, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_PHONE, null, VALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, null, VALID_GRADE, VALID_TAGS, VALID_TESTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_GENDER, VALID_NATIONALITY,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GRADE, invalidTags, null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 12,
      "Tsuweiquan": 52,
      "-": 96,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.TUT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void readAddressBook_invalidGroupAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        readAddressBook(\"invalidGroupAddressBook.xml\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void readAddressBook_invalidAndValidGroupAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        readAddressBook(\"invalidAndValidGroupAddressBook.xml\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        original.createGroup(TUT_1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        original.createGroup(CS1010);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 127,
      "rajdeepsh": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.TypicalGroups;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path TYPICAL_GROUPS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalGroupsAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path INVALID_GROUP_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGroupAddressBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path DUPLICATE_GROUP_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateGroupAddressBook.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_typicalGroupsFile_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_GROUPS_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook typicalGroupsAddressBook \u003d TypicalGroups.getTypicalAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(addressBookFromFile, typicalGroupsAddressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_invalidGroupFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_GROUP_FILE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void toModelType_duplicateGroups_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_GROUP_FILE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_GROUP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "rajdeepsh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Adds a new {@code Group} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public AddressBookBuilder withGroup(Group group) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addressBook.createGroup(group);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "rajdeepsh": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DistributeBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.parseIsFlagged;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.distribute.Distribute;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " *  This class helps to build a Distribute Command for Testing purposes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "public class DistributeBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String DEFAULT_INDEX \u003d \"3\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String DEFAULT_GROUP_NAME \u003d \"CS2113-T13-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String DEFAULT_GENDER_FLAG \u003d \"false\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String DEFAULT_NATIONALITY_FLAG \u003d \"false\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private GroupName groupName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private boolean genderFlag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private boolean nationalityFlag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeBuilder() throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.index \u003d Integer.parseInt(DEFAULT_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.groupName \u003d new GroupName(DEFAULT_GROUP_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.genderFlag \u003d parseIsFlagged(DEFAULT_GENDER_FLAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationalityFlag \u003d parseIsFlagged(DEFAULT_NATIONALITY_FLAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeBuilder(Distribute distribute) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        index \u003d distribute.getIndex();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        groupName \u003d distribute.getGroupName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        genderFlag \u003d distribute.getGender();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        nationalityFlag \u003d distribute.getNationality();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeBuilder setIndex (String indexValue) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.index \u003d Integer.parseInt(indexValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeBuilder setGroupName (String groupName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.groupName \u003d new GroupName(groupName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeBuilder setGenderFlag (String genderFlag) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.genderFlag \u003d parseIsFlagged(genderFlag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public DistributeBuilder setNationalityFlag (String nationalityFlag) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationalityFlag \u003d parseIsFlagged(nationalityFlag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public Distribute build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return new Distribute(index, groupName, genderFlag, nationalityFlag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        descriptor.setNationality(person.getNationality());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        descriptor.setGrade(person.getGrade());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        descriptor.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public EditPersonDescriptorBuilder withNationality(String nationality) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        descriptor.setNationality(new Nationality(nationality));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 20,
      "-": 87,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupLocation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.GroupName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * A utility class to help with building Group objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String DEFAULT_GROUP_NAME \u003d \"TUT[10]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String DEFAULT_GROUP_LOCATION \u003d \"E10-10-10\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private GroupName groupName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private GroupLocation groupLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Set\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupName \u003d new GroupName(DEFAULT_GROUP_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupLocation \u003d new GroupLocation(DEFAULT_GROUP_LOCATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        persons \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Initializes the GroupBuilder with the data of {@code groupToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupBuilder(Group groupToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupName \u003d groupToCopy.getGroupName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupLocation \u003d groupToCopy.getGroupLocation();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(groupToCopy.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Sets the {@code GroupName} of the {@code Group} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupBuilder withGroupName(String groupName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupName \u003d new GroupName(groupName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Sets the {@code GroupLocation} of the {@code Group} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupBuilder withGroupLocation(String groupLocation) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.groupLocation \u003d new GroupLocation(groupLocation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Group} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public GroupBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public Group build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new Group(groupName, groupLocation, tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GroupUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.logic.commands.CreateGroupCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns an sreate group command string for adding the {@code group}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static String getCreateGroupCommand(Group group) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return CreateGroupCommand.COMMAND_WORD + \" \" + getGroupDetails(group);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns the part of command string for the given {@code group}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static String getGroupDetails(Group group) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        sb.append(PREFIX_NAME + group.getGroupName().groupName + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        sb.append(PREFIX_GROUP_LOCATION + group.getGroupLocation().groupLocation + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.getTags().stream().forEach("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "import seedu.address.model.grade.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Grade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final String DEFAULT_NATIONALITY \u003d \"SG\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"100\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Nationality nationality;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "    private Set\u003cTest\u003e tests;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        nationality \u003d new Nationality(DEFAULT_NATIONALITY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        grade \u003d new Grade(DEFAULT_GRADE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        tests \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        nationality \u003d personToCopy.getNationality();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        grade \u003d personToCopy.getGrade();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        tests \u003d new HashSet\u003c\u003e(personToCopy.getTests());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public PersonBuilder withNationality(String nationality) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        this.nationality \u003d new Nationality(nationality);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Grade} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        this.grade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "clara1234566"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "clara1234566"
        },
        "content": "        return new Person(name, gender, nationality, phone, email, address, grade, tags, tests);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "clara1234566": 6,
      "Tsuweiquan": 27,
      "-": 101,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NATIONALITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().gender + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        sb.append(PREFIX_NATIONALITY + person.getNationality().nationality + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        sb.append(PREFIX_GRADE + person.getGrade().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.gender).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        descriptor.getNationality().ifPresent(nationality -\u003e sb.append(PREFIX_NATIONALITY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                .append(nationality.nationality).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        descriptor.getGrade().ifPresent(grade -\u003e sb.append(PREFIX_GRADE).append(grade.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 8,
      "-": 62,
      "rajdeepsh": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScriptUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "novin997"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "novin997"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "novin997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "novin997"
        },
        "content": " *  This class contains the necessary values for testing of ScriptCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "novin997"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "novin997"
        },
        "content": "public class ScriptUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String VALID_TEXT_FILE \u003d \"ValidAddScriptCommand\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String INVALID_TEXT_FILE \u003d \"/studentlist\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "novin997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String VALID_COMMAND_TYPE \u003d AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "novin997"
        },
        "content": "    public static final String INVALID_COMMAND_TYPE \u003d \"abc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "novin997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "novin997": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddGroups.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTut1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GROUP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.getSingleTypicalPersonIndicesSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.getTypicalPersonIndicesSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.AddGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * Provides AddGroup object stubs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class TypicalAddGroups {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static AddGroup getAddGroup1() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroup \u003d new AddGroup(INDEX_FIRST_GROUP, getTypicalPersonIndicesSet());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return addGroup;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static AddGroup getAddGroup2() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroup \u003d new AddGroup(INDEX_SECOND_GROUP, getTypicalPersonIndicesSet());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return addGroup;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static AddGroup getAddGroup3() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroup \u003d new AddGroup(INDEX_FIRST_GROUP, getSingleTypicalPersonIndicesSet());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return addGroup;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static AddGroup getAddGroupWithGroupAndPerson() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddGroup addGroup \u003d new AddGroup(INDEX_FIRST_GROUP, getSingleTypicalPersonIndicesSet());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e(Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cGroup\u003e groupList \u003d new ArrayList\u003c\u003e(Arrays.asList(getTut1()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addGroup.setPersonSet(personList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        addGroup.setGroupSet(groupList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return addGroup;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroups;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroupsValidEmailPersons;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getMultipleValidTypicalPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getSingleValidTypicalPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * A utility class containing a list of {@code Group}{@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private TypicalAddressBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            ab.createGroup(group);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static AddressBook getSingleTypicalAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        for (Person person : getSingleValidTypicalPerson()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static AddressBook getMultipleTypicalAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        for (Person person : getMultipleValidTypicalPerson()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static AddressBook getGroupTypicalAddressBook() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        for (Person person : getMultipleValidTypicalPerson()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        ab.createGroup(getTypicalGroupsValidEmailPersons());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 29,
      "rajdeepsh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalGroups.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "//@@author rajdeepsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_LOCATION_TUT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_NAME_TUT_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_TAG_TUT_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JOELTAN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.NOVIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.WEIQUAN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " * A utility class containing a list of {@code Group} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class TypicalGroups {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group TUT_2 \u003d new GroupBuilder().withGroupName(\"TUT[2]\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupLocation(\"E2-02-02\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group TUT_3 \u003d new GroupBuilder().withGroupName(\"TUT[3]\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupLocation(\"E3-03-03\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withTags(\"afternoon\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group TUT_4 \u003d new GroupBuilder().withGroupName(\"TUT[4]\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupLocation(\"E4-04-04\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withTags(\"morning\", \"afternoon\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    // Manually added - Groups\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group TUT_1 \u003d new GroupBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupName(VALID_GROUP_NAME_TUT_1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupLocation(VALID_GROUP_LOCATION_TUT_1)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withTags(VALID_GROUP_TAG_TUT_1).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group CS1010 \u003d new GroupBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupName(VALID_GROUP_NAME_CS1010)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupLocation(VALID_GROUP_LOCATION_CS1010)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withTags(VALID_GROUP_TAG_CS1010).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group EMAIL_TEST_GROUP \u003d new GroupBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupName(\"TestGroupForEmail\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGroupLocation(\"NUS\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final String KEYWORD_MATCHING_CS1010 \u003d \"Cs1010\"; // A keyword that matches CS1010"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private TypicalGroups() {} // prevents instantiation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical groups."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (Group group : getTypicalGroups()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            ab.createGroup(group);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static Group getTut1() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new GroupBuilder()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withGroupName(VALID_GROUP_NAME_TUT_1)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withGroupLocation(VALID_GROUP_LOCATION_TUT_1)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .withTags(VALID_GROUP_TAG_TUT_1).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static List\u003cGroup\u003e getTypicalGroups() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TUT_1, CS1010, TUT_2, TUT_3, TUT_4));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group getTypicalGroupsWithPersons() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new GroupBuilder(TUT_1).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.addPersons(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Group getTypicalGroupsValidEmailPersons() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new GroupBuilder(EMAIL_TEST_GROUP).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.addPersons(JOEL);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.addPersons(JOELTAN);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.addPersons(NOVIN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        group.addPersons(WEIQUAN);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return group;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Index INDEX_FIRST_GROUP \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Index INDEX_SECOND_GROUP \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Index INDEX_THIRD_GROUP \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static Set\u003cIndex\u003e getSingleTypicalPersonIndicesSet() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e index \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        index.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static Set\u003cIndex\u003e getTypicalPersonIndicesSet() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Set\u003cIndex\u003e index \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        index.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        index.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        index.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "rajdeepsh": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_FEMALE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_MALE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NATIONALITY_CN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NATIONALITY_SG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"FEMALE\").withNationality(\"SG\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGrade(\"100\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"MALE\").withNationality(\"MY\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withGrade(\"1\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"MALE\").withNationality(\"US\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGrade(\"22\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"MALE\").withNationality(\"SG\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGrade(\"30\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"FEMALE\").withNationality(\"SG\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGrade(\"42\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"FEMALE\").withNationality(\"SG\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGrade(\"99\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGender(\"MALE\").withNationality(\"US\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGrade(\"100\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withNationality(\"SG\").withPhone(\"8482424\").withEmail(\"stefan@example.com\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withNationality(\"US\").withPhone(\"8482131\").withEmail(\"hans@example.com\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Person JOEL \u003d new PersonBuilder().withName(\"Tan Wei Hao Joel\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withNationality(\"SG\").withPhone(\"81385542\").withEmail(\"joeltan98@hotmail.com\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withAddress(\"Lakeside\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Person WEIQUAN \u003d new PersonBuilder().withName(\"Tsu Wei Quan\").withGender(\"FEMALE\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withNationality(\"SG\").withPhone(\"96259561\").withEmail(\"tsuweiquan@gmail.com\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withAddress(\"Pasiris\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Person NOVIN \u003d new PersonBuilder().withName(\"Novin Tong\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withNationality(\"SG\").withPhone(\"88888888\").withEmail(\"E0176909@u.nus.edu\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withAddress(\"East Side\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Person JOELTAN \u003d new PersonBuilder().withName(\"Joel Tan\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withNationality(\"SG\").withPhone(\"98989898\").withEmail(\"joel.twh@u.nus.edu\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withAddress(\"West Side\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static final Person TSURAJOVIN \u003d new PersonBuilder().withName(\"Tsuraj Jovin\").withGender(\"FEMALE\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withNationality(\"SG\").withPhone(\"98765432\").withEmail(\"tsurajovin@gmail.com\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            .withAddress(\"PSC Building\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withName(VALID_NAME_AMY).withGender(VALID_GENDER_FEMALE).withNationality(VALID_NATIONALITY_SG)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withGrade(VALID_GRADE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withName(VALID_NAME_BOB).withGender(VALID_GENDER_MALE).withNationality(VALID_NATIONALITY_CN)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static List\u003cPerson\u003e getSingleValidTypicalPerson() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOEL));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    public static List\u003cPerson\u003e getMultipleValidTypicalPerson() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JOEL, WEIQUAN, NOVIN, JOELTAN, TSURAJOVIN));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method creates an LinkListed of Person where it only contains Male Persons from the stub address book."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return : a Linklist of male persons"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static LinkedList\u003cPerson\u003e allMalePerson() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e maleList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        maleList.add(BENSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        maleList.add(CARL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        maleList.add(DANIEL);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        maleList.add(GEORGE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return maleList;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * This method creates an LinkListed of Person where it only contains female Persons from the stub address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     * @return : a Linklist of female persons"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static LinkedList\u003cPerson\u003e allFemalePerson() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        LinkedList\u003cPerson\u003e femaleList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        femaleList.add(ALICE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        femaleList.add(ELLE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        femaleList.add(FIONA);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return femaleList;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    public static Map\u003cNationality, Long\u003e getTypicalPersonNationalityMap() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        Map\u003cNationality, Long\u003e typicalPersonMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        typicalPersonMap.put(new Nationality(\"SG\"), Long.parseLong(\"4\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        typicalPersonMap.put(new Nationality(\"US\"), Long.parseLong(\"2\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        typicalPersonMap.put(new Nationality(\"MY\"), Long.parseLong(\"1\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        return typicalPersonMap;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 23,
      "Tsuweiquan": 84,
      "-": 57,
      "rajdeepsh": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.TUT_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private GroupPanelSelectionChangedEvent selectionChangedEventGroupStub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        selectionChangedEventGroupStub \u003d new GroupPanelSelectionChangedEvent(TUT_1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // associated web page of a group"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        postNow(selectionChangedEventGroupStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        URL expectedGroupUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + TUT_1.getGroupName().groupName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroupUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "rajdeepsh": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GroupCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGroup;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import guitests.guihandles.GroupCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.testutil.GroupBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupWithNoTags \u003d new GroupBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCard groupCard \u003d new GroupCard(groupWithNoTags, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uiPartRule.setUiPart(groupCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCardDisplay(groupCard, groupWithNoTags, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group groupWithTags \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupCard \u003d new GroupCard(groupWithNoTags, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uiPartRule.setUiPart(groupCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCardDisplay(groupCard, groupWithTags, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group group \u003d new GroupBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCard groupCard \u003d new GroupCard(group, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same group, same index -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCard copy \u003d new GroupCard(group, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(groupCard.equals(copy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTrue(groupCard.equals(groupCard));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(groupCard.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(groupCard.equals(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // different group, same index -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Group differentGroup \u003d new GroupBuilder().withGroupName(\"differentName\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(groupCard.equals(new GroupCard(differentGroup, 0)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // same group, different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(groupCard.equals(new GroupCard(group, 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts that {@code groupCard} displays the details of {@code expectedGroup} correctly and matches"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void assertCardDisplay(GroupCard groupCard, Group expectedGroup, int expectedId) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCardHandle groupCardHandle \u003d new GroupCardHandle(groupCard.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", groupCardHandle.getId());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        // verify group details are displayed correctly"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertCardDisplaysGroup(expectedGroup, groupCardHandle);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GroupListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalGroups.getTypicalGroups;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_GROUP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertGroupCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import guitests.guihandles.GroupCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import guitests.guihandles.GroupListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.events.ui.JumpToGroupListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "public class GroupListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final ObservableList\u003cGroup\u003e TYPICAL_GROUPS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            FXCollections.observableList(getTypicalGroups());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final JumpToGroupListRequestEvent JUMP_TO_SECOND_EVENT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            new JumpToGroupListRequestEvent(INDEX_SECOND_GROUP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private GroupListPanelHandle groupListPanelHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        initUi(TYPICAL_GROUPS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_GROUPS.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupListPanelHandle.navigateToCard(TYPICAL_GROUPS.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            Group expectedGroup \u003d TYPICAL_GROUPS.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            GroupCardHandle actualCard \u003d groupListPanelHandle.getGroupCardHandle(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            assertCardDisplaysGroup(expectedGroup, actualCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void handleJumpToGroupListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        initUi(TYPICAL_GROUPS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCardHandle expectedGroup \u003d groupListPanelHandle.getGroupCardHandle(INDEX_SECOND_GROUP.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupCardHandle selectedGroup \u003d groupListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertGroupCardEquals(expectedGroup, selectedGroup);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Verifies that creating and deleting large number of groups in {@code GroupListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        ObservableList\u003cGroup\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }, \"Creation and deletion of group cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns a list of groups containing {@code groupCount} groups that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code GroupListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private ObservableList\u003cGroup\u003e createBackingList(int groupCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithGroups(groupCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getGroupList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Returns a .xml file containing {@code groupCount} groups. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private Path createXmlFileWithGroups(int groupCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (int i \u003d 0; i \u003c groupCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            builder.append(\"\u003cgroups\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            builder.append(\"\u003cgroupName\u003e\").append(i).append(\"a\u003c/groupName\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            builder.append(\"\u003cgroupLocation\u003ea\u003c/groupLocation\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            builder.append(\"\u003c/groups\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        Path manyGroupsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyGroups.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        FileUtil.createFile(manyGroupsFile);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        FileUtil.writeToFile(manyGroupsFile, builder.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        manyGroupsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        return manyGroupsFile;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Initializes {@code groupListPanelHandle} with a {@code GroupListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code GroupListPanel}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private void initUi(ObservableList\u003cGroup\u003e backingList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        GroupListPanel groupListPanel \u003d new GroupListPanel(backingList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        uiPartRule.setUiPart(groupListPanel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        groupListPanelHandle \u003d new GroupListPanelHandle(getChildNode(groupListPanel.getRoot(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                GroupListPanelHandle.GROUP_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rajdeepsh": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            builder.append(\"\u003cgender\u003eMALE\u003c/gender\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "            builder.append(\"\u003cnationality\u003eSG\u003c/nationality\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            builder.append(\"\u003cgrade\u003e100\u003c/grade\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 2,
      "-": 124,
      "rajdeepsh": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_GROUPS_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            new AddressBookBuilder().withPerson(ALICE).build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final int INITIAL_TOTAL_PERSONS \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static final int INITIAL_TOTAL_GROUPS \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                INITIAL_TOTAL_PERSONS, INITIAL_TOTAL_GROUPS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(TOTAL_PERSONS_GROUPS_STATUS, INITIAL_TOTAL_PERSONS, INITIAL_TOTAL_PERSONS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                String.format(TOTAL_PERSONS_GROUPS_STATUS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        EVENT_STUB.data.getPersonList().size(), EVENT_STUB.data.getGroupList().size()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}, and the total persons matches that of"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code expectedTotalPersonsGroupsStatus}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                                        String expectedTotalPersonsGroupsStatus) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedTotalPersonsGroupsStatus, statusBarFooterHandle.getTotalPersonsGroupsStatus());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 11,
      "-": 69,
      "rajdeepsh": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0176882"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import guitests.guihandles.GroupCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import guitests.guihandles.GroupListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.model.group.Group;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.ui.GroupCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static void assertGroupCardEquals(GroupCardHandle expectedCard, GroupCardHandle actualCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedCard.getGroupLocation(), actualCard.getGroupLocation());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedCard.getGroupName(), actualCard.getGroupName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * in {@code PersonCard#TAG_COLOR_STYLES}{@code GroupCard#TAG_COLOR_STYLES}, using an index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * @see PersonCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * @see GroupCard#getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case \"afternoon\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case \"morning\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        case \"night\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            return \"black\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0176882"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0176882"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    private static void assertGroupTagsEqual(Group expectedGroup, GroupCardHandle actualCard) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedGroup.getTags().stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedGroup}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static void assertCardDisplaysGroup(Group expectedGroup, GroupCardHandle actualCard) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroup.getGroupName().groupName, actualCard.getGroupName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(expectedGroup.getGroupLocation().groupLocation, actualCard.getGroupLocation());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertGroupTagsEqual(expectedGroup, actualCard);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts that the list in {@code groupListPanelHandle} displays the details of {@code groups} correctly and"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static void assertGroupListMatching(GroupListPanelHandle groupListPanelHandle, Group... groups) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        for (int i \u003d 0; i \u003c groups.length; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            groupListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "            assertCardDisplaysGroup(groups[i], groupListPanelHandle.getGroupCardHandle(i));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts that the list in {@code groupListPanelHandle} displays the details of {@code groups} correctly and"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static void assertGroupListMatching(GroupListPanelHandle groupListPanelHandle, List\u003cGroup\u003e groups) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertGroupListMatching(groupListPanelHandle, groups.toArray(new Group[0]));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * Asserts the size of the list in {@code groupListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    public static void assertGroupListSize(GroupListPanelHandle groupListPanelHandle, int size) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        int numberOfGroup \u003d groupListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(size, numberOfGroup);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 44,
      "-": 76,
      "rajdeepsh": 69
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NATIONALITY_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import seedu.address.model.person.Nationality;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + \"  \" + NATIONALITY_DESC_AMY + \"  \" + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + \"  \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + GRADE_DESC_AMY + \" \" + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + GRADE_DESC_BOB + GENDER_DESC_BOB + NATIONALITY_DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Case: missing Gender -\u003e Rejected"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Case: missing Nationality -\u003e Rejected"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Case: invalid gender -\u003e rejected"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_GENDER_DESC + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertCommandFailure(command, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        // Case: invalid Nationality -\u003e rejected"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + INVALID_NATIONALITY_DESC"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        assertCommandFailure(command, Nationality.MESSAGE_NATIONALITY_CONSTRAINT);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + NATIONALITY_DESC_AMY"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GRADE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 1,
      "Tsuweiquan": 51,
      "-": 234,
      "rajdeepsh": 2
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_GROUPS_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        statusBarFooterHandle.rememberTotalPersonsGroupsStatus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(handle.isTotalPersonsGroupsStatusChanged());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location and the total person"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * and total group"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * list remains the same."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertFalse(handle.isTotalPersonsGroupsStatusChanged());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0176882"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     * Asserts that the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, and total persons/groups was changed to match the total"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "     * number of persons and groups in the address book, while the save location remains the same."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0176882"
        },
        "content": "    protected void assertStatusBarChangedExceptSaveLocation() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        final int totalGroups \u003d testApp.getModel().getAddressBook().getGroupList().size();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_GROUPS_STATUS,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                totalPersons, totalGroups), handle.getTotalPersonsGroupsStatus());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        assertEquals(String.format(TOTAL_PERSONS_GROUPS_STATUS, getModel().getAddressBook().getPersonList().size(),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                getModel().getAddressBook().getGroupList().size()),"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                getStatusBarFooter().getTotalPersonsGroupsStatus());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 16,
      "-": 291,
      "rajdeepsh": 13
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 4,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0176882"
        },
        "content": "        assertStatusBarChangedExceptSaveLocation();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0176882"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0176882": 6,
      "-": 192
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NATIONALITY_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + \"  \" + GENDER_DESC_BOB + \"  \" + NATIONALITY_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_DESC_BOB + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_DESC_BOB + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + ADDRESS_DESC_BOB + GRADE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_DESC_BOB + NATIONALITY_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + GENDER_DESC_AMY + NATIONALITY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + GRADE_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //TODO invalid gender"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        //TODO invalid Nationality"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Tsuweiquan"
        },
        "content": "                + NATIONALITY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Tsuweiquan": 29,
      "-": 286,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        //getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        //getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "        //assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "rajdeepsh": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rajdeepsh"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "rajdeepsh": 1
    }
  }
]
